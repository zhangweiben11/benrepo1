<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="createDomain" path="/shared/CoE/ServerConfiguration/Domain/createDomain" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[createDomain:

&#x9;This procedure is used to automate creating a domain.

&#x9;INPUT:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off.
&#x9;&#x9;domainName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the domain to be created
&#x9;&#x9;domainType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- LDAP (7.x and higher) or AZURE (8.x and higher)
&#x9;&#x9;annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The annotation of the domain
&#x9;&#x9;nameValuePairList&#x9;&#x9;LONGVARCHAR,&#x9;-- A list of name value pairs.  Use /shared/CoE/ServerConfiguration/Domain/getDomainTypes to get the valid attribute names
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The name/value pair format is attribute_name::attribute_value||attribute_name::attribute_value||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example:  LDAP=a_domain_subtype::activedirectory||a_domain_url::ldap://host.domain.com/dc=domain,dc=com||a_domain_admin_name::admin||a_domain_admin_password::password||a_domain_authentication::Simple||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_domain_subtype=activedirectory|iPlanet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_domain_authentication::Simple|Digest|Kerberos|None
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: AZURE=a_domain_tenant::tenant_name||a_domain_client_id::1234||a_domain_admin_name::admin||a_domain_admin_password::password||
&#x9;OUTPUT:
&#x9;&#x9;result - SUCCESS or an exception is thrown

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;2020.200&#x9;06/29/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="domainName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="domainType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="annotation" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="domainAdminPassword" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="nameValuePairList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege user="anonymous" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/user/operations/createDomain" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="createDomain" direction="IN">
        <datatype name="createDomain" extendedName="{http://www.compositesw.com/services/system/admin/user}createDomain" namespace="http://www.compositesw.com/services/system/admin/user" referenceDefinitionSet="/services/webservices/system/admin/user/operations/UserSchema" referenceType="{http://www.compositesw.com/services/system/admin/user}createDomain" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/user}createDomain">
          <schemaDatatype>
            <datatype name="createDomain" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="createDomainRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/user" subType="ELEMENT_DECL" type="TREE" refId="257">
              <element name="domainName" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="domainType" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="domainTypeValue" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="isBlocking" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
              <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/user" minOccurs="0">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/user" minOccurs="0">
                <datatype name="attributeList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="513">
                  <element name="attribute" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="attribute" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="769">
                      <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                        <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="attributeTypeValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="1025">
                          <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="attributeTypeValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1281">
                              <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="1025"/>
                              </element>
                              <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeTypeValueMap" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="1537">
                                  <element name="entry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1793">
                                      <element name="key" namespace="http://www.compositesw.com/services/system/util/common">
                                        <reference refId="1281"/>
                                      </element>
                                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common">
                                        <reference refId="1281"/>
                                      </element>
                                    </datatype>
                                  </element>
                                </datatype>
                              </element>
                              <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="2049">
                                  <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                  </element>
                                </datatype>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                      <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <reference refId="1537"/>
                      </element>
                      <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <reference refId="2049"/>
                      </element>
                      <element name="unset" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="createDomainResponse" direction="OUT">
        <datatype name="createDomainResponse" extendedName="{http://www.compositesw.com/services/system/admin/user}createDomainResponse" namespace="http://www.compositesw.com/services/system/admin/user" referenceDefinitionSet="/services/webservices/system/admin/user/operations/UserSchema" referenceType="{http://www.compositesw.com/services/system/admin/user}createDomainResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/user}createDomainResponse">
          <schemaDatatype>
            <datatype name="createDomainResponse" namespace="http://www.compositesw.com/services/system/admin/user" superTypeName="createDomainResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/user" subType="ELEMENT_DECL" type="TREE" refId="2305">
              <element name="status" namespace="http://www.compositesw.com/services/system/admin/user">
                <datatype name="operationStatus" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="2561">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2817">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/CoE/ServerConfiguration/Domain/getDomainTypes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="debug" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="getAttributes" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="domainType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="attributeName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="attributeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="updateRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="attributeRequired">
            <datatype type="BOOLEAN"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;createDomain:

&#x9;This procedure is used to automate creating a domain.

&#x9;INPUT:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off.
&#x9;&#x9;domainName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the domain to be created
&#x9;&#x9;domainType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- LDAP (7.x and higher) or AZURE (8.x and higher)
&#x9;&#x9;annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The annotation of the domain
&#x9;&#x9;domainAdminPassword&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The domain admin password
&#x9;&#x9;nameValuePairList&#x9;&#x9;LONGVARCHAR,&#x9;-- A list of name value pairs.  Use /shared/CoE/ServerConfiguration/Domain/getDomainTypes to get the valid attribute names
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The name/value pair format is attribute_name=attribute_value~~attribute_name=attribute_value~~
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example:  LDAP=a_domain_subtype=activedirectory~~a_domain_url=ldap://host.domain.com/dc=domain,dc=com~~a_domain_admin_name=admin~~a_domain_authentication=Simple~~
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_domain_subtype=activedirectory|iPlanet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_domain_authentication=Simple|Digest|Kerberos|None
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: AZURE=a_domain_tenant=tenant_name~~a_domain_client_id=1234~~a_domain_admin_name=admin~~
&#x9;OUTPUT:
&#x9;&#x9;result - SUCCESS or an exception is thrown

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;2020.300&#x9;07/02/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new
&#x9;2020.301&#x9;09/02/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Moved the LDAP admin password out of the name/value pair list and into a separate input parameter.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE createDomain(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off.
&#x9;IN domainName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the domain to be created
&#x9;IN domainType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- LDAP (7.x and higher) or AZURE (8.x and higher)
&#x9;IN annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The annotation of the domain
&#x9;IN domainAdminPassword&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The domain admin password
&#x9;IN nameValuePairList&#x9;&#x9;LONGVARCHAR,&#x9;-- A list of name value pairs.  Use /shared/CoE/ServerConfiguration/Domain/getDomainTypes to get the valid attribute names
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The name/value pair format is attribute_name=attribute_value~~attribute_name=attribute_value~~
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example:  LDAP=a_domain_subtype=activedirectory~~a_domain_url=ldap://host.domain.com/dc=domain,dc=com~~a_domain_admin_name=admin~~a_domain_authentication=Simple~~
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: AZURE=a_domain_tenant=tenant_name~~a_domain_client_id=1234~~a_domain_admin_name=admin~~
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;-- SUCCESS or an exception is thrown
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;createDomain&apos;;
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;; -- deep debug
&#x9;DECLARE debugPrintSize&#x9;&#x9;&#x9;INTEGER DEFAULT 63900;
&#x9;DECLARE nameValuePairListMod&#x9;LONGVARCHAR DEFAULT TRIM(nameValuePairList);
&#x9;DECLARE validDomainTypes&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE validAttributes&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE nameSep&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;=&apos;;
&#x9;DECLARE attrSep&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;~~&apos;;
&#x9;DECLARE request&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE attributes&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE nameValuePair&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE commonName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE commonType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE commonValue&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pos1,pos2,pos3,pos4&#x9;&#x9;INTEGER;
&#x9;DECLARE resultStr&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE response&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE errorMessage&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE domainAdminPasswordFound BOOLEAN DEFAULT false;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;SET result = &apos;SUCCESS&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  INPUT:&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  domainName=[&apos;||NVL(domainName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  domainType=[&apos;||NVL(domainType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  annotation=[&apos;||NVL(annotation,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  nameValuePairList=[&apos;||NVL(nameValuePairList,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;

&#x9;IF (domainName IS NULL OR LENGTH(TRIM(domainName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;domainName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (domainType IS NULL OR LENGTH(TRIM(domainType)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;domainType&quot; may not be null or empty.&apos;;
&#x9;END IF;

&#x9;-- Get the list of valid domain types
&#x9;FOR r AS SELECT * FROM /shared/CoE/ServerConfiguration/&quot;Domain&quot;/getDomainTypes(debug2, &apos;Y&apos;) DO
/*
domainType:&#x9;attributeName:&#x9;&#x9;&#x9;&#x9;attributeType:&#x9;updateRule:&#x9;&#x9;attributeRequired:&#x9;annotation:
LDAP&#x9;&#x9;a_domain_subtype&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_ONLY&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;LDAP server type (i.e. iplanet, activedirectory)
LDAP&#x9;&#x9;a_domain_url&#x9;&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;LDAP server URL
LDAP&#x9;&#x9;a_domain_admin_name&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;LDAP administrator user name
LDAP&#x9;&#x9;a_domain_admin_password&#x9;&#x9;PASSWORD_STRING&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;LDAP administrator password
LDAP&#x9;&#x9;a_domain_admin_new_password&#x9;PASSWORD_STRING&#x9;READ_WRITE&#x9;&#x9;false&#x9;&#x9;&#x9;&#x9;LDAP administrator new password
LDAP&#x9;&#x9;a_domain_authentication&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;LDAP server authentication type(i.e. Simple, Digest, Kerberos, None)

AZURE&#x9;&#x9;a_domain_tenant&#x9;&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;Tenant
AZURE&#x9;&#x9;a_domain_client_id&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;Client ID
AZURE&#x9;&#x9;a_domain_admin_name&#x9;&#x9;&#x9;STRING&#x9;&#x9;&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;Administrator name
AZURE&#x9;&#x9;a_domain_admin_password&#x9;&#x9;PASSWORD_STRING&#x9;READ_WRITE&#x9;&#x9;true&#x9;&#x9;&#x9;&#x9;Administrator password
*/
&#x9;&#x9;-- Add the domain type to the validation list
&#x9;&#x9;IF (LENGTH(validDomainTypes) = 0 OR INSTR(validDomainTypes, r.domainType||&apos;,&apos;) = 0) THEN
&#x9;&#x9;&#x9;SET validDomainTypes = validDomainTypes || r.domainType || &apos;,&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (UPPER(domainType) = r.domainType) THEN
&#x9;&#x9;&#x9;IF (LENGTH(validAttributes) = 0 OR INSTR(validAttributes, r.domainType||&apos;,&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET validAttributes = validAttributes || r.attributeName||nameSep||r.attributeType||attrSep;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  validDomainTypes=[&apos;||NVL(validDomainTypes,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos;:  validAttributes=[&apos;||NVL(validAttributes,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;
&#x9;-- Validate the domain type against the list of valid domain types
&#x9;IF (INSTR(UPPER(validDomainTypes), UPPER(domainType)||&apos;,&apos;) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;domainType&quot; must be one of (&apos;||validDomainTypes||&apos;).&apos;;
&#x9;END IF;

&#x9;-- Construct the common attributes from the name/value pair list
&#x9;IF (nameValuePairList IS NOT NULL AND LENGTH(TRIM(nameValuePairListMod)) &gt; 0) THEN
&#x9;&#x9;SET pos1 = INSTR(nameValuePairListMod, attrSep);
&#x9;&#x9;WHILE (pos1 &gt; 0) DO
&#x9;&#x9;&#x9;-- Extract the name/value pair
&#x9;&#x9;&#x9;SET nameValuePair = SUBSTRING(nameValuePairListMod, 1, pos1+1);
&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;nameValuePair[input list]=&apos;||NVL(nameValuePair,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET nameValuePairListMod = REPLACE(nameValuePairListMod, nameValuePair, &apos;&apos;);
&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;nameValuePairListMod=&apos;||NVL(nameValuePairListMod,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos2 = INSTR(nameValuePair, nameSep);
&#x9;&#x9;&#x9;IF (pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Extract the name and the value
&#x9;&#x9;&#x9;&#x9;SET commonName = SUBSTRING(nameValuePair, 1, pos2-1);
&#x9;&#x9;&#x9;&#x9;SET commonValue = REPLACE(SUBSTRING(nameValuePair, pos2+length(nameSep)), attrSep, &apos;&apos;);

&#x9;&#x9;&#x9;&#x9;-- Override the name/value pair list with the passed in domainAdminPassword if it is present
&#x9;&#x9;&#x9;&#x9;IF (commonName = &apos;a_domain_admin_password&apos; AND domainAdminPassword IS NOT NULL AND LENGTH(TRIM(domainAdminPassword)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET commonValue = domainAdminPassword;
&#x9;&#x9;&#x9;&#x9;&#x9;SET domainAdminPasswordFound = true;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Get the attribute type
&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(validAttributes, commonName||nameSep);
&#x9;&#x9;&#x9;&#x9;IF (pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos3 = INSTR(validAttributes, attrSep, pos2);
&#x9;&#x9;&#x9;&#x9;&#x9;SET nameValuePair = SUBSTRING(validAttributes, pos2, pos3-pos2);
&#x9;&#x9;&#x9;&#x9;&#x9;--CALL PRINT(&apos;nameValuePair[atttribute def]=&apos;||NVL(nameValuePair,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos4 = INSTR(nameValuePair, nameSep);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos4 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET commonType = SUBSTRING(nameValuePair, pos4+length(nameSep));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the attributes
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET attributes = attributes ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;common:attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:name&gt;&apos;||CAST(XMLTEXT(commonName) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:type&gt;&apos;||CAST(XMLTEXT(commonType) AS LONGVARCHAR)||&apos;&lt;/common:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:value&gt;&apos;||CAST(XMLTEXT(commonValue) AS LONGVARCHAR)||&apos;&lt;/common:value&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/common:attribute&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug2) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;attributes=&apos;||NVL(attributes,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The attribute name &quot;&apos;||commonName||&apos;&quot; is not a valid.  It must be a member of attribute definitions=[&apos;||validAttributes||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = INSTR(nameValuePairListMod, attrSep);
&#x9;&#x9;END WHILE;
&#x9;&#x9;-- Set the domain admin password if it was not in the name/value pair list
&#x9;&#x9;IF (NOT domainAdminPasswordFound AND domainAdminPassword IS NOT NULL AND LENGTH(TRIM(domainAdminPassword)) &gt; 0) THEN
&#x9;&#x9;&#x9;-- Set the attributes
&#x9;&#x9;&#x9;SET attributes = attributes ||
&#x9;&#x9;&#x9;&#x9;&apos;    &lt;common:attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:name&gt;a_domain_admin_password&lt;/common:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:type&gt;PASSWORD_STRING&lt;/common:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;      &lt;common:value&gt;&apos;||CAST(XMLTEXT(domainAdminPassword) AS VARCHAR)||&apos;&lt;/common:value&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/common:attribute&gt;&apos;||CHR(10);
&#x9;&#x9;END IF;

&#x9;&#x9;SET attributes = CHR(10)||
&#x9;&#x9;&#x9;&apos;  &lt;user:attributes&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;attributes||
&#x9;&#x9;&#x9;&apos;  &lt;/user:attributes&gt;&apos;;
&#x9;END IF;

&#x9;SET request = 
&#x9;&#x9;&apos;&lt;user:createDomain xmlns:user=&quot;http://www.compositesw.com/services/system/admin/user&quot; xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;user:domainName&gt;&apos;||CAST(XMLTEXT(domainName) AS LONGVARCHAR)||&apos;&lt;/user:domainName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;user:domainType&gt;&apos;||CAST(XMLTEXT(UPPER(domainType)) AS LONGVARCHAR)||&apos;&lt;/user:domainType&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;user:isBlocking&gt;1&lt;/user:isBlocking&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;user:annotation&gt;&apos;||TRIM(NVL(CAST(XMLTEXT(annotation) AS LONGVARCHAR),&apos;  &apos;))||&apos;&lt;/user:annotation&gt;&apos;||
&#x9;&#x9;&#x9;attributes||CHR(10)||
&#x9;&#x9;&apos;&lt;/user:createDomain&gt;&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : request=&apos;||CHR(10)||NVL(CAST(request AS LONGVARCHAR),&apos;null&apos;));
&#x9;&#x9;CALL PAUSE(500);
&#x9;END IF;

&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Invoke the web service API to create a domain.
&#x9;&#x9;CALL /services/webservices/system/admin/&quot;user&quot;/operations/createDomain(request, response, faultResponse);
&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : response=&apos;||CHR(10)||NVL(CAST(response AS LONGVARCHAR),&apos;null&apos;));
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;CALL LOG(&apos;COEUtilities : EXCEPTION=[&apos;||errorMessage||&apos;]&apos;);
&#x9;&#x9;&#x9;RAISE ex VALUE errorMessage;
&#x9;END;
END</attribute>
  <attribute name="creationDate" type="LONG">1593434905733</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1599058665695</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/78</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/79</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/223</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/208</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/119</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/207</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/81</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/140</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/82</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/122</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/136</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/80</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/218</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/172</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1593434905733</attribute>
</metadata>