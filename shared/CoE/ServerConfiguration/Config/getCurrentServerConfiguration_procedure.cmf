<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="getCurrentServerConfiguration" path="/shared/CoE/ServerConfiguration/Config/getCurrentServerConfiguration" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="csvFilePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="environmentName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resultPipe" direction="OUT" nullable="true">
      <datatype name="resultPipe" type="TABLE" refId="256">
        <element name="environment">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="displayName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="executeStatus">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="compareValue">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="spreadsheetValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="serverValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="unitName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="defaultValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="attrName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="attrType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="locallyDefined">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="updateRule">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="annotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
    <privilege user="anonymous" domain="composite" privileges="READ"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="append" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="fileContent" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceId">
            <datatype type="INTEGER"/>
          </element>
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="changeId">
            <datatype type="INTEGER"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/getServerAttributeDefs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="startingAttribute" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="categoryName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="attrName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="attrType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="updateRule">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="required">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="defaultValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="pattern">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="minValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="maxValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="displayName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="unitName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="parentName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="visible">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="editorHint">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="dependencyExpression">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="locallyDefined">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;getCurrentServerConfiguration:

&#x9;This procedure retrieves the configuration for a given hostname from the server configuration spreadsheet.
&#x9;Any column in the spreadsheet must have a first row column name with the hostname contained as the column name.
&#x9;It does not have to be exact.  The column name just must have hostname present.  There can be other text before and after the hostname.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;CSW Version:&#x9;Reason:
&#x9;2020.201&#x9;05/13/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new
&#x9;2020.300&#x9;07/02/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified the csv file layout to match the spreadsheet layout.
&#x9;2020.301&#x9;08/28/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8/8.3&#x9;&#x9;Catch exceptions for attributes that don&apos;t exist.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getCurrentServerConfiguration(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off.
&#x9;IN csvFilePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- [optional-0] If null then no file is output otherwise provide the full file system path to a CSV file for comma-separated attributes.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;&#x9;Regardless of this option, the results are still returned by this procedure as a PIPE output.
&#x9;IN environmentName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The input environment name contained within the spreadsheet.  Example: DEV, UAT, PROD
&#x9;OUT resultPipe&#x9;&#x9;&#x9;&#x9;PIPE(
&#x9;&#x9;environment&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;displayName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;executeStatus&#x9;&#x9;VARCHAR,
&#x9;&#x9;compareValue&#x9;&#x9;VARCHAR,
&#x9;&#x9;spreadsheetValue &#x9;VARCHAR(32768),
&#x9;&#x9;serverValue&#x9;&#x9;&#x9;VARCHAR(32768),
&#x9;&#x9;unitName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;defaultValue&#x9;&#x9;VARCHAR(32768),
&#x9;&#x9;attrName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;attrType&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;locallyDefined&#x9;&#x9;BIT,
&#x9;&#x9;updateRule&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;annotation&#x9;&#x9;&#x9;VARCHAR(32768)
&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getCurrentServerConfiguration&apos;;
&#x9;DECLARE attrName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&quot;Attribute Path:&quot;&apos;;
&#x9;DECLARE execName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&quot;Execute:&quot;&apos;;
&#x9;DECLARE attrType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE exelTablePath&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT &apos;/shared/CoE/ServerConfiguration/Datasources/ServerConfiguration/CoeServerConfiguration.xlsx/ServerConfig&apos;;
&#x9;-- The SQL statement to the ServerConfiguration spreadsheet, table or view.&#x9;Procedures are not supported within the FROM clause.
&#x9;--  The SQL Statement must have only 3 columns [environment, attrName, attrValue].  Where clause and order by are not needed.
&#x9;-- The spreadsheet, table or view may have more columns but the SQL statement must only specify the three shown below:
&#x9;--&#x9;&#x9;1. environment - the environment designation for the parameters listed.  Allows more than one environment to be stored within source.
&#x9;--&#x9;&#x9;2. attrName - the full path to the attribute.
&#x9;--&#x9;&#x9;3. attrValue - the configuration value to be updated.  If the value of &apos;null&apos; is found, it is converted to an actual null value.
&#x9;-- Example: select environment, attrName, attrValue from /shared/Common/ServerConfig/ServerConfiguration/ServerConfiguration.xlsx/ServerConfiguration
&#x9;-- Note: It is not necessary to place double-quotes around paths.  This will be taken care of within this procedure.
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement1&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement2&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE hostname&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE hostnamePart1&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE columnName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnNameList&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE fileContents&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE TYPE serverConfigType&#x9;ROW(environment VARCHAR, executeStatus VARCHAR, attrName VARCHAR(1000), spreadsheetValue LONGVARCHAR);
&#x9;DECLARE serverCurs&#x9;&#x9;&#x9;&#x9;CURSOR serverConfigType;
&#x9;DECLARE serverRec&#x9;&#x9;&#x9;&#x9;serverConfigType;
&#x9;-- [optional-3] If null then use the default attribute list (defaultAttributeNameList) within this procedure is used.
&#x9;--&#x9;&#x9;&#x9;&#x9;Otherwise the user provides a comma-separate list of attribute name paths to retrieve.
&#x9;--&#x9;&#x9;&#x9;&#x9;Mutually exclusive from changedAttrValues, attributeName, and additionalAttributeNameList.
&#x9;DECLARE overrideAttributeNameList1 LONGVARCHAR DEFAULT &apos;&apos;;&#x9;
&#x9;DECLARE overrideAttributeNameList2 LONGVARCHAR DEFAULT &apos;&apos;;&#x9;
&#x9;DECLARE Type resultType&#x9;&#x9;&#x9;ROW(
&#x9;&#x9;environment&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;displayName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;executeStatus&#x9;&#x9;VARCHAR,
&#x9;&#x9;compareValue&#x9;&#x9;VARCHAR,
&#x9;&#x9;spreadsheetvalue&#x9;VARCHAR(32768),
&#x9;&#x9;serverValue&#x9;&#x9;&#x9;VARCHAR(32768),
&#x9;&#x9;unitName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;defaultValue&#x9;&#x9;VARCHAR(32768),
&#x9;&#x9;attrName&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;attrType&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;locallyDefined&#x9;&#x9;BIT,
&#x9;&#x9;updateRule&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;annotation&#x9;&#x9;&#x9;VARCHAR(32768)
&#x9;);
&#x9;DECLARE resultCurs&#x9;&#x9;&#x9;&#x9;CURSOR resultType;
&#x9;DECLARE resultRec&#x9;&#x9;&#x9;&#x9;resultType;
&#x9;DECLARE errorMessage&#x9;&#x9;&#x9;LONGVARCHAR;

&#x9;IF (environmentName IS NULL OR LENGTH(TRIM(environmentName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos; : The input parameter &quot;environmentName&quot; may not be null or emptly.&apos;;
&#x9;END IF;

&#x9;-------------------------------------------
&#x9;-- Dynamically determine [attrValue] column name
&#x9;--------------------------------------------
&#x9;-- Get the current hostname
&#x9;SELECT A.result INTO hostname FROM /lib/util/GetProperty(&apos;SERVER_HOSTNAME&apos;) A;
&#x9;-- Extract the first part of the hostname as in hostpart1.part2.part3
&#x9;SET pos = INSTR(hostname, &apos;.&apos;);
&#x9;IF (pos &gt; 0) THEN
&#x9;&#x9;SET hostnamePart1 = SUBSTRING(hostname, 1, pos-1);
&#x9;ELSE
&#x9;&#x9;SET hostnamePart1 = hostname;
&#x9;END IF;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : hostname=[&apos;||NVL(hostname,&apos;null&apos;)||&apos;]  hostnamePart1=[&apos;||NVL(hostnamePart1,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;

&#x9;-- Get the children from the server configuration spreadsheet
&#x9;columnLoop:
&#x9;FOR r AS
&#x9;&#x9;SELECT columnName FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(exelTablePath, &apos;TABLE&apos;)
&#x9;&#x9;WHERE columnName IS NOT NULL 
&#x9;&#x9;  AND LOWER(columnName) LIKE &apos;%&apos;||LOWER(hostnamePart1)||&apos;%&apos;
&#x9;DO
&#x9;&#x9;SET columnName = &apos;&quot;&apos;||r.columnName||&apos;&quot;&apos;;
&#x9;&#x9;LEAVE columnLoop;
&#x9;END FOR;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : columnName=[&apos;||NVL(columnName,&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;
&#x9;-- Raise an exception if the column name is null.
&#x9;IF (columnName IS NULL) THEN
&#x9;&#x9;FOR r AS
&#x9;&#x9;&#x9;SELECT columnName FROM /shared/ASAssets/Utilities/repository/getBasicResourceCursor_SQL_TABLE(exelTablePath, &apos;TABLE&apos;)
&#x9;&#x9;&#x9;WHERE columnName IS NOT NULL
&#x9;&#x9;&#x9;  AND LENGTH(TRIM(columnName)) &gt; 0
&#x9;&#x9;&#x9;  AND INSTR(LOWER(columnName), &apos;col&apos;) = 0 
&#x9;&#x9;DO
&#x9;&#x9;&#x9;IF (LENGTH(columnNameList) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET columnNameList = columnNameList || &apos;,&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET columnNameList = columnNameList || &apos;&quot;&apos;||LOWER(r.columnName)||&apos;&quot;&apos;;
&#x9;&#x9;END FOR;

&#x9;&#x9;RAISE ex VALUE &apos;There is no column name in the target spreadsheet matching &apos;&apos;%&apos;||LOWER(hostnamePart1)||&apos;%&apos;&apos;.  The column list includes [&apos;||columnNameList||&apos;]&apos;;
&#x9;END IF;

&#x9;-------------------------------------------
&#x9;-- Dynamically Create the SQL Statement
&#x9;-------------------------------------------
&#x9;-- Put double quotes around path parts that need it.
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(exelTablePath, null, exelTablePath);
&#x9;SET sqlStatement = &#x9;&#x9;
&#x9;&#x9;&apos;SELECT &apos;&apos;&apos;||environmentName||&apos;&apos;&apos; environment, &apos;||execName||&apos; executeStatus, &apos;||attrName||&apos; attrName, [attrValue] spreadsheetValue FROM &apos;|| exelTablePath || 
&#x9;&#x9;&apos; WHERE &apos;||attrName||&apos; IS NOT NULL&apos;;

&#x9;-------------------------------------------
&#x9;-- Replace the attribute name
&#x9;-------------------------------------------
&#x9;SET sqlStatement = REPLACE(sqlStatement, &apos;[attrValue]&apos;, columnName);

&#x9;-------------------------------------------
&#x9;-- Print out SQL Statement
&#x9;--------------------------------------------
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;IF (sqlStatement IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE moduleName||&apos; : The &quot;sqlStatement&quot; is null&apos;;
&#x9;END IF;

&#x9;-------------------------------------------
&#x9;-- Get current server values based on spreadsheet
&#x9;--------------------------------------------
&#x9;OPEN serverCurs FOR sqlStatement;
&#x9;FOR r AS serverCurs DO
&#x9;&#x9;SET serverRec = r;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : env=[&apos;||NVL(r.environment,&apos;null&apos;)||&apos;]  execute=[&apos;||NVL(r.executeStatus,&apos;null&apos;)||&apos;]  attrName=[&apos;||NVL(r.attrName,&apos;null&apos;)||&apos;]  spreadsheetValue=[&apos;||NVL(r.spreadsheetValue,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;END IF;
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;FOR d AS SELECT attrType FROM /shared/ASAssets/Utilities/repository/getServerAttributeDefs(serverRec.attrName) DO
&#x9;&#x9;&#x9;&#x9;SET attrType = d.attrType;
&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;IF (attrType &lt;&gt; &apos;MAP&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- Add to the override list
&#x9;&#x9;&#x9;&#x9;IF (LENGTH(overrideAttributeNameList1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET overrideAttributeNameList1 = overrideAttributeNameList1 || &apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET overrideAttributeNameList1 = overrideAttributeNameList1 || serverRec.attrName;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;-- Add to the override list for MAP
&#x9;&#x9;&#x9;&#x9;IF (LENGTH(overrideAttributeNameList2) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET overrideAttributeNameList2 = overrideAttributeNameList2 || &apos;,&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET overrideAttributeNameList2 = overrideAttributeNameList2 || serverRec.attrName;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos; :     INVALID ATTRIBUTE  attrName=[&apos;||NVL(r.attrName,&apos;null&apos;)||&apos;]  errorMessage=[&apos;||REPLACE(NVL(errorMessage,&apos;null&apos;),CHR(10),&apos; &apos;)||&apos;]&apos;,1,63900));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END;
&#x9;END FOR;

&#x9;IF ((overrideAttributeNameList1 IS NOT NULL AND LENGTH(TRIM(overrideAttributeNameList1)) &gt; 0) OR 
&#x9;&#x9;(overrideAttributeNameList2 IS NOT NULL AND LENGTH(TRIM(overrideAttributeNameList2)) &gt; 0)) THEN
&#x9;&#x9;SET fileContents = &apos;&quot;Attribute Path:&quot;,&quot;Execute:&quot;,&quot;Attribute Display Name:&quot;,&quot;Spreadsheet Value:&quot;,&quot;UnitName:&quot;,&quot;Default Value&quot;,&quot;Locally Defined&quot;,&quot;Comment:&quot;,&quot;&apos;||environmentName||&apos;:&quot;,&apos;||NVL(columnName,&apos;no_hostname_found&apos;)||&apos;,&quot;compareValue&quot;,&quot;updateRule&quot;,&quot;attrType&quot;&apos;||CHR(10);
&#x9;&#x9;SET sqlStatement1 = 
&#x9;&#x9;&apos;    SELECT &apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.environment,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.displayName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SPS.&apos;||execName||&apos; executeStatus,&apos;||CHR(10)||
&#x9;&#x9;&apos;        CASE WHEN SRV.attrType = &apos;&apos;BOOLEAN&apos;&apos; THEN&apos;||CHR(10)||
&#x9;&#x9;&apos;                CASE WHEN SPS.&apos;||columnName||&apos; = &apos;&apos;1&apos;&apos; OR UPPER(SPS.&apos;||columnName||&apos;) = &apos;&apos;TRUE&apos;&apos; THEN &apos;||CHR(10)||
&#x9;&#x9;&apos;                        CASE WHEN UPPER(SRV.attrValue) = &apos;&apos;TRUE&apos;&apos; THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                            ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        END&apos;||CHR(10)||
&#x9;&#x9;&apos;                     ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                        CASE WHEN UPPER(SRV.attrValue) = &apos;&apos;FALSE&apos;&apos; THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                            ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        END&apos;||CHR(10)||
&#x9;&#x9;&apos;                END&apos;||CHR(10)||
&#x9;&#x9;&apos;             ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                 CASE WHEN SRV.attrValue = SPS.&apos;||columnName||&apos; OR (SRV.attrValue IS NULL AND (SPS.&apos;||columnName||&apos; IS NULL OR UPPER(SPS.&apos;||columnName||&apos;) = &apos;&apos;NULL&apos;&apos;)) THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                      ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                 END&apos;||CHR(10)||
&#x9;&#x9;&apos;        END compareValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        CASE WHEN SRV.attrType = &apos;&apos;BOOLEAN&apos;&apos; THEN&apos;||CHR(10)||
&#x9;&#x9;&apos;                CASE WHEN SPS.&apos;||columnName||&apos; = &apos;&apos;1&apos;&apos; OR UPPER(SPS.&apos;||columnName||&apos;) = &apos;&apos;TRUE&apos;&apos; THEN &apos;&apos;true&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                     ELSE &apos;&apos;false&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                END&apos;||CHR(10)||
&#x9;&#x9;&apos;             ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                  CASE WHEN INSTR(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;) &gt; 0 THEN REPLACE(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;, &apos;&apos;&apos;||hostnamePart1||&apos;&apos;&apos;) &apos;||CHR(10)||
&#x9;&#x9;&apos;                       ELSE SPS.&apos;||columnName||CHR(10)||
&#x9;&#x9;&apos;                  END&apos;||CHR(10)||
&#x9;&#x9;&apos;        END spreadsheetValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrValue serverValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.unitName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.defaultValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrType,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.locallyDefined,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.updateRule,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.annotation&apos;||CHR(10)||
&#x9;&#x9;&apos;        FROM /shared/ASAssets/Utilities/repository/server/getSpecifiedServerAttributes(&apos;&apos;&apos;||NVL(debug,&apos;N&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||environmentName||&apos;&apos;&apos;, null, null, null, overrideAttributeNameList1, null) SRV&apos;||CHR(10)||
&#x9;&#x9;&apos;            INNER {OPTION FORCE_DISK} JOIN &apos;||exelTablePath||&apos; SPS&apos;||CHR(10)||
&#x9;&#x9;&apos;                ON SRV.attrName = SPS.&apos;||attrName||CHR(10)
&#x9;&#x9;;

&#x9;&#x9;SET sqlStatement2 = 
&#x9;&#x9;&apos;    SELECT &apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.environment,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.displayName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SPS.&apos;||execName||&apos; executeStatus,&apos;||CHR(10)||
&#x9;&#x9;&apos;        CASE WHEN SRV.attrType = &apos;&apos;BOOLEAN&apos;&apos; THEN&apos;||CHR(10)||
&#x9;&#x9;&apos;                CASE WHEN SPS.&apos;||columnName||&apos; = &apos;&apos;1&apos;&apos; OR UPPER(SPS.&apos;||columnName||&apos;) = &apos;&apos;TRUE&apos;&apos; THEN &apos;||CHR(10)||
&#x9;&#x9;&apos;                        CASE WHEN UPPER(SRV.attrValue) = &apos;&apos;TRUE&apos;&apos; THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                            ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        END&apos;||CHR(10)||
&#x9;&#x9;&apos;                     ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                        CASE WHEN UPPER(SRV.attrValue) = &apos;&apos;FALSE&apos;&apos; THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                            ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        END&apos;||CHR(10)||
&#x9;&#x9;&apos;                END&apos;||CHR(10)||
&#x9;&#x9;&apos;             ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                 CASE WHEN SRV.attrValue = REPLACE(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;, &apos;&apos;&apos;||hostnamePart1||&apos;&apos;&apos;) OR (SRV.attrValue IS NULL AND REPLACE(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;, &apos;&apos;&apos;||hostnamePart1||&apos;&apos;&apos;) IS NULL) THEN &apos;&apos;EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                      ELSE &apos;&apos;NOT EQUAL&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                 END&apos;||CHR(10)||
&#x9;&#x9;&apos;        END compareValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        CASE WHEN SRV.attrType = &apos;&apos;BOOLEAN&apos;&apos; THEN&apos;||CHR(10)||
&#x9;&#x9;&apos;                CASE WHEN SPS.&apos;||columnName||&apos; = &apos;&apos;1&apos;&apos; OR UPPER(SPS.&apos;||columnName||&apos;) = &apos;&apos;TRUE&apos;&apos; THEN &apos;&apos;true&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                     ELSE &apos;&apos;false&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&apos;                END&apos;||CHR(10)||
&#x9;&#x9;&apos;             ELSE &apos;||CHR(10)||
&#x9;&#x9;&apos;                  CASE WHEN INSTR(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;) &gt; 0 THEN REPLACE(SPS.&apos;||columnName||&apos;, &apos;&apos;[hostname]&apos;&apos;, &apos;&apos;&apos;||hostnamePart1||&apos;&apos;&apos;) &apos;||CHR(10)||
&#x9;&#x9;&apos;                       ELSE SPS.&apos;||columnName||CHR(10)||
&#x9;&#x9;&apos;                  END&apos;||CHR(10)||
&#x9;&#x9;&apos;        END spreadsheetValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrValue serverValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.unitName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.defaultValue,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrName,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.attrType,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.locallyDefined,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.updateRule,&apos;||CHR(10)||
&#x9;&#x9;&apos;        SRV.annotation&apos;||CHR(10)||
&#x9;&#x9;&apos;        FROM /shared/ASAssets/Utilities/repository/server/getSpecifiedServerAttributes(&apos;&apos;&apos;||NVL(debug,&apos;N&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||environmentName||&apos;&apos;&apos;, null, null, null, overrideAttributeNameList2, null) SRV&apos;||CHR(10)||
&#x9;&#x9;&apos;            LEFT OUTER {OPTION FORCE_DISK} JOIN &apos;||exelTablePath||&apos; SPS&apos;||CHR(10)||
&#x9;&#x9;&apos;                ON SRV.attrName = SPS.&apos;||attrName||CHR(10)||
&#x9;&#x9;&apos;                AND SRV.attrValue = SPS.&apos;||columnName||CHR(10)||
--&#x9;&#x9;&apos;        WHERE SPS.&quot;Execute:&quot; IS NOT NULL&apos;||
&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&apos;SELECT * FROM (&apos;||CHR(10)||
&#x9;&#x9;&#x9;sqlStatement1 ||
&#x9;&#x9;&apos;UNION&apos;||CHR(10)|| 
&#x9;&#x9;&#x9;sqlStatement2 ||
&#x9;&#x9;&apos;) a&apos;||CHR(10)||
&#x9;&#x9;&apos;ORDER BY attrName&apos;;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;CALL PRINT(&apos;-------------------------------------------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;CALL PRINT(&apos;-------------------------------------------------------------------------------------------------------&apos;);
&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;OPEN resultCurs FOR sqlStatement;
&#x9;&#x9;FOR r AS resultCurs DO
&#x9;&#x9;&#x9;INSERT INTO resultPipe VALUES(r.environment, r.displayName, r.executeStatus, r.compareValue, r.spreadsheetValue, r.serverValue, r.unitName, r.defaultValue, r.attrName, r.attrType, r.locallyDefined, r.updateRule, r.annotation);

&#x9;&#x9;&#x9;-- Capture the row for the CSV file if requested.
&#x9;&#x9;&#x9;IF (csvFilePath IS NOT NULL AND LENGTH(TRIM(csvFilePath)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET fileContents = fileContents || 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.attrName,&apos;null&apos;)&#x9;&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.executeStatus,&apos;null&apos;)&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.displayName,&apos;null&apos;)&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||REPLACE(NVL(r.spreadsheetValue,&apos;null&apos;),&apos;&quot;&apos;,&apos;&quot;&quot;&apos;)&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.unitName,&apos;null&apos;)&#x9;&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||REPLACE(NVL(r.defaultValue,&apos;null&apos;),&apos;&quot;&apos;,&apos;&quot;&quot;&apos;)&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(CAST(r.locallyDefined AS VARCHAR),&apos;null&apos;)&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||REPLACE(REPLACE(NVL(r.annotation,&apos;null&apos;),&apos;&quot;&apos;,&apos;&apos;&apos;&apos;), CHR(10), &apos; &apos;)&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.environment,&apos;null&apos;)||&apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||REPLACE(NVL(r.serverValue,&apos;null&apos;),&apos;&quot;&apos;,&apos;&quot;&quot;&apos;)&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.compareValue,&apos;null&apos;)&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.updateRule,&apos;null&apos;)&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&quot;&apos;||NVL(r.attrType,&apos;null&apos;)&#x9;&#x9;&#x9;|| &apos;&quot;,&apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;||CHR(10);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;


&#x9;&#x9;-- Write out the file
&#x9;&#x9;IF (csvFilePath IS NOT NULL AND LENGTH(TRIM(csvFilePath)) &gt; 0) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/file/FileProcessingCJP/createFileAscii(csvFilePath, 0, fileContents);
&#x9;&#x9;END IF;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1587650144032</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1598712134311</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/133</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/311</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/310</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/313</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/312</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/170</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/119</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/314</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/207</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/183</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1587650144032</attribute>
</metadata>