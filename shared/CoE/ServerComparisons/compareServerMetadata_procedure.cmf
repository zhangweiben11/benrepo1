<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="compareServerMetadata" path="/shared/CoE/ServerComparisons/compareServerMetadata" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[compareMetadataTargetServer

&#x9;This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
&#x9;&#x9;against a target server environment metadata.  Resources from source environment are assumed to be
&#x9;&#x9;in the same location on the target server.  If the resource does not exist, it is reported that way.
&#x9;&#x9;The objective is alert the development team of differences in the metadata on the target server before
&#x9;&#x9;a deployment is performed.  The idea is to know what is going to happen before it happens so that the
&#x9;&#x9;developer can prepare ahead of time.

&#x9;Input:
&#x9;&#x9;inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N=no debug.  Y=debug on.
&#x9;&#x9;startingResourcePath&#x9;LONGVARCHAR,&#x9;-- The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;targetDVSchemaPath&#x9;&#x9;LONGVARCHAR, &#x9;-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;getBasicResourceCursor_SQL_TABLE and getServerAttribute
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
&#x9;&#x9;sendEmail&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;&#x9;emailList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- A comma-separated list of valid emails

&#x9;Output:
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;startingLineagePath&#x9;&#x9;VARCHAR(4000),
&#x9;&#x9;&#x9;message &#x9;&#x9;&#x9;&#x9;LONGVARCHAR
&#x9;&#x9;)

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;04/19/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="statusFilterList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sendEmail" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="emailList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sourceEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="targetEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="publishedDatabasePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathSource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathTarget" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="linkType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataPath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="metadataType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="metadataSubtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceNumChars">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="targetNumChars">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="sourceScript">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="targetScript">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="message">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;compareServerMetadata

&#x9;This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
&#x9;&#x9;against a target server environment metadata.  Resources from source environment are assumed to be
&#x9;&#x9;in the same location on the target server.  If the resource does not exist, it is reported that way.
&#x9;&#x9;The objective is alert the development team of differences in the metadata on the target server before
&#x9;&#x9;a deployment is performed.  The idea is to know what is going to happen before it happens so that the
&#x9;&#x9;developer can prepare ahead of time.
&#x9;There is no output reported if all resources are the same.  The only time that there will be output is 
&#x9;&#x9;when there is a difference in resources.
&#x9;The source server may be any server not just the current server.
&#x9;The target server may be any server.

&#x9;Valid input paths may be published database resources, published web services, shared area resources or user area resources.
&#x9;&#x9;Examples:
&#x9;&#x9;&#x9;Published database area
&#x9;&#x9;&#x9;&#x9;startingResourcePath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resource type
&#x9;&#x9;&#x9;&#x9;------------------------------------------------&#x9;&#x9;&#x9;&#x9;&#x9;-----------------------
&#x9;&#x9;&#x9;&#x9;/services/databases/ASAssets_Test&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DATA_SOURCE
&#x9;&#x9;&#x9;&#x9;/services/databases/ASAssets_Test/NEWCAT&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CONTAINER (folder)
&#x9;&#x9;&#x9;&#x9;/services/databases/ASAssets_Test/View Sales&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LINK

&#x9;&#x9;&#x9;Published web service area
&#x9;&#x9;&#x9;&#x9;startingResourcePath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resource type
&#x9;&#x9;&#x9;&#x9;------------------------------------------------&#x9;&#x9;&#x9;&#x9;&#x9;-----------------------
&#x9;&#x9;&#x9;&#x9;/services/webservices/GrandParent/Parent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CONTAINER (folder)
&#x9;&#x9;&#x9;&#x9;/services/webservices/GrandParent/Parent/CustomerWS&#x9;&#x9;&#x9;&#x9;&#x9;DATA_SOURCE
&#x9;&#x9;&#x9;&#x9;/services/webservices/GrandParent/Parent/CustomerWS/LookupProduct&#x9;LINK

&#x9;&#x9;&#x9;Shared area
&#x9;&#x9;&#x9;&#x9;startingResourcePath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resource type
&#x9;&#x9;&#x9;&#x9;------------------------------------------------&#x9;&#x9;&#x9;&#x9;&#x9;-----------------------
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets_Test&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CONTAINER (folder)
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets_Test/KPImetrics_Implementation/ViewOrder1&#x9;&#x9;&#x9;TABLE

&#x9;&#x9;&#x9;Users area
&#x9;&#x9;&#x9;&#x9;startingResourcePath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resource type
&#x9;&#x9;&#x9;&#x9;------------------------------------------------&#x9;&#x9;&#x9;&#x9;&#x9;-----------------------
&#x9;&#x9;&#x9;&#x9;/users/composite/admin/test00&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CONTAINER (folder)
&#x9;&#x9;&#x9;&#x9;/users/composite/admin/test00/TestSecurity/customers&#x9;&#x9;&#x9;&#x9;TABLE

&#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;&#x9;startingResourcePath&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- [MANDATORY] The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;statusFilterList&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9; &#x9;-- [OPTIONAL] If null, then display all STATUS, otherwise display the status that are listed separated by spaces or commas.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--   Status List:  EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       EQUAL &#x9;&#x9;&#x9;&#x9;= The two resources are exactly the same (equivalent).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       DIFFERENT &#x9;&#x9;&#x9;= The two resources are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_NOT_EXIST&#x9;= The target resource does not exist for the same path as the source resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       BOTH_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on both DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       SOURCE_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the source DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the target DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       UNKNOWN&#x9;&#x9;&#x9;= The status could not be determined
&#x9;&#x9;sendEmail&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;&#x9;emailList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- [OPTIONAL] A comma-separated list of valid emails
&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;&#x9;publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;&#x9;assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;&#x9;assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;Output:
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;&#x9;linkType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;&#x9;metadataPath&#x9;&#x9;VARCHAR(4096),&#x9;-- The path to the metadata resource.
&#x9;&#x9;&#x9;metadataType&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the metadata resource.
&#x9;&#x9;&#x9;metadataSubtype&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the metadata resource.
&#x9;&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;sourceNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;&#x9;targetNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;&#x9;sourceScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;&#x9;targetScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;&#x9;)

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2020.200&#x9;05/19/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added explicit paths to override environment.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE compareServerMetadata(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;IN startingResourcePath&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- [MANDATORY] The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;IN statusFilterList&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9; &#x9;&#x9;-- [OPTIONAL] If null, then display all STATUS, otherwise display the status that are listed separated by spaces or commas.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--   Status List:  EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       EQUAL &#x9;&#x9;&#x9;&#x9;= The two resources are exactly the same (equivalent).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       DIFFERENT &#x9;&#x9;&#x9;= The two resources are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_NOT_EXIST&#x9;= The target resource does not exist for the same path as the source resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       BOTH_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on both DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       SOURCE_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the source DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the target DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       UNKNOWN&#x9;&#x9;&#x9;= The status could not be determined
&#x9;IN sendEmail&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;IN emailList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- [OPTIONAL] A comma-separated list of valid emails
&#x9;IN sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;IN targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;IN publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;IN assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;IN assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;linkType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;metadataPath&#x9;&#x9;VARCHAR(4096),&#x9;-- The path to the metadata resource
&#x9;&#x9;metadataType&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the metadata resource
&#x9;&#x9;metadataSubtype&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the metadata resource
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;sourceNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;targetNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;sourceScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;targetScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;compareServerMetadata&apos;;
&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  
&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;--   Modify this path depending on where the table is located.
&#x9;DECLARE publishedDatabasePathMod&#x9;VARCHAR(4096) DEFAULT NVL(publishedDatabasePath, &apos;/shared/CoE/DVPublishedSources/PublishedDatabaseList&apos;); 
&#x9;DECLARE assetsSchemaPathSourceMod&#x9;VARCHAR(4096);&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE assetsSchemaPathTargetMod&#x9;VARCHAR(4096);&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE DEBUG_PRINT_SIZE&#x9;&#x9;&#x9;INTEGER DEFAULT 63000;
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT startingResourcePath;
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE errorMessage&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sourceServerDisplayName&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetServerDisplayName&#x9;&#x9;VARCHAR;
&#x9;DECLARE sourceVersion&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetVersion&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE impactedResourceList&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE tableException&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE email&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE displayName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE emailFormat&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;TEXT_PLAIN&apos;;
&#x9;DECLARE subject&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(1000);&#x9;-- The email subject line
&#x9;DECLARE body&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&#x9;-- The body of the email
&#x9;DECLARE pos1, pos2&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE qualifier&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnNameType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE cursServerAttributes&#x9;&#x9;CURSOR(serverDisplayName VARCHAR);
&#x9;DECLARE cursBasicResource&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR);
&#x9;DECLARE cursBasicResourceTable&#x9;&#x9;CURSOR(columnName VARCHAR, columnType VARCHAR);
&#x9;DECLARE cursRecursive&#x9;&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR, subtype VARCHAR, resName VARCHAR);
&#x9;DECLARE cursLineage&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR, subtype VARCHAR, resName VARCHAR);
&#x9;DECLARE cursPublishedDatabaseList&#x9;CURSOR(databasePath VARCHAR(4000));
&#x9;DECLARE cursUsedResource&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR);
&#x9;DECLARE TYPE recType&#x9;&#x9;&#x9;&#x9;ROW (
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;linkType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;metadataPath&#x9;&#x9;VARCHAR(4096),&#x9;-- The path to the metadata resource
&#x9;&#x9;metadataType&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the metadata resource
&#x9;&#x9;metadataSubtype&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the metadata resource
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;sourceNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;targetNumChars&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;sourceScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;targetScript&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;);
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recType;

&#x9;---------------------------------
&#x9;-- Validate input parameters
&#x9;---------------------------------
&#x9;IF (startingResourcePath IS NULL OR LENGTH(TRIM(startingResourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;startingResourcePath&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathSource IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathSource)) &gt; 0 AND sourceEnvName IS NULL OR LENGTH(TRIM(sourceEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;sourceEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathTarget IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathTarget)) &gt; 0 AND targetEnvName IS NULL OR LENGTH(TRIM(targetEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;targetEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (sourceEnvName IS NOT NULL AND targetEnvName IS NOT NULL AND sourceEnvName = targetEnvName) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;sourceEnvName&quot;=[&apos;||sourceEnvName||&apos;] must be different than the &quot;targetEnvName&quot;=[&apos;||targetEnvName||&apos;]&apos;;
&#x9;END IF;
&#x9;IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos; AND emailList IS NULL OR LENGTH(TRIM(emailList)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input variable &quot;emailList&quot; may not be null or emtpy when sendEmail=Y&apos;;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(publishedDatabasePathMod, &apos;TABLE&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The path does not exist at path=&apos;||NVL(publishedDatabasePathMod,&apos;null&apos;);
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Source environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathSource IS NULL OR LENGTH(TRIM(assetsSchemaPathSource)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||sourceEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathSourceMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathSourceMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The source path does not exist at path=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathSourceMod, null, assetsSchemaPathSourceMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathSourceMod=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Target environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathTarget IS NULL OR LENGTH(TRIM(assetsSchemaPathTarget)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||targetEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathTargetMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathTargetMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The target path does not exist at path=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathTargetMod, null, assetsSchemaPathTargetMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathTargetMod=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Get the source server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathSourceMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursServerAttributes FOR sqlStatement;
&#x9;FETCH cursServerAttributes INTO sourceVersion;
&#x9;CLOSE cursServerAttributes;

&#x9;---------------------------------
&#x9;-- Get the target server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathTargetMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursServerAttributes FOR sqlStatement;
&#x9;FETCH cursServerAttributes INTO targetVersion;
&#x9;CLOSE cursServerAttributes;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceVersion=&apos;||NVL(sourceVersion,&apos;null&apos;)||&apos;  targetVersion=&apos;||NVL(targetVersion,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Get the source server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathSourceMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/displayName&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursServerAttributes FOR sqlStatement;
&#x9;FETCH cursServerAttributes INTO sourceServerDisplayName;
&#x9;CLOSE cursServerAttributes;

&#x9;---------------------------------
&#x9;-- Get the target server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathTargetMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/displayName&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursServerAttributes FOR sqlStatement;
&#x9;FETCH cursServerAttributes INTO targetServerDisplayName;
&#x9;CLOSE cursServerAttributes;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceVersion=&apos;||NVL(sourceVersion,&apos;null&apos;)||&apos;  targetVersion=&apos;||NVL(targetVersion,&apos;null&apos;));
&#x9;END IF;

&#x9;-- Concat the version at the end of the server display
&#x9;SET pos1 = INSTR(sourceServerDisplayName, &apos;-&apos;, -1, 1);
&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;SET sourceServerDisplayName = SUBSTRING(sourceServerDisplayName, 1, pos1);
&#x9;END IF;
&#x9;SET sourceServerDisplayName = sourceServerDisplayName || &apos;[&apos;||sourceVersion||&apos;]&apos;;

&#x9;-- Concat the version at the end of the server display
&#x9;SET pos1 = INSTR(targetServerDisplayName, &apos;-&apos;, -1, 1);
&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;SET targetServerDisplayName = SUBSTRING(targetServerDisplayName, 1, pos1);
&#x9;END IF;
&#x9;SET targetServerDisplayName = targetServerDisplayName || &apos;[&apos;||targetVersion||&apos;]&apos;;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceServerDisplayName=&apos;||NVL(sourceServerDisplayName,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : targetServerDisplayName=&apos;||NVL(targetServerDisplayName,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Get the resource type
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT &quot;path&quot;, &quot;type&quot; FROM &apos;||assetsSchemaPathSourceMod||&apos;/getBasicResourceCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(resourcePath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, null) ORDER BY &quot;type&quot;&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursBasicResource FOR sqlStatement;
&#x9;getType:
&#x9;FOR r AS cursBasicResource DO
&#x9;&#x9;IF (r.resType = &apos;DATA_SOURCE&apos; OR r.resType = &apos;CONTAINER&apos;) THEN
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF (r.resType = &apos;LINK&apos; AND INSTR(resourcePath, &apos;/services/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF ((r.resType = &apos;TABLE&apos; OR r.resType = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/shared/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF ((r.resType = &apos;TABLE&apos; OR r.resType = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/users/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF ((r.resType = &apos;TABLE&apos; OR r.resType = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/services/databases/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET message = moduleName||&apos; : SOURCE: Starting resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
&#x9;&#x9;CALL PRINT(message);
&#x9;END IF;

&#x9;IF (resourceType IN (&apos;LINK&apos;, &apos;TABLE&apos;, &apos;PROCEDURE&apos;)) THEN
&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;R&apos;, resourceName, resourcePath);
&#x9;&#x9;-- Get the resource type
&#x9;&#x9;SET sqlStatement = &apos;SELECT &quot;path&quot;, &quot;type&quot; FROM &apos;||assetsSchemaPathSourceMod||&apos;/getBasicResourceCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(resourcePath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, null)&apos;;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;END IF;
&#x9;&#x9;OPEN cursBasicResource FOR sqlStatement;
&#x9;&#x9;FOR r AS cursBasicResource DO
&#x9;&#x9;&#x9;SET resourceType = r.resType;
&#x9;&#x9;END FOR;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;SET message = moduleName||&apos; : SOURCE: resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;   resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;   resourceName=&apos;||NVL(resourceName,&apos;null&apos;);  
&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (resourceType &lt;&gt; &apos;CONTAINER&apos; AND resourceType &lt;&gt; &apos;DATA_SOURCE&apos;) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The starting source path must be a CONTAINER/FOLDER or DATA_SOURCE.&apos;;
&#x9;END IF;


&#x9;---------------------------------
&#x9;-- Logic to analyze folders
&#x9;---------------------------------
&#x9;IF ((INSTR(resourcePath, &apos;/services/webservices&apos;) = 1 AND INSTR(resourcePath, &apos;/services/webservices/system&apos;) = 0) OR
&#x9;&#x9;(INSTR(resourcePath, &apos;/services/databases&apos;) = 1 AND INSTR(resourcePath, &apos;/services/databases/system&apos;) = 0) OR 
&#x9;&#x9;INSTR(resourcePath, &apos;/shared/&apos;) = 1 OR 
&#x9;&#x9;INSTR(resourcePath, &apos;/users/&apos;) = 1) 
&#x9;THEN
&#x9;&#x9;-- Default query to search for resources
&#x9;&#x9;SET sqlStatement = &apos;SELECT resPath, resType, subtype, name FROM &apos;||assetsSchemaPathSourceMod||&apos;/getResourceListRecursive&apos;||&apos;(&apos;&apos;&apos;||REPLACE(resourcePath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||resourceType||&apos;&apos;&apos;) &apos;;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;IF (INSTR(resourcePath, &apos;/services/webservices&apos;) = 1) THEN
&#x9;&#x9;&#x9;SET qualifier  = &apos;PUBLISHED_WS&apos;;
&#x9;&#x9;&#x9;SET sqlStatement = sqlStatement || &apos;WHERE resType = &apos;&apos;LINK&apos;&apos; AND resPath NOT LIKE &apos;&apos;/services/webservices/system%&apos;&apos;&apos;;
&#x9;&#x9;ELSEIF (INSTR(resourcePath, &apos;/services/databases&apos;) = 1) THEN
&#x9;&#x9;&#x9;SET qualifier  = &apos;PUBLISHED_DS&apos;;
&#x9;&#x9;&#x9;SET sqlStatement = sqlStatement || &apos;WHERE resType = &apos;&apos;LINK&apos;&apos; AND resPath NOT LIKE &apos;&apos;/services/databases/system%&apos;&apos;&apos;;
&#x9;&#x9;ELSEIF (INSTR(resourcePath, &apos;/shared/&apos;) = 1) THEN
&#x9;&#x9;&#x9;SET qualifier  = &apos;SHARED&apos;;
&#x9;&#x9;&#x9;SET sqlStatement = sqlStatement || &apos;WHERE resType &lt;&gt; &apos;&apos;CONTAINER&apos;&apos;&apos;;
&#x9;&#x9;ELSEIF (INSTR(resourcePath, &apos;/users/&apos;) = 1) THEN
&#x9;&#x9;&#x9;SET qualifier  = &apos;USERS&apos;;
&#x9;&#x9;&#x9;SET sqlStatement = sqlStatement || &apos;WHERE resType &lt;&gt; &apos;&apos;CONTAINER&apos;&apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : EXECUTE &apos;||qualifier||&apos; sqlStatement=&apos;||sqlStatement);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Iterate over the resource container list
&#x9;&#x9;OPEN cursRecursive FOR sqlStatement;
&#x9;&#x9;FOR r AS cursRecursive DO
&#x9;&#x9;&#x9;SET resourcePath = r.resPath;
&#x9;&#x9;&#x9;SET resourceType = r.resType;

&#x9;&#x9;&#x9;IF (resourceName IS NULL OR (resourceName IS NOT NULL AND resourceName = r.resName)) THEN
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : ANALYZE &apos;||qualifier||&apos; resourcePath=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Initialize loop variables
&#x9;&#x9;&#x9;&#x9;SET rec = null;
&#x9;&#x9;&#x9;&#x9;SET rec.resName = r.resName;
&#x9;&#x9;&#x9;&#x9;SET rec.resPath = r.resPath;
&#x9;&#x9;&#x9;&#x9;SET rec.resType = r.resType;
&#x9;&#x9;&#x9;&#x9;SET rec.subtype = r.subtype;
&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;PROCESSING&apos;;
&#x9;&#x9;&#x9;&#x9;IF (rec.resType = &apos;LINK&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the used link type
&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT resourcePath, resourceType FROM &apos;||assetsSchemaPathSourceMod||&apos;/getUsedResourcesDirectCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(rec.resPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursUsedResource FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;FOR u AS cursUsedResource DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.linkType = u.resType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: used resType=&apos;||NVL(u.resType,&apos;null&apos;)||&apos;  used resPath=&apos;||NVL(u.resPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Get the source lineage
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT DISTINCT resPath, resType, subtype, resName FROM &apos;||assetsSchemaPathSourceMod||&apos;/getResourceLineageDirectRecursive(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inSeqNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inParentID&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inResourceDepth&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inLineageResourceIdList&#x9;LONGVARCHAR,&#x9;-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;||REPLACE(rec.resPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &#x9;--IN resourcePath &#x9;&#x9;&#x9;&#x9;VARCHAR(4096),  -- actual resource path and not a folder path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;,&#x9;--IN resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The resource type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- comma separate list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,&#x9;&#x9;&#x9;--IN datasourceAncestor&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- flag to get the data source ancestory (1=yes, 0=no)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1&#x9;&#x9;&#x9;--IN inIgnoreResourceDoesNotExist INTEGER, &#x9;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;&#x9;&#x9;WHERE resType = &apos;&apos;TABLE&apos;&apos; 
&#x9;&#x9;&#x9;&#x9;&#x9;  AND subType IN (&apos;&apos;DATABASE_TABLE&apos;&apos;,&apos;&apos;EXCEL_NON_ODBC_POI&apos;&apos;,&apos;&apos;DELIMITED_FILE_TABLE&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;OPEN cursLineage FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;FOR l AS cursLineage DO
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : ANALYZE &apos;||qualifier||&apos; DATABASE_TABLE resourcePath=&apos;||l.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize for this loop
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;PROCESSING&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.metadataPath = l.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.metadataType = l.resType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.metadataSubtype = l.subtype;
&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = false;

&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Produce a pipe delimited string of column name:column type pairs
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Get the column list from the source server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathSourceMod || &apos;/getBasicResourceCursor_SQL_TABLE(&apos;&apos;&apos;||REPLACE(l.resPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||l.resType||&apos;&apos;&apos;) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR b AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = rec.sourceScript || b.columnName||&apos;:&apos;||b.columnType||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;SOURCE TABLE DOES NOT EXIST: &apos;||l.resPath||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;SOURCE UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: rec.status=&apos;||NVL(rec.status,&apos;null&apos;)||&apos;  rec.message=&apos;||NVL(rec.message,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT tableException) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- TARGET: Produce a pipe delimited string of column name:column type pairs
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- TARGET: Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathTargetMod || &apos;/getBasicResourceCursor_SQL_TABLE(&apos;&apos;&apos;||REPLACE(l.resPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||l.resType||&apos;&apos;&apos;) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR b AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = rec.targetScript || b.columnName||&apos;:&apos;||b.columnType||&apos;|&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.sourceScript, &apos;|&apos;||b.columnName||&apos;:&apos;||b.columnType||&apos;|&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;DIFFERENT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(rec.sourceScript, &apos;|&apos;||b.columnName||&apos;:&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;COLUMN_NOT_EXIST: SOURCE=&apos;||b.columnName||&apos;:&apos;||b.columnType||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Given the column name was found in &quot;|col1:type|&quot;, get the ending position of &quot;|&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(rec.sourceScript, &apos;|&apos;, pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the target server column name and type to show as a comparison.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnNameType = SUBSTRING(rec.sourceScript, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;COLUMN_TYPE_MISMATCH: TARGET=&apos;||b.columnName||&apos;:&apos;||b.columnType||&apos;  &apos;||&apos;SOURCE=&apos;||columnNameType||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;TARGET_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;TARGET TABLE DOES NOT EXIST: &apos;||l.resPath||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;TARGET_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = rec.message || &apos;TARGET UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: rec.status=&apos;||NVL(rec.status,&apos;null&apos;)||&apos;  rec.message=&apos;||NVL(rec.message,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine the status
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NULL AND rec.targetScript IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;BOTH_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NOT NULL AND rec.targetScript IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;TARGET_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NULL AND rec.targetScript IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript = rec.targetScript) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript &lt;&gt; rec.targetScript) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;DIFFERENT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine length of script
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.sourceScript IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceNumChars = LENGTH(rec.sourceScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceNumChars = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.targetScript IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetNumChars = LENGTH(rec.targetScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetNumChars = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : ANALYZE &apos;||qualifier||&apos; STAUTS=&apos;||NVL(rec.status,&apos;null&apos;)||&apos;  MESSAGE=&apos;||NVL(rec.message,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.message IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||CHR(10)||&apos;  message=&apos;||rec.message||CHR(10)||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert into the pipe
&#x9;&#x9;&#x9;&#x9;&#x9;IF (statusFilterList IS NULL OR LENGTH(TRIM(statusFilterList)) = 0 OR INSTR(UPPER(statusFilterList), rec.status) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(rec);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;
&#x9;ELSE
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;SET message = moduleName||&apos; : The resource is not valid for applying rules.  resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Send Email
&#x9;---------------------------------
&#x9;-- Send the email of the entire impacted list if there is anything in the list and sendEmail=&apos;Y&apos;
&#x9;IF (LENGTH(TRIM(impactedResourceList)) &gt; 0) THEN
&#x9;&#x9;SET displayName = &apos;IT&apos;;
&#x9;&#x9;SET email = emailList;
&#x9;&#x9;IF (email IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET subject = &apos;DV VALIDATION EXCEPTION: Comnpare Metadata&apos;||&apos;   Source Server=&apos;||sourceServerDisplayName||&apos;  Target Server=&apos;||targetServerDisplayName;
&#x9;&#x9;&#x9;SET body = &apos;To: &apos;|| displayName || CHR(10) || CHR(10);
&#x9;&#x9;&#x9;SET body = body  || subject || CHR(10) || CHR(10);
&#x9;&#x9;&#x9;SET body = body  || &apos;The following resources have been flagged due to differences between source and target:&apos;|| CHR(10)||CHR(10);
&#x9;&#x9;&#x9;SET body = body  || impactedResourceList || CHR(10);
&#x9;&#x9;&#x9;-- Print out email debug
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET message = moduleName||&apos; : Send Email:&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  email=&apos;||NVL(email,&apos;null recipient list&apos;)||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  subject=&apos;||NVL(subject,&apos;null subject&apos;)||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  body=&apos;||NVL(body,&apos;null message body&apos;);
&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(message,1,DEBUG_PRINT_SIZE));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Send the email
&#x9;&#x9;&#x9;IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail(null, null, email, null, null, subject, emailFormat, NVL(body,&apos;null message body&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1554936424229</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1591618462725</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">12/619</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/522</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/459</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/299</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/310</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/335</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/541</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/474</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/587</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/291</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/447</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/660</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/460</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/448</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/272</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/393</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/428</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/409</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/401</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/316</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/359</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/341</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/620</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/659</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/369</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/324</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/505</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/554</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/636</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/361</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/360</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/480</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1554936424229</attribute>
</metadata>