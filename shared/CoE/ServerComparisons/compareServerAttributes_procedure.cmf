<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="compareServerAttributes" path="/shared/CoE/ServerComparisons/compareServerAttributes" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingAttribute" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="displayComparisonType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourceEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="targetEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="publishedDatabasePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathSource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathTarget" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="attrName">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="attrType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="displayName">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceEnvName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceUpdateRule">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceMinValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceMaxValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceUnitName">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceDefaultValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceAttrValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceListEntryType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceListEntryValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourcemMapKeyType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceMapKeyValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceMapValueType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceMapValueValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceArrayItem">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceVisible">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="sourceLocallyDefined">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="sourcePattern">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="sourceAnnotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetEnvName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="targetUpdateRule">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetMinValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetMaxValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetUnitName">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetDefaultValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetAttrValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetListEntryType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetListEntryValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetmMapKeyType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetMapKeyValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetMapValueType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetMapValueValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetArrayItem">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetVisible">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="targetLocallyDefined">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="targetPattern">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="targetAnnotation">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    compareServerAttributes:

&#x9;This procedure compares the server attributes between 2 different DV servers.
&#x9;The source server may be any server not just the current server.
&#x9;The target server may be any server.
&#x9;It is required to provide a default path for the internal variable &quot;publishedDatabasePathMod&quot;.

    Server values may be single scalar, a list, a map, or an array.

&#x9;Requirements:
    &#x9;Users calling this procedure must have the ACCESS_TOOLS right and, depending on whether
    &#x9;&#x9;the attribute is public or not, may need the READ_ALL_CONFIG right as well.
&#x9;&#x9;The target server must also publish the following resources 
&#x9;&#x9;&#x9;which is typically provided out-of-the-box as /services/databases/ASAssets/Utilities/repository
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/server/getServerAttribute
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/server/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/getServerAttributeDefs
&#x9;&#x9;The server invoking this procedure must provide a Composite Datasource which introspects the 
&#x9;&#x9;&#x9;above published resources.  The path to the schema of that datasource is provided as a parameter &quot;assetsSchemaPath&quot;.

&#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;&#x9;startingAttribute&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [MANDATORY] The starting attribute location.  Values: Any path to an attribute.  root=/server
&#x9;&#x9;&#x9;Values: Any path to an attribute
&#x9;&#x9;&#x9;&#x9;root=&#x9;&#x9;&#x9;/
&#x9;&#x9;&#x9;&#x9;cms=&#x9;&#x9;&#x9;/cms
&#x9;&#x9;&#x9;&#x9;diagnostic=&#x9;&#x9;/diagnostic
&#x9;&#x9;&#x9;&#x9;discovery=&#x9;&#x9;/discovery
&#x9;&#x9;&#x9;&#x9;monitor=&#x9;&#x9;/monitor
&#x9;&#x9;&#x9;&#x9;server=&#x9;&#x9;&#x9;/server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/api
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/communications
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/config&#x9;&#x9;&#x9;- server configuration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/event
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/jdbc&#x9;&#x9;&#x9;- jdbc settings
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/memory&#x9;&#x9;&#x9;- server memory configuration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/processing
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/sql
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/webservices
&#x9;&#x9;&#x9;&#x9;sources=&#x9;&#x9;/sources
&#x9;&#x9;&#x9;&#x9;studio=&#x9;&#x9;&#x9;/studio
&#x9;&#x9;displayComparisonType&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [MANDATORY] The comparison type parameter:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [A] ALL display all comparisons.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [S] SAME - display comparisons that are the same.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [D] DIFFERENT - display comparisons that are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [NS] NOT_EXIST_SOURCE - display attributes that don&apos;t exist on the source.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [NT] NOT_EXIST_TARGET - display attributes that don&apos;t exist on the target.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [N] NOT_EXIST - display attributes that don&apos;t exist for both the source and target.
&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;&#x9;publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;&#x9;assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2020Q200
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;&#x9;assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2020Q200
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;Output:
&#x9;&#x9;result PIPE (
&#x9;&#x9;&#x9;&#x9;-- Definition
&#x9;&#x9;&#x9;&#x9;attrName &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute name
&#x9;&#x9;&#x9;&#x9;attrType &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the value type. if not LIST, MAP, or ARRAY, then the scalar value&apos;s type
&#x9;&#x9;&#x9;&#x9;displayName&#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s name as displayed in the Studio Configuration panel
&#x9;&#x9;&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The status of the row where the source server is compared with the target server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;SAME - the row values are the same.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;DIFFERENT - the row values are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_SOURCE - the attribute name does not exist on the source server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_TARGET - the attribute name does not exist on the target server
&#x9;&#x9;&#x9;&#x9;-- Source attributes
&#x9;&#x9;&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;&#x9;&#x9;sourceUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;&#x9;&#x9;sourceMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;&#x9;&#x9;sourceMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;&#x9;&#x9;sourceUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;&#x9;&#x9;sourceDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
&#x9;&#x9;&#x9;&#x9;sourceAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
&#x9;&#x9;&#x9;&#x9;sourceListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
&#x9;&#x9;&#x9;&#x9;sourceListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
&#x9;&#x9;&#x9;&#x9;sourcemMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
&#x9;&#x9;&#x9;&#x9;sourceMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
&#x9;&#x9;&#x9;&#x9;sourceMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
&#x9;&#x9;&#x9;&#x9;sourceMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
&#x9;&#x9;&#x9;&#x9;sourceArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;&#x9;&#x9;sourceVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;&#x9;&#x9;sourceLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;&#x9;&#x9;sourcePattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;&#x9;&#x9;sourceAnnotation &#x9;&#x9;VARCHAR(32768),&#x9;-- a description of the attribute
&#x9;&#x9;&#x9;&#x9;-- Target Attributes
&#x9;&#x9;&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;&#x9;&#x9;targetUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;&#x9;&#x9;targetMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;&#x9;&#x9;targetMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;&#x9;&#x9;targetUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;&#x9;&#x9;targetDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
&#x9;&#x9;&#x9;&#x9;targetAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
&#x9;&#x9;&#x9;&#x9;targetListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
&#x9;&#x9;&#x9;&#x9;targetListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
&#x9;&#x9;&#x9;&#x9;targetmMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
&#x9;&#x9;&#x9;&#x9;targetMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
&#x9;&#x9;&#x9;&#x9;targetMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
&#x9;&#x9;&#x9;&#x9;targetMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
&#x9;&#x9;&#x9;&#x9;targetArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;&#x9;&#x9;targetVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;&#x9;&#x9;targetLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;&#x9;&#x9;targetPattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;&#x9;&#x9;targetAnnotation &#x9;&#x9;VARCHAR(32768)&#x9;-- a description of the attribute
&#x9;&#x9;&#x9;);


&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.400&#x9;09/05/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new.
&#x9;2020.101&#x9;01/22/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed bug.  Changed &quot;envName&quot; to &quot;environment&quot; in the select statement.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Validation check: The sourceEnvName must be different than targetEnvName.
&#x9;2020.200&#x9;05/19/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created a single procedure from compareServerAttributesImpl.  Added explicit paths to override environment.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE compareServerAttributes(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;IN startingAttribute&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [MANDATORY] The starting attribute location.  Values: Any path to an attribute.  root=/server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Values: Any path to an attribute
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     root=&#x9;&#x9;/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     cms=&#x9;&#x9;&#x9;/cms
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     diagnostic=&#x9;/diagnostic
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     discovery=&#x9;/discovery
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     monitor=&#x9;&#x9;/monitor
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     server=&#x9;&#x9;&#x9;/server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/api
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/communications
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/config&#x9;&#x9;&#x9;- server configuration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/event
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/jdbc&#x9;&#x9;&#x9;- jdbc settings
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/memory&#x9;&#x9;&#x9;- server memory configuration
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/processing
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/sql
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     &#x9;&#x9;&#x9;&#x9;&#x9;/webservices
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     sources=&#x9;&#x9;/sources
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--     studio=&#x9;&#x9;/studio
&#x9;IN displayComparisonType&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [MANDATORY] The comparison type parameter:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [A] ALL display all comparisons, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [S] SAME - display comparisons that are the same, 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [D] DIFFERENT - display comparisons that are different
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [NS] NOT_EXIST_SOURCE - display attributes that don&apos;t exist on the source.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [NT] NOT_EXIST_TARGET - display attributes that don&apos;t exist on the target.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   [N] NOT_EXIST - display attributes that don&apos;t exist for both the source and target.
&#x9;IN sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;IN targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;IN publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;IN assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;IN assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
    OUT result &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;-- Definition
        attrName &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute name
        attrType &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the value type. if not LIST, MAP, or ARRAY, then the scalar value&apos;s type
&#x9;&#x9;displayName&#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s name as displayed in the Studio Configuration panel
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The status of the row where the source server is compared with the target server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;SAME - the row values are the same.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;DIFFERENT - the row values are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_SOURCE - the attribute name does not exist on the source server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_TARGET - the attribute name does not exist on the target server
&#x9;&#x9;-- Source attributes
&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;sourceUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;sourceMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;sourceMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;sourceUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;sourceDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
        sourceAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
        sourceListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
        sourceListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
        sourcemMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
        sourceMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        sourceMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        sourceMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
        sourceArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;sourceVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;sourceLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;sourcePattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;sourceAnnotation &#x9;&#x9;VARCHAR(32768),&#x9;-- a description of the attribute
&#x9;&#x9;-- Target Attributes
&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;targetUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;targetMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;targetMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;targetUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;targetDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
        targetAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
        targetListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
        targetListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
        targetmMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
        targetMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        targetMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        targetMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
        targetArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;targetVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;targetLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;targetPattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;targetAnnotation &#x9;&#x9;VARCHAR(32768)&#x9;-- a description of the attribute
&#x9;)&#x9;
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;compareServerAttributes&apos;;
&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  
&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;--   Modify this path depending on where the table is located.
&#x9;DECLARE publishedDatabasePathMod&#x9;&#x9;VARCHAR(4096) DEFAULT NVL(publishedDatabasePath, &apos;/shared/CoE/DVPublishedSources/PublishedDatabaseList&apos;); 
&#x9;DECLARE assetsSchemaPathSourceMod&#x9;&#x9;VARCHAR(4096);&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE assetsSchemaPathTargetMod&#x9;&#x9;VARCHAR(4096);&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE displayComparisonType_&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE currAttrName, prevAttrName&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE currEnvName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sourceNum, targetNum&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos1, pos2, len&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE list, listTmp, line&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE attributeValue&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sourceVersion&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetVersion&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE cursVersion&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR(version VARCHAR);
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE cursPublishedDatabaseList&#x9;&#x9;CURSOR(databasePath VARCHAR(4000));
&#x9;DECLARE cursUnion&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CURSOR( 
&#x9;&#x9;envName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
        attrName &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute name
        attrType &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the value type. if not LIST, MAP, or ARRAY, then the scalar value&apos;s type
        attrValue &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
        listEntryType &#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
        listEntryValue &#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
        mapKeyType &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
        mapKeyValue &#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        mapValueType &#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        mapValueValue &#x9;&#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
        arrayItem &#x9;&#x9;&#x9;&#x9;VARCHAR(32768)  -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;);
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE TYPE rowType&#x9;&#x9;&#x9;&#x9;&#x9;ROW (
&#x9;&#x9;-- Definition
        attrName &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute name
        attrType &#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the value type. if not LIST, MAP, or ARRAY, then the scalar value&apos;s type
&#x9;&#x9;displayName&#x9;&#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s name as displayed in the Studio Configuration panel
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- SAME, DIFFERENT, NEW
&#x9;&#x9;-- Source attribures
&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;sourceUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;sourceMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;sourceMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;sourceUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;sourceDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
        sourceAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
        sourceListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
        sourceListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
        sourcemMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
        sourceMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        sourceMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        sourceMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
        sourceArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;sourceVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;sourceLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;sourcePattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;sourceAnnotation &#x9;&#x9;VARCHAR(32768),&#x9;-- a description of the attribute
&#x9;&#x9;-- Target Attributes
&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- the environment name
&#x9;&#x9;targetUpdateRule&#x9;&#x9;VARCHAR(32768), -- indicates whether the field is updatable or not
&#x9;&#x9;targetMinValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the minimum allowed value (NULL if there is none)
&#x9;&#x9;targetMaxValue &#x9;&#x9;&#x9;VARCHAR(32768), -- the maximum allowed value (NULL if there is none)
&#x9;&#x9;targetUnitName &#x9;&#x9;&#x9;VARCHAR(32768), -- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;targetDefaultValue&#x9;&#x9;VARCHAR(32768), -- indicates the default value (NULL if there is none.)
        targetAttrValue &#x9;&#x9;VARCHAR(32768), -- the scalar value (NULL if the value type is LIST, MAP, or ARRAY)
        targetListEntryType &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s type
        targetListEntryValue &#x9;VARCHAR(32768), -- if the attribute value is a list, this is the list entry&apos;s value
        targetmMapKeyType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s key type
        targetMapKeyValue &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        targetMapValueType &#x9;&#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value type
        targetMapValueValue &#x9;VARCHAR(32768), -- if the attribute value is a map, this is the map entry&apos;s value value
        targetArrayItem &#x9;&#x9;VARCHAR(32768), -- if the attribute value is an array, this is the array entry&apos;s value
&#x9;&#x9;targetVisible &#x9;&#x9;&#x9;BIT, &#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;targetLocallyDefined&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
&#x9;&#x9;targetPattern &#x9;&#x9;&#x9;VARCHAR(32768), -- a regular expression pattern that is used to test for valid values
&#x9;&#x9;targetAnnotation &#x9;&#x9;VARCHAR(32768)&#x9;-- a description of the attribute
&#x9;);
&#x9;DECLARE rec1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rowType;
&#x9;DECLARE rec2&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rowType;
&#x9;DECLARE cursRemoteAttrDefs&#x9;&#x9;&#x9;&#x9;CURSOR(
&#x9;&#x9;updateRule &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- indicates whether the field is updatable or not
&#x9;&#x9;annotation &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- a description of the attribute
&#x9;&#x9;defaultValue &#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- indicates the default value (NULL if there is none.)
&#x9;&#x9;pattern &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- a regular expression pattern that is used to test for valid values
&#x9;&#x9;minValue &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- the minimum allowed value (NULL if there is none)
&#x9;&#x9;maxValue &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- the maximum allowed value (NULL if there is none)
&#x9;&#x9;displayName &#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- the attribute&apos;s name as displayed in the Studio Configuration panel
&#x9;&#x9;unitName &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- the attribute&apos;s value&apos;s unit name
&#x9;&#x9;visible &#x9;&#x9;&#x9;&#x9;BIT,&#x9;&#x9;&#x9;-- indicates whether the configuration setting is visible in the Studio Configuration panel
&#x9;&#x9;locallyDefined &#x9;&#x9;&#x9;BIT&#x9;&#x9;&#x9;&#x9;-- indicates whether this attribute is locally defined or not
   );

&#x9;---------------------------------
&#x9;-- Validate input parameters
&#x9;---------------------------------
&#x9;IF (startingAttribute IS NULL OR LENGTH(TRIM(startingAttribute)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;startingAttribute&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathSource IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathSource)) &gt; 0 AND sourceEnvName IS NULL OR LENGTH(TRIM(sourceEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;sourceEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathTarget IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathTarget)) &gt; 0 AND targetEnvName IS NULL OR LENGTH(TRIM(targetEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;targetEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (sourceEnvName IS NOT NULL AND targetEnvName IS NOT NULL AND sourceEnvName = targetEnvName) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;sourceEnvName&quot;=[&apos;||sourceEnvName||&apos;] must be different than the &quot;targetEnvName&quot;=[&apos;||targetEnvName||&apos;]&apos;;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(publishedDatabasePathMod, &apos;TABLE&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The path does not exist at path=&apos;||NVL(publishedDatabasePathMod,&apos;null&apos;);
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Source environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathSource IS NULL OR LENGTH(TRIM(assetsSchemaPathSource)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||sourceEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathSourceMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathSourceMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The source path does not exist at path=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathSourceMod, null, assetsSchemaPathSourceMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathSourceMod=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Target environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathTarget IS NULL OR LENGTH(TRIM(assetsSchemaPathTarget)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||targetEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathTargetMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathTargetMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The target path does not exist at path=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathTargetMod, null, assetsSchemaPathTargetMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathTargetMod=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Validate displayComparisonType:
&#x9;---------------------------------
&#x9;--&#x9;&#x9;[A] ALL - (default) display all comparisons.
&#x9;-- &#x9;&#x9;[S] SAME - display comparisons that are the same, 
&#x9;-- &#x9;&#x9;[D] DIFFERENT - display comparisons that are different
&#x9;-- &#x9;&#x9;[NS] NOT_EXIST_SOURCE - display attributes that don&apos;t exist on the source.
&#x9;-- &#x9;&#x9;[NT] NOT_EXIST_TARGET - display attributes that don&apos;t exist on the target.
&#x9;-- &#x9;&#x9;[N] NOT_EXIST - display attributes that don&apos;t exist for both the source and target.
&#x9;IF (displayComparisonType IS NULL OR LENGTH(TRIM(displayComparisonType)) = 0) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;A&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;A&apos; OR UPPER(displayComparisonType) = &apos;ALL&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;A&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;S&apos; OR UPPER(displayComparisonType) = &apos;SAME&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;S&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;D&apos; OR UPPER(displayComparisonType) = &apos;DIFFERENT&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;D&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;NS&apos; OR UPPER(displayComparisonType) = &apos;NOT_EXIST_SOURCE&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;NS&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;NT&apos; OR UPPER(displayComparisonType) = &apos;NOT_EXIST_TARGET&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;NT&apos;;
&#x9;ELSEIF (UPPER(displayComparisonType) = &apos;N&apos; OR UPPER(displayComparisonType) = &apos;NOT_EXIST&apos;) THEN
&#x9;&#x9;SET displayComparisonType_ = &apos;N&apos;;
&#x9;ELSE
&#x9;&#x9;RAISE ex VALUE &apos;The input parameter &quot;displayComparisonType&quot;=[&apos;||NVL(TRIM(displayComparisonType),&apos;null&apos;)||&apos;] contains an incorrect value.  &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;It must be one of [A|ALL|S|SAME|D|DIFFERENT|NS|NOT_EXIST_SOURCE|NT|NOT_EXIST_TARGET|N|NOT_EXIST]&apos;;
&#x9;END IF; 

&#x9;---------------------------------
&#x9;-- Get the source server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathSourceMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursVersion FOR sqlStatement;
&#x9;FETCH cursVersion INTO sourceVersion;
&#x9;CLOSE cursVersion;

&#x9;---------------------------------
&#x9;-- Get the target server version
&#x9;---------------------------------
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||assetsSchemaPathTargetMod || &apos;/getServerAttribute(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;
&#x9;OPEN cursVersion FOR sqlStatement;
&#x9;FETCH cursVersion INTO targetVersion;
&#x9;CLOSE cursVersion;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceVersion=&apos;||NVL(sourceVersion,&apos;null&apos;)||&apos;  targetVersion=&apos;||NVL(targetVersion,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Construct the SQL Statement. 
&#x9;---------------------------------
&#x9;--  Always put the higher DV version first in the EXCEPT statement as it will return different and new attributes
&#x9;IF (sourceVersion &lt;= targetVersion) THEN
&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;-- SELECT TARGET EXCEPT SOURCE
&#x9;&#x9;&#x9;&apos;SELECT DISTINCT * FROM (&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;   environment, attrName, attrType, attrValue, listEntryType, listEntryValue, mapKeyType, mapKeyValue, mapValueType, mapValueValue, arrayItem&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathTargetMod||&apos;/getServerAttributesAll(&apos;&apos;&apos;||targetEnvName||&apos;&apos;&apos;,&apos;&apos;&apos;||startingAttribute||&apos;&apos;&apos;, null, null)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;UNION&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;   environment, attrName, attrType, attrValue, listEntryType, listEntryValue, mapKeyType, mapKeyValue, mapValueType, mapValueValue, arrayItem&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathSourceMod||&apos;/getServerAttributesAll(&apos;&apos;&apos;||sourceEnvName||&apos;&apos;&apos;,&apos;&apos;&apos;||startingAttribute||&apos;&apos;&apos;, null, null)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;UNION&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT null, &apos;&apos;/zzzzz&apos;&apos; attrName, null, null, null, null, null, null, null, null, null FROM /services/databases/system/DUAL&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;) a&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;ORDER BY attrName, attrValue, arrayItem&apos;;
&#x9;ELSE
&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;-- SELECT SOURCE EXCEPT TARGET
&#x9;&#x9;&#x9;&apos;SELECT DISTINCT * FROM (&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;   environment, attrName, attrType, attrValue, listEntryType, listEntryValue, mapKeyType, mapKeyValue, mapValueType, mapValueValue, arrayItem&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathTargetMod||&apos;/getServerAttributesAll(&apos;&apos;&apos;||targetEnvName||&apos;&apos;&apos;,&apos;&apos;&apos;||startingAttribute||&apos;&apos;&apos;, null, null)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;UNION&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;   environment, attrName, attrType, attrValue, listEntryType, listEntryValue, mapKeyType, mapKeyValue, mapValueType, mapValueValue, arrayItem&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathSourceMod||&apos;/getServerAttributesAll(&apos;&apos;&apos;||sourceEnvName||&apos;&apos;&apos;,&apos;&apos;&apos;||startingAttribute||&apos;&apos;&apos;, null, null)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;UNION&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;SELECT null, &apos;&apos;/zzzzz&apos;&apos; attrName, null, null, null, null, null, null, null, null, null FROM /services/databases/system/DUAL&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;) a&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;ORDER BY attrName, attrValue, arrayItem&apos;;

&#x9;END IF;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Fetch the records
&#x9;---------------------------------
&#x9;SET i = 0;
&#x9;SET prevAttrName = &apos;  &apos;;
&#x9;OPEN cursUnion FOR sqlStatement;
&#x9;FOR r AS cursUnion DO
&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;SET currAttrName = r.attrName;
&#x9;&#x9;SET currEnvName&#x9;= r.envName;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; i=&apos;||i||&apos;  currAttrName=&apos;||NVL(currAttrName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  currEnvName=&apos;||NVL(currEnvName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  prevAttrName=&apos;||NVL(prevAttrName,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  attrType=&apos;||NVL(r.attrType,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  attrValue=&apos;||NVL(r.attrValue,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  arrayItem=&apos;||NVL(r.arrayItem,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  listEntryValue=&apos;||NVL(r.listEntryValue,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  mapKeyValue=&apos;||NVL(r.mapKeyValue,&apos;null&apos;)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  mapValueValue=&apos;||NVL(r.mapValueValue,&apos;null&apos;)
&#x9;&#x9;&#x9;&#x9;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- The attribute name path has changed and it is not the first record
&#x9;&#x9;IF (currAttrName &lt;&gt; prevAttrName AND LENGTH(TRIM(prevAttrName)) &gt; 0) THEN
&#x9;&#x9;&#x9;-- Determine the status of the row as compared to the same row from the other server
&#x9;&#x9;&#x9;-- &#x9;&#x9;SAME - the row values are the same.
&#x9;&#x9;&#x9;-- &#x9;&#x9;DIFFERENT - the row values are different.
&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_SOURCE - the attribute name does not exist on the source server
&#x9;&#x9;&#x9;-- &#x9;&#x9;NOT_EXIST_TARGET - the attribute name does not exist on the target server
&#x9;&#x9;&#x9;IF (list IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;FOR l AS SELECT textExpression line FROM /shared/ASAssets/Utilities/string/extractTextList(list, &apos;|ROWBREAK|&apos;, 0,0,0,0,1)
&#x9;&#x9;&#x9;&#x9;&#x9;WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1 = null;
&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceNum = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;SET targetNum = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;SET line = l.line;
&#x9;&#x9;&#x9;&#x9;&#x9;-- FORMAT FOR LIST, MAP, STRING_ARRAY:
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW=null|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW::envName=DEV2::attrName=/path::attrType=STRING::attrValue=some other value|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW::envName=DEV7::attrName=/server/config/security/authentication/IPFiltering/Forbidden::attrType=LIST::attrValue=null|BREAK|TARGET_ROW::envName=DEV8::attrName=/server/config/security/authentication/IPFiltering/Forbidden::attrType=LIST::attrValue=192.1.1.1

&#x9;&#x9;&#x9;&#x9;&#x9;-- There is a SOURCE_ROW.
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(line, &apos;SOURCE_ROW::&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceNum = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(line, &apos;TARGET_ROW&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET listTmp = SUBSTRING(line, pos1, pos2-pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract envName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::envName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrName&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::envName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceEnvName = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;SOURCE_ROW: sourceEnvName=&apos;||rec1.sourceEnvName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrType&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.attrName = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;SOURCE_ROW: attrName=&apos;||rec1.attrname);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrType=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrValue&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrType=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.attrType = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;SOURCE_ROW: attrType=&apos;||rec1.attrType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrValue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrValue=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;|BREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrValue=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;SOURCE_ROW: attributeValue=&apos;||NVL(attributeValue,&apos;[NULL]&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.attrType = &apos;STRING_ARRAY&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceArrayItem = attributeValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.attrType = &apos;LIST&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue IS NOT NULL AND attributeValue &lt;&gt; &apos;null=null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(attributeValue, &apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryType = SUBSTRING(attributeValue, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryValue = SUBSTRING(attributeValue, pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceListEntryType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceListEntryValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.attrType = &apos;MAP&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue IS NOT NULL AND attributeValue &lt;&gt; &apos;null=null|MAPBREAK|null=null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(attributeValue, &apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(attributeValue, &apos;|MAPBREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;|MAPBREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcemMapKeyType = SUBSTRING(attributeValue, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapKeyValue = SUBSTRING(attributeValue, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourcemMapKeyType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcemMapKeyType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceMapKeyValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapKeyValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos1 = pos2 + len;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(attributeValue, &apos;=&apos;, pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueType = SUBSTRING(attributeValue, pos1, pos2-pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueValue = SUBSTRING(attributeValue, pos2+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceMapValueType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceMapKeyValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- There is a TARGET_ROW.
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(line, &apos;TARGET_ROW::&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetNum = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET listTmp = SUBSTRING(line, pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract envName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::envName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrName&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::envName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetEnvName = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;TARGET_ROW: targetEnvName=&apos;||rec1.targetEnvName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrName
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrType&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrName=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.attrName = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;TARGET_ROW: attrName=&apos;||rec1.attrname);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrType=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(listTmp, &apos;::attrValue&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrType=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.attrType = SUBSTRING(listTmp, pos1+len, pos2-(pos1+len));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;TARGET_ROW: attrType=&apos;||rec1.attrType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract attrValue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(listTmp, &apos;::attrValue=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;::attrValue=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = SUBSTRING(listTmp, pos1+len);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;TARGET_ROW: attributeValue=&apos;||NVL(attributeValue,&apos;[NULL]&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.attrType = &apos;STRING_ARRAY&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetArrayItem = attributeValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.attrType = &apos;LIST&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue IS NOT NULL AND attributeValue &lt;&gt; &apos;null=null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(attributeValue, &apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryType = SUBSTRING(attributeValue, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryValue = SUBSTRING(attributeValue, pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetListEntryType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetListEntryValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.attrType = &apos;MAP&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (attributeValue IS NOT NULL AND attributeValue &lt;&gt; &apos;null=null|MAPBREAK|null=null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(attributeValue, &apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(attributeValue, &apos;|MAPBREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;|MAPBREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetmMapKeyType = SUBSTRING(attributeValue, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapKeyValue = SUBSTRING(attributeValue, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetmMapKeyType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetmMapKeyType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetMapKeyValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapKeyValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos1 = pos2 + len;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(attributeValue, &apos;=&apos;, pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueType = SUBSTRING(attributeValue, pos1, pos2-pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueValue = SUBSTRING(attributeValue, pos2+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetMapValueType = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.targetMapValueValue = &apos;null&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueValue = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (sourceNum &gt; 0 OR targetNum &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceEnvName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;NOT_EXIST_SOURCE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.targetEnvName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;NOT_EXIST_TARGET&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceAttrValue IS NULL AND rec1.targetAttrValue IS NULL) OR (rec1.sourceAttrValue IS NOT NULL AND rec1.targetAttrValue IS NOT NULL AND rec1.sourceAttrValue = rec1.targetAttrValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceListEntryValue IS NULL AND rec1.targetListEntryValue IS NULL) OR (rec1.sourceListEntryValue IS NOT NULL AND rec1.targetListEntryValue IS NOT NULL AND rec1.sourceListEntryValue = rec1.targetListEntryValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceMapKeyValue IS NULL AND rec1.targetMapKeyValue IS NULL) OR (rec1.sourceMapKeyValue IS NOT NULL AND rec1.targetMapKeyValue IS NOT NULL AND rec1.sourceMapKeyValue = rec1.targetMapKeyValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceMapValueValue IS NULL AND rec1.targetMapValueValue IS NULL) OR (rec1.sourceMapValueValue IS NOT NULL AND rec1.targetMapValueValue IS NOT NULL AND rec1.sourceMapValueValue = rec1.targetMapValueValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceArrayItem IS NULL AND rec1.targetArrayItem IS NULL) OR (rec1.sourceArrayItem IS NOT NULL AND rec1.targetArrayItem IS NOT NULL AND rec1.sourceArrayItem = rec1.targetArrayItem)) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   ) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;SAME&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;DIFFERENT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the row into the pipe
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF ( displayComparisonType_ = &apos;A&apos; OR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;S&apos; AND rec1.status = &apos;SAME&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;D&apos; AND rec1.status = &apos;DIFFERENT&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;NS&apos; AND rec1.status = &apos;NOT_EXIST_SOURCE&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;NT&apos; AND rec1.status = &apos;NOT_EXIST_TARGET&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;N&apos; AND INSTR(rec1.status, &apos;NOT_EXIST&apos;) = 1) ) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Do a lookup on the SOURCE attribute definition
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.status &lt;&gt; &apos;NOT_EXIST_SOURCE&apos; AND rec1.sourceEnvName IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SELECT SOURCE EXCEPT SOURCE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT updateRule, annotation, defaultValue, pattern, minValue, maxValue, displayName, unitName, visible, locallyDefined&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathSourceMod||&apos;/getServerAttributeDefs(&apos;&apos;&apos;||rec1.attrName||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursRemoteAttrDefs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR d AS cursRemoteAttrDefs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceUpdateRule = d.updateRule;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMinValue = d.minValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMaxValue = d.maxValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceUnitName = d.unitName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceDefaultValue = d.defaultValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceVisible = d.visible;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceLocallyDefined = d.locallyDefined;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcePattern = d.pattern;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceAnnotation = d.annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.displayName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.displayName = d.displayName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Do a lookup on the TARGET attribute definition
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.status &lt;&gt; &apos;NOT_EXIST_TARGET&apos; AND rec1.targetEnvName IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SELECT TARGET EXCEPT SOURCE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT updateRule, annotation, defaultValue, pattern, minValue, maxValue, displayName, unitName, visible, locallyDefined&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathTargetMod||&apos;/getServerAttributeDefs(&apos;&apos;&apos;||rec1.attrName||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursRemoteAttrDefs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR d AS cursRemoteAttrDefs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetUpdateRule = d.updateRule;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMinValue = d.minValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMaxValue = d.maxValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetUnitName = d.unitName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetDefaultValue = d.defaultValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetVisible = d.visible;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetLocallyDefined = d.locallyDefined;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetPattern = d.pattern;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetAnnotation = d.annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.displayName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.displayName = d.displayName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the record
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES (rec1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (rec1.sourceEnvName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;NOT_EXIST_SOURCE&apos;;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec1.targetEnvName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;NOT_EXIST_TARGET&apos;;
&#x9;&#x9;&#x9;&#x9;ELSEIF (
&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceAttrValue IS NULL AND rec1.targetAttrValue IS NULL) OR (rec1.sourceAttrValue IS NOT NULL AND rec1.targetAttrValue IS NOT NULL AND rec1.sourceAttrValue = rec1.targetAttrValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceListEntryValue IS NULL AND rec1.targetListEntryValue IS NULL) OR (rec1.sourceListEntryValue IS NOT NULL AND rec1.targetListEntryValue IS NOT NULL AND rec1.sourceListEntryValue = rec1.targetListEntryValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceMapKeyValue IS NULL AND rec1.targetMapKeyValue IS NULL) OR (rec1.sourceMapKeyValue IS NOT NULL AND rec1.targetMapKeyValue IS NOT NULL AND rec1.sourceMapKeyValue = rec1.targetMapKeyValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceMapValueValue IS NULL AND rec1.targetMapValueValue IS NULL) OR (rec1.sourceMapValueValue IS NOT NULL AND rec1.targetMapValueValue IS NOT NULL AND rec1.sourceMapValueValue = rec1.targetMapValueValue)) AND
&#x9;&#x9;&#x9;&#x9;&#x9;((rec1.sourceArrayItem IS NULL AND rec1.targetArrayItem IS NULL) OR (rec1.sourceArrayItem IS NOT NULL AND rec1.targetArrayItem IS NOT NULL AND rec1.sourceArrayItem = rec1.targetArrayItem)) 
&#x9;&#x9;&#x9;&#x9;   ) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;SAME&apos;;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.status = &apos;DIFFERENT&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Insert the row into the pipe
&#x9;&#x9;&#x9;&#x9;IF ( displayComparisonType_ = &apos;A&apos; OR
&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;S&apos; AND rec1.status = &apos;SAME&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;D&apos; AND rec1.status = &apos;DIFFERENT&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;NS&apos; AND rec1.status = &apos;NOT_EXIST_SOURCE&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;NT&apos; AND rec1.status = &apos;NOT_EXIST_TARGET&apos;) OR
&#x9;&#x9;&#x9;&#x9;&#x9;(displayComparisonType_ = &apos;N&apos; AND INSTR(rec1.status, &apos;NOT_EXIST&apos;) = 1) ) THEN

&#x9;&#x9;&#x9;&#x9;&#x9;-- Do a lookup on the SOURCE attribute definition
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.status &lt;&gt; &apos;NOT_EXIST_SOURCE&apos; AND rec1.sourceEnvName IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SELECT SOURCE EXCEPT SOURCE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT updateRule, annotation, defaultValue, pattern, minValue, maxValue, displayName, unitName, visible, locallyDefined&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathSourceMod||&apos;/getServerAttributeDefs(&apos;&apos;&apos;||rec1.attrName||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursRemoteAttrDefs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR d AS cursRemoteAttrDefs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceUpdateRule = d.updateRule;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMinValue = d.minValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMaxValue = d.maxValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceUnitName = d.unitName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceDefaultValue = d.defaultValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceVisible = d.visible;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceLocallyDefined = d.locallyDefined;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcePattern = d.pattern;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceAnnotation = d.annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.displayName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.displayName = d.displayName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Do a lookup on the TARGET attribute definition
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.status &lt;&gt; &apos;NOT_EXIST_TARGET&apos; AND rec1.targetEnvName IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SELECT TARGET EXCEPT SOURCE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT updateRule, annotation, defaultValue, pattern, minValue, maxValue, displayName, unitName, visible, locallyDefined&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||assetsSchemaPathTargetMod||&apos;/getServerAttributeDefs(&apos;&apos;&apos;||rec1.attrName||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursRemoteAttrDefs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR d AS cursRemoteAttrDefs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetUpdateRule = d.updateRule;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMinValue = d.minValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMaxValue = d.maxValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetUnitName = d.unitName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetDefaultValue = d.defaultValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetVisible = d.visible;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetLocallyDefined = d.locallyDefined;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetPattern = d.pattern;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetAnnotation = d.annotation;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec1.displayName IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.displayName = d.displayName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the record
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES (rec1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Initialize the next record
&#x9;&#x9;&#x9;SET sourceNum = 0;
&#x9;&#x9;&#x9;SET targetNum = 0;
&#x9;&#x9;&#x9;SET list = null;
&#x9;&#x9;&#x9;SET rec1 = null;
&#x9;&#x9;&#x9;IF (r.attrType IN (&apos;LIST&apos;,&apos;MAP&apos;,&apos;STRING_ARRAY&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;-- FORMAT FOR LIST, MAP, STRING_ARRAY:
&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW=null|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW::envName=DEV2::attrName=/path::attrType=STRING::attrValue=some other value|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- Attribute values for LIST, MAP, and STRING_ARRAY
        &#x9;&#x9;--&#x9;listEntryType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;listEntryValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapKeyType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapKeyValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapValueType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapValueValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;arrayItem VARCHAR(32768)

&#x9;&#x9;&#x9;&#x9;-- Extract the attribute value
&#x9;&#x9;&#x9;&#x9;IF (r.attrType = &apos;STRING_ARRAY&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.arrayItem,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSEIF (r.attrType = &apos;LIST&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.listEntryType,&apos;null&apos;)||&apos;=&apos;||NVL(r.listEntryValue,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSEIF (r.attrType = &apos;MAP&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.mapKeyType,&apos;null&apos;)||&apos;=&apos;||NVL(r.mapKeyValue,&apos;null&apos;)||&apos;|MAPBREAK|&apos;||NVL(r.mapValueType,&apos;null&apos;)||&apos;=&apos;||NVL(r.mapValueValue,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Modify SOURCE_ROW string
&#x9;&#x9;&#x9;&#x9;IF (currEnvName = sourceEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceNum = sourceNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the appropriate string
&#x9;&#x9;&#x9;&#x9;&#x9;SET list = &apos;SOURCE_ROW::envName=&apos;||sourceEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|BREAK|TARGET_ROW=null|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Modify TARGET_ROW string
&#x9;&#x9;&#x9;&#x9;IF (currEnvName = targetEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET targetNum = targetNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the appropriate string
&#x9;&#x9;&#x9;&#x9;&#x9;SET list = &apos;SOURCE_ROW=null|BREAK|TARGET_ROW::envName=&apos;||targetEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET rec1.attrName = r.attrName;
&#x9;&#x9;&#x9;&#x9;SET rec1.attrType = r.attrType;
&#x9;&#x9;&#x9;&#x9;IF (r.envName = sourceEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceEnvName = r.envName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceAttrValue = r.attrValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryType = r.listEntryType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryValue = r.listEntryValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcemMapKeyType = r.mapKeyType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapKeyValue = r.mapKeyValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueType = r.mapValueType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueValue = r.mapValueValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceArrayItem = r.arrayItem;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetEnvName = r.envName;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetAttrValue = r.attrValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryType = r.listEntryType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryValue = r.listEntryValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetmMapKeyType = r.mapKeyType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapKeyValue = r.mapKeyValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueType = r.mapValueType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueValue = r.mapValueValue;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetArrayItem = r.arrayItem;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;IF (r.attrType IN (&apos;LIST&apos;,&apos;MAP&apos;,&apos;STRING_ARRAY&apos;)) THEN
&#x9;&#x9;&#x9;&#x9;-- FORMAT FOR LIST, MAP, STRING_ARRAY:
&#x9;&#x9;&#x9;&#x9;-- [ROW=1]::SOURCE_ROW=null|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- [ROW=1]::SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW=null|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- [ROW=1]::SOURCE_ROW::envName=DEV1::attrName=/path::attrType=STRING::attrValue=some value|BREAK|TARGET_ROW::envName=DEV2::attrName=/path::attrType=STRING::attrValue=some other value|ROWBREAK|
&#x9;&#x9;&#x9;&#x9;-- Attribute values for LIST, MAP, and STRING_ARRAY
        &#x9;&#x9;--&#x9;listEntryType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;listEntryValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapKeyType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapKeyValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapValueType VARCHAR(32768), 
        &#x9;&#x9;--&#x9;mapValueValue VARCHAR(32768), 
        &#x9;&#x9;--&#x9;arrayItem VARCHAR(32768)

&#x9;&#x9;&#x9;&#x9;-- Extract the attribute value
&#x9;&#x9;&#x9;&#x9;IF (r.attrType = &apos;STRING_ARRAY&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.arrayItem,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSEIF (r.attrType = &apos;LIST&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.listEntryType,&apos;null&apos;)||&apos;=&apos;||NVL(r.listEntryValue,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSEIF (r.attrType = &apos;MAP&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = NVL(r.mapKeyType,&apos;null&apos;)||&apos;=&apos;||NVL(r.mapKeyValue,&apos;null&apos;)||&apos;|MAPBREAK|&apos;||NVL(r.mapValueType,&apos;null&apos;)||&apos;=&apos;||NVL(r.mapValueValue,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET attributeValue = &apos;null&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Modify SOURCE_ROW string
&#x9;&#x9;&#x9;&#x9;IF (currEnvName = sourceEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET sourceNum = sourceNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the appropriate string
&#x9;&#x9;&#x9;&#x9;&#x9;IF (list IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = &apos;SOURCE_ROW::envName=&apos;||sourceEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|BREAK|TARGET_ROW=null|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(list, &apos;SOURCE_ROW=null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(list, &apos;|BREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = SUBSTRING(list, 1, pos1+9) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;::envName=&apos;||sourceEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUBSTRING(list, pos1+15);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = list || &apos;SOURCE_ROW::envName=&apos;||sourceEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|BREAK|TARGET_ROW=null|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Modify TARGET_ROW string
&#x9;&#x9;&#x9;&#x9;IF (currEnvName = targetEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET targetNum = targetNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the appropriate string
&#x9;&#x9;&#x9;&#x9;&#x9;IF (list IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = &apos;SOURCE_ROW=null|BREAK|TARGET_ROW::envName=&apos;||targetEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(list, &apos;TARGET_ROW=null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(list, &apos;|ROWBREAK|&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = SUBSTRING(list, 1, pos1+9) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;::envName=&apos;||targetEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SUBSTRING(list, pos1+15);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET list = list || &apos;SOURCE_ROW=null|BREAK|TARGET_ROW::envName=&apos;||targetEnvName||&apos;::attrName=&apos;||currAttrName||&apos;::attrType=&apos;||r.attrType||&apos;::attrValue=&apos;||attributeValue||&apos;|ROWBREAK|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; i=&apos;||i||&apos;  list=&apos;||NVL(list,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET rec1.attrName = r.attrName;
&#x9;&#x9;&#x9;&#x9;SET rec1.attrType = r.attrType;
&#x9;&#x9;&#x9;&#x9;IF (r.envName = sourceEnvName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceEnvName = r.envName;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceAttrValue = r.attrValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryType = r.listEntryType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceListEntryValue = r.listEntryValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourcemMapKeyType = r.mapKeyType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapKeyValue = r.mapKeyValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueType = r.mapValueType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceMapValueValue = r.mapValueValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.sourceArrayItem = r.arrayItem;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetEnvName = r.envName;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetAttrValue = r.attrValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryType = r.listEntryType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetListEntryValue = r.listEntryValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetmMapKeyType = r.mapKeyType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapKeyValue = r.mapKeyValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueType = r.mapValueType;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetMapValueValue = r.mapValueValue;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec1.targetArrayItem = r.arrayItem;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;-- Set the previous attribute name to the current attribute name
&#x9;&#x9;SET prevAttrName = currAttrName;
&#x9;END FOR;
END</attribute>
  <attribute name="creationDate" type="LONG">1588127395555</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1591618045759</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/500</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/388</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/443</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/454</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/515</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/460</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/407</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/1005</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1588127395555</attribute>
</metadata>