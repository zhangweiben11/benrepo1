<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="compareServerResources" path="/shared/CoE/ServerComparisons/compareServerResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[compareResourcesTargetServer:

&#x9;This procedure is used to compare resources on the current &quot;source&quot; DV server with the same resource path on a &quot;target&quot; DV server.

&#x9;Pre-Requisites:
&#x9;&#x9;A DV &quot;Composite Datasource&quot; must be created somewhere in the &quot;source&quot; DV server that introspects the script
&#x9;&#x9;&#x9;&quot;/shared/ASAssets/Utilities/repository/getScriptText&quot; on the target DV server.
&#x9;&#x9;A DV dynamic path to a &quot;Composite Datasource&quot; with getScriptText must be provided as input.
&#x9;&#x9;Do not applyReservedListToPath as that will be done within this procedure.
&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/TDV_Server/Utilities/repository/getScriptText
 
&#x9;Input:
&#x9;&#x9;inDebug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N=no debug.  Y=debug on.
&#x9;&#x9;startingResource&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- starting container or resource path
&#x9;&#x9;targetDVSchemaPath&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;getScriptText
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
&#x9;&#x9;statusFilterList&#x9;&#x9;&#x9;VARCHAR,&#x9; &#x9;-- If null, then display all STATUS, otherwise display the status that are listed separated by spaces or commas.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;--   Status List:  EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;EQUAL &#x9;&#x9;&#x9;&#x9;= The two resources are exactly the same (equivalent).
&#x9;&#x9;&#x9;DIFFERENT &#x9;&#x9;&#x9;= The two resources are different.
&#x9;&#x9;&#x9;TARGET_NOT_EXIST&#x9;= The target resource does not exist for the same path as the source resource.
&#x9;&#x9;&#x9;BOTH_UNREADABLE&#x9;&#x9;= The getScriptText procedure could not read the resource type requested on both DV server.
&#x9;&#x9;&#x9;SOURCE_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the source DV server.
&#x9;&#x9;&#x9;TARGET_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the target DV server.
&#x9;&#x9;&#x9;UNKNOWN&#x9;&#x9;&#x9;&#x9;= The status could not be determined
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),
&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;VARCHAR,
&#x9;&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR, -- EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;sourceNumChars&#x9;&#x9;INTEGER,
&#x9;&#x9;&#x9;targetNumChars&#x9;&#x9;INTEGER,
&#x9;&#x9;&#x9;sourceScript&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;targetScript&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR
&#x9;&#x9;)
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;04/18/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="statusFilterList" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourceEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="targetEnvName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="publishedDatabasePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathSource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="assetsSchemaPathTarget" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="linkType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="status">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceNumChars">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="targetNumChars">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="sourceScript">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="targetScript">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="sourceLastModifiedDate">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceLastModifiedUserName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceLstModifiedUserDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sourceLastModifiedUserId">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="targetLastModifiedDate">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="targetLastModifiedUserName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="targetLastModifiedUserDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="targetLastModifiedUserId">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="message">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* compareServerResources:

&#x9;This procedure is used to compare resources on the &quot;source&quot; DV server with the same resource path on a &quot;target&quot; DV server.
&#x9;The source server may be any server not just the current server.
&#x9;The target server may be any server.

&#x9;Pre-Requisites:
&#x9;&#x9;A DV &quot;Composite Datasource&quot; must be created somewhere in the &quot;source&quot; DV server that introspects the script
&#x9;&#x9;&#x9;&quot;/shared/ASAssets/Utilities/repository/getScriptText&quot; on the target DV server.
&#x9;&#x9;A DV dynamic path to a &quot;Composite Datasource&quot; with getScriptText must be provided as input.
&#x9;&#x9;Do not applyReservedListToPath as that will be done within this procedure.
&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/TDV_Server/Utilities/repository/getScriptText
 
&#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;&#x9;startingResourcePath&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- [MANDATORY] The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;statusFilterList&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9; &#x9;-- [OPTIONAL] If null, then display all STATUS, otherwise display the status that are listed separated by spaces or commas.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--   Status List:  EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       EQUAL &#x9;&#x9;&#x9;&#x9;= The two resources are exactly the same (equivalent).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       DIFFERENT &#x9;&#x9;&#x9;= The two resources are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_NOT_EXIST&#x9;= The target resource does not exist for the same path as the source resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       BOTH_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on both DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       SOURCE_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the source DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the target DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       UNKNOWN&#x9;&#x9;&#x9;= The status could not be determined
&#x9;&#x9;sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;&#x9;targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;&#x9;publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;&#x9;assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;&#x9;assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;&#x9;linkType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;sourceNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;&#x9;targetNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;&#x9;sourceScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;&#x9;targetScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;&#x9;sourceLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified date.
&#x9;&#x9;&#x9;sourceLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user name.
&#x9;&#x9;&#x9;sourceLstModifiedUserDomain&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user domain.
&#x9;&#x9;&#x9;sourceLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user id.
&#x9;&#x9;&#x9;targetLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified date.
&#x9;&#x9;&#x9;targetLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user name.
&#x9;&#x9;&#x9;targetLastModifiedUserDomain&#x9;VARCHAR(255),&#x9;-- The target last modified user domain.
&#x9;&#x9;&#x9;targetLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user id.
&#x9;&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;&#x9;)
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;04/18/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new
&#x9;2019.400&#x9;11/19/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added status to debug statement.
&#x9;2020.200&#x9;05/19/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added explicit paths to override environment.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE compareServerResources(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;&#x9;-- [OPTIONAL] Y=debug on.  N=debug off.
&#x9;IN startingResourcePath&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- [MANDATORY] The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;IN statusFilterList&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9; &#x9;&#x9;-- [OPTIONAL] If null, then display all STATUS, otherwise display the status that are listed separated by spaces or commas.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--   Status List:  EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       EQUAL &#x9;&#x9;&#x9;&#x9;= The two resources are exactly the same (equivalent).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       DIFFERENT &#x9;&#x9;&#x9;= The two resources are different.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_NOT_EXIST&#x9;= The target resource does not exist for the same path as the source resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       BOTH_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on both DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       SOURCE_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the source DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       TARGET_UNREADABLE&#x9;= The getScriptText procedure could not read the resource type requested on the target DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;--       UNKNOWN&#x9;&#x9;&#x9;= The status could not be determined
&#x9;IN sourceEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique source environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathSource is null.
&#x9;IN targetEnvName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- [OPTIONAL] A unique target environment name qualifier that will be returned with the data.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory if assetsSchemaPathTarget is null.
&#x9;IN publishedDatabasePath&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  If left null, the default value will be used.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;IN assetsSchemaPathSource&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides sourceEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;IN assetsSchemaPathTarget&#x9;&#x9;VARCHAR(4096),&#x9;&#x9;-- [OPTIONAL] Overrides targetEnvName.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;linkType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;sourceNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;targetNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;sourceScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;targetScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;sourceLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified date.
&#x9;&#x9;sourceLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user name.
&#x9;&#x9;sourceLstModifiedUserDomain&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user domain.
&#x9;&#x9;sourceLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user id.
&#x9;&#x9;targetLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified date.
&#x9;&#x9;targetLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user name.
&#x9;&#x9;targetLastModifiedUserDomain&#x9;VARCHAR(255),&#x9;-- The target last modified user domain.
&#x9;&#x9;targetLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user id.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;compareServerResources&apos;;
&#x9;-- DV View path containing a list of valid environments and the path to the published ASAssets database.
&#x9;--   Mandatory when using &quot;sourceEnvName&quot; and &quot;targetEnvName&quot;.  
&#x9;--   Optional when using &quot;assetsSchemaPathSource&quot; and &quot;assetsSchemaPathTarget&quot;.
&#x9;--   Table Format: databaseName VARCHAR, envName VARCHAR, databasePath VARCHAR(4000)
&#x9;--   Modify this path depending on where the table is located.
&#x9;DECLARE publishedDatabasePathMod&#x9;VARCHAR(4096) DEFAULT NVL(publishedDatabasePath, &apos;/shared/CoE/DVPublishedSources/PublishedDatabaseList&apos;); 
&#x9;DECLARE assetsSchemaPathSourceMod&#x9;VARCHAR(4096);&#x9;-- The source schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE assetsSchemaPathTargetMod&#x9;VARCHAR(4096);&#x9;-- The target schema location of getServerAttribute(), getServerAttributesAll() and getServerAttributesDef() procedures which invokes the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Example: /shared/Common/ComparisonTools/DV_Server_810/Utilities/repository/getServerAttributesAll
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This path comes from a Composite Datasource that is pointing to the remote DV server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The latest version of the utilities is present on the target server with a minimum version of 2019Q400
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;which contains getServerAttributesAll().
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE parentType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);
&#x9;DECLARE resType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE resName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlResourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE TYPE recType&#x9;&#x9;&#x9;&#x9;ROW (
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource name on the source and target being compared.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096),&#x9;-- The resource path on the source and target being compared.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource type on the source and target being compared.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The resource subtype on the source and target being compared.
&#x9;&#x9;linkType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- When the resType=LINK, this is the resource type that the published link is pointing to or &quot;using&quot;.
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The status: EQUAL, DIFFERENT, TARGET_NOT_EXIST, BOTH_UNREADABLE, SOURCE_UNREADABLE, TARGET_UNREADABLE, UNKNOWN
&#x9;&#x9;sourceNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the source script.
&#x9;&#x9;targetNumChars&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of characters in the target script.
&#x9;&#x9;sourceScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual source script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;targetScript&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The actual target script.  When resType=LINK, this is the result parameters or cursor.
&#x9;&#x9;sourceLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified date.
&#x9;&#x9;sourceLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user name.
&#x9;&#x9;sourceLstModifiedUserDomain&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user domain.
&#x9;&#x9;sourceLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The source last modified user id.
&#x9;&#x9;targetLastModifiedDate&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified date.
&#x9;&#x9;targetLastModifiedUserName&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user name.
&#x9;&#x9;targetLastModifiedUserDomain&#x9;VARCHAR(255),&#x9;-- The target last modified user domain.
&#x9;&#x9;targetLastModifiedUserId&#x9;&#x9;VARCHAR(255),&#x9;-- The target last modified user id.
&#x9;&#x9;message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- A status message if appliable.
&#x9;);
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recType;
&#x9;DECLARE cursBasicResource&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR);
&#x9;DECLARE cursBasicModified&#x9;&#x9;&#x9;CURSOR(lastModifiedDate VARCHAR, lastModifiedUserName VARCHAR, lastModifiedUserDomain VARCHAR, lastModifiedUserId VARCHAR);
&#x9;DECLARE cursRecursive&#x9;&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR, subtype VARCHAR, resName VARCHAR, lastModifiedDate VARCHAR, lastModifiedUserName VARCHAR, lastModifiedUserDomain VARCHAR, lastModifiedUserId VARCHAR);
&#x9;DECLARE cursScriptText&#x9;&#x9;&#x9;&#x9;CURSOR(scriptText LONGVARCHAR);
&#x9;DECLARE cursPublishedDatabaseList&#x9;CURSOR(databasePath VARCHAR(4000));
&#x9;DECLARE cursUsedResource&#x9;&#x9;&#x9;CURSOR(resPath VARCHAR(4000), resType VARCHAR);
&#x9;DECLARE cursBasicResourceTable&#x9;&#x9;CURSOR(columnName VARCHAR, columnType VARCHAR);
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;---------------------------------
&#x9;-- Validate input parameters
&#x9;---------------------------------
&#x9;IF (startingResourcePath IS NULL OR LENGTH(TRIM(startingResourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;startingResourcePath&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathSource IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathSource)) &gt; 0 AND sourceEnvName IS NULL OR LENGTH(TRIM(sourceEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;sourceEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (assetsSchemaPathTarget IS NOT NULL AND LENGTH(TRIM(assetsSchemaPathTarget)) &gt; 0 AND targetEnvName IS NULL OR LENGTH(TRIM(targetEnvName)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The parameter &quot;targetEnvName&quot; may not be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (sourceEnvName IS NOT NULL AND targetEnvName IS NOT NULL AND sourceEnvName = targetEnvName) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;sourceEnvName&quot;=[&apos;||sourceEnvName||&apos;] must be different than the &quot;targetEnvName&quot;=[&apos;||targetEnvName||&apos;]&apos;;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(publishedDatabasePathMod, &apos;TABLE&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The path does not exist at path=&apos;||NVL(publishedDatabasePathMod,&apos;null&apos;);
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Source environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathSource IS NULL OR LENGTH(TRIM(assetsSchemaPathSource)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||sourceEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathSourceMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathSourceMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The source path does not exist at path=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathSourceMod, null, assetsSchemaPathSourceMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathSourceMod=&apos;||NVL(assetsSchemaPathSourceMod,&apos;null&apos;));
&#x9;END IF;

&#x9;---------------------------------
&#x9;-- Target environment datasource path
&#x9;---------------------------------
&#x9;IF (assetsSchemaPathTarget IS NULL OR LENGTH(TRIM(assetsSchemaPathTarget)) = 0) THEN
&#x9;&#x9;SET sqlStatement = &apos;SELECT databasePath FROM &apos;||publishedDatabasePathMod||&apos; WHERE databaseName = &apos;&apos;ASAssets&apos;&apos; AND envName = &apos;&apos;&apos;||targetEnvName||&apos;&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursPublishedDatabaseList FOR sqlStatement;
&#x9;&#x9;FOR r AS cursPublishedDatabaseList DO
&#x9;&#x9;&#x9;SET assetsSchemaPathTargetMod = r.databasePath || &apos;/Utilities/repository&apos;;
&#x9;&#x9;END FOR;
&#x9;END IF;
&#x9;CALL /lib/resource/ResourceExists(assetsSchemaPathTargetMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The target path does not exist at path=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;);
&#x9;END IF;
&#x9;CALL /shared/ASAssets/Utilities/repository/RepoUtils/applyReservedListToPath(assetsSchemaPathTargetMod, null, assetsSchemaPathTargetMod);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : assetsSchemaPathTargetMod=&apos;||NVL(assetsSchemaPathTargetMod,&apos;null&apos;));
&#x9;END IF;

&#x9;-------------------------
&#x9;-- SOURCE BASIC RESOURCE
&#x9;-------------------------
&#x9;SET sqlStatement = &apos;SELECT &quot;path&quot;, &quot;type&quot; FROM &apos;||assetsSchemaPathSourceMod||&apos;/getBasicResourceCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(startingResourcePath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, null)&apos;;
&#x9;OPEN cursBasicResource FOR sqlStatement;
&#x9;FOR r AS cursBasicResource DO
&#x9;&#x9;SET resPath = r.resPath;
&#x9;&#x9;SET resType = r.resType;
&#x9;END FOR;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : startingResourcePath=&apos;||NVL(startingResourcePath,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : resPath=&apos;||NVL(resPath,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : resType=&apos;||NVL(resType,&apos;null&apos;));
&#x9;END IF;


&#x9;IF (resPath IS NOT NULL AND resType IS NOT NULL) THEN
&#x9;&#x9;IF (resType &lt;&gt; &apos;CONTAINER&apos; AND resType &lt;&gt; &apos;DATA_SOURCE&apos;) THEN
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/repository/returnFolderNameAndFolderPath(resPath, &apos;E&apos;, resName, parentPath);
&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;-- SOURCE PARENT RESOURCE
&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT &quot;path&quot;, &quot;type&quot; FROM &apos;||assetsSchemaPathSourceMod||&apos;/getBasicResourceCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(parentPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, null)&apos;;
&#x9;&#x9;&#x9;OPEN cursBasicResource FOR sqlStatement;
&#x9;&#x9;&#x9;FOR r AS cursBasicResource DO
&#x9;&#x9;&#x9;&#x9;SET parentType = r.resType;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET parentPath = resPath;
&#x9;&#x9;&#x9;SET parentType = resType;
&#x9;&#x9;END IF;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : parentPath=&apos;||NVL(parentPath,&apos;null&apos;));
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : parentType=&apos;||NVL(parentType,&apos;null&apos;));
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : resPath=&apos;||NVL(resPath,&apos;null&apos;));
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : resName=&apos;||NVL(resName,&apos;null&apos;));
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : resType=&apos;||NVL(resType,&apos;null&apos;));
&#x9;&#x9;END IF;

&#x9;&#x9;-- Loop through the folder
&#x9;&#x9;-------------------------
&#x9;&#x9;-- SOURCE RECURSIVE LIST
&#x9;&#x9;-------------------------
&#x9;&#x9;SET sqlStatement = &apos;SELECT resPath, resType, subtype, name, lastModifiedDate, lastModifiedUserName, lastModifiedUserDomain, lastModifiedUserId FROM &apos;||assetsSchemaPathSourceMod||&apos;/getResourceListRecursive&apos;||&apos;(&apos;&apos;&apos;||REPLACE(parentPath, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||parentType||&apos;&apos;&apos;) WHERE resType &lt;&gt; &apos;&apos;CONTAINER&apos;&apos;&apos;;
&#x9;&#x9;OPEN cursRecursive FOR sqlStatement;
&#x9;&#x9;FOR r AS cursRecursive DO
&#x9;&#x9;&#x9;IF (resName IS NULL or (resName IS NOT NULL AND resName = r.resName)) THEN
&#x9;&#x9;&#x9;&#x9;SET rec = null;
&#x9;&#x9;&#x9;&#x9;SET rec.resName = r.resName;
&#x9;&#x9;&#x9;&#x9;SET rec.resPath = r.resPath;
&#x9;&#x9;&#x9;&#x9;SET rec.resType = r.resType;
&#x9;&#x9;&#x9;&#x9;SET rec.subtype = r.subtype;
&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;PROCESSING&apos;;
&#x9;&#x9;&#x9;&#x9;SET rec.sourceLastModifiedDate = r.lastModifiedDate;&#x9;&#x9;&#x9;-- The source last modified date.
&#x9;&#x9;&#x9;&#x9;SET rec.sourceLastModifiedUserName = r.lastModifiedUserName;&#x9;-- The source last modified user name.
&#x9;&#x9;&#x9;&#x9;SET rec.sourceLstModifiedUserDomain = r.lastModifiedUserDomain;&#x9;-- The source last modified user domain.
&#x9;&#x9;&#x9;&#x9;SET rec.sourceLastModifiedUserId = r.lastModifiedUserId;&#x9;&#x9;-- The source last modified user id.

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : rec.resPath=&apos;||NVL(rec.resPath,&apos;null&apos;)||&apos;  rec.resType=&apos;||NVL(rec.resType,&apos;null&apos;)||&apos;  rec.subtype=&apos;||NVL(rec.subtype,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (rec.resType = &apos;LINK&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE SQL SCRIPT
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine what the source link type is
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT resourcePath, resourceType FROM &apos;||assetsSchemaPathSourceMod||&apos;/getUsedResourcesDirectCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursUsedResource FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR u AS cursUsedResource DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resPath = u.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.linkType = u.resType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: used resType/linkType=&apos;||NVL(rec.linkType,&apos;null&apos;)||&apos;  used resPath=&apos;||NVL(resPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.linkType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathSourceMod || &apos;/getBasicResourceCursor_SQL_TABLE(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR source AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = rec.sourceScript || NVL(source.columnName,&apos;null&apos;)||&apos;:&apos;||NVL(source.columnType,&apos;null&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.linkType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathSourceMod || &apos;/getBasicResourceCursor_PROCEDURE_CURSOR(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;, 1) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR source AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = rec.sourceScript || NVL(source.columnName,&apos;null&apos;)||&apos;:&apos;||NVL(source.columnType,&apos;null&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.message, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_LINK_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE rec.message;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     SOURCE: rec.status=&apos;||NVL(rec.status,&apos;null&apos;)||&apos;  rec.sourceScript=&apos;||NVL(rec.sourceScript,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;-- TARGET SQL SCRIPT
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine what the target link type is
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT resourcePath, resourceType FROM &apos;||assetsSchemaPathTargetMod||&apos;/getUsedResourcesDirectCursor&apos;||&apos;(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursUsedResource FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR u AS cursUsedResource DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resPath = u.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resType = u.resType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: used resType/linkType=&apos;||NVL(resType,&apos;null&apos;)||&apos;  used resPath=&apos;||NVL(resPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the target resource last modified information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT lastModifiedDate, lastModifiedUserName, lastModifiedUserDomain, lastModifiedUserId FROM &apos;||assetsSchemaPathTargetMod||&apos;/getBasicResourceCursor(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicModified FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR r AS cursBasicModified DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedDate = r.lastModifiedDate;&#x9;&#x9;&#x9;-- The target last modified date.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserName = r.lastModifiedUserName;&#x9;-- The target last modified user name.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserDomain = r.lastModifiedUserDomain;-- The target last modified user domain.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserId = r.lastModifiedUserId;&#x9;&#x9;-- The target last modified user id.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (resType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathTargetMod || &apos;/getBasicResourceCursor_SQL_TABLE(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR target AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = rec.targetScript || NVL(target.columnName,&apos;null&apos;)||&apos;:&apos;||NVL(target.columnType,&apos;null&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (resType = &apos;PROCEDURE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE: Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||assetsSchemaPathTargetMod || &apos;/getBasicResourceCursor_PROCEDURE_CURSOR(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;, 1) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicResourceTable FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR target AS cursBasicResourceTable DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = rec.targetScript || NVL(target.columnName,&apos;null&apos;)||&apos;:&apos;||NVL(target.columnType,&apos;null&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.message, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_LINK_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE rec.message;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :     TARGET: rec.status=&apos;||NVL(rec.status,&apos;null&apos;)||&apos;  rec.targetScript=&apos;||NVL(rec.targetScript,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;-- SOURCE SQL SCRIPT
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the source SQL Script
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT scriptText FROM &apos;||assetsSchemaPathSourceMod||&apos;/getScriptText(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.subtype||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursScriptText FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR script AS cursScriptText DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceScript = script.ScriptText;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.message, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;-- TARGET SQL SCRIPT
&#x9;&#x9;&#x9;&#x9;&#x9;-------------------------
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the target resource last modified information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT lastModifiedDate, lastModifiedUserName, lastModifiedUserDomain, lastModifiedUserId FROM &apos;||assetsSchemaPathTargetMod||&apos;/getBasicResourceCursor(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBasicModified FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR r AS cursBasicModified DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedDate = r.lastModifiedDate;&#x9;&#x9;&#x9;-- The target last modified date.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserName = r.lastModifiedUserName;&#x9;-- The target last modified user name.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserDomain = r.lastModifiedUserDomain;-- The target last modified user domain.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetLastModifiedUserId = r.lastModifiedUserId;&#x9;&#x9;-- The target last modified user id.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the target SQL Script
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT scriptText FROM &apos;||assetsSchemaPathTargetMod||&apos;/getScriptText(&apos;&apos;&apos;||REPLACE(rec.resPath,&apos;&apos;&apos;&apos;,&apos;&apos;&apos;&apos;&apos;&apos;)||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.resType||&apos;&apos;&apos;, &apos;&apos;&apos;||rec.subtype||&apos;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursScriptText FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR script AS cursScriptText DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetScript = script.ScriptText;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.message = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.message, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;TARGET_NOT_EXIST&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Determine the status
&#x9;&#x9;&#x9;&#x9;IF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NULL AND rec.targetScript IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;BOTH_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NOT NULL AND rec.targetScript IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;TARGET_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceNumChars = LENGTH(rec.sourceScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript IS NULL AND rec.targetScript IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;SOURCE_UNREADABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetNumChars = LENGTH(rec.targetScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript = rec.targetScript) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;EQUAL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceNumChars = LENGTH(rec.sourceScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetNumChars = LENGTH(rec.targetScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos; AND rec.sourceScript &lt;&gt; rec.targetScript) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;DIFFERENT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sourceNumChars = LENGTH(rec.sourceScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.targetNumChars = LENGTH(rec.targetScript||&apos;|&apos;)-1;
&#x9;&#x9;&#x9;&#x9;ELSEIF (rec.status = &apos;PROCESSING&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.status = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : Processing:  status=&apos;||RPAD(rec.status,16,&apos; &apos;)||&apos;  resType=[&apos;||NVL(r.resType,&apos;null&apos;)||&apos;]  resPath=[&apos;||NVL(r.resPath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Insert into the pipe
&#x9;&#x9;&#x9;&#x9;IF (statusFilterList IS NULL OR LENGTH(TRIM(statusFilterList)) = 0 OR INSTR(UPPER(statusFilterList), rec.status) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(rec);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1555617744469</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1591984514840</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/296</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/298</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/297</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/323</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/300</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/299</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/334</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/342</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/398</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/380</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/518</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/360</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/275</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/274</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/259</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/240</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/273</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/349</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/415</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">14/426</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/446</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/390</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1555617744469</attribute>
</metadata>