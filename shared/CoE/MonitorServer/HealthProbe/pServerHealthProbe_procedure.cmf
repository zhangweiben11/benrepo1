<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:4eac6a34-df40-4265-b123-32a6ac34cac2 -->
<metadata name="pServerHealthProbe" path="/shared/CoE/MonitorServer/HealthProbe/pServerHealthProbe" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="ProbeTime" direction="OUT" nullable="true">
      <datatype name="TIMESTAMP" type="DATETIME"/>
    </parameter>
    <parameter name="ProbeStatus" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="ProbeMessage" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="ProbeScore" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="admin" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GenerateEvent" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="eventName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/ASAssets/Utilities/time/getCurrentTimestamp" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="currentTS" direction="OUT">
        <datatype type="DATETIME"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/CoE/MonitorServer/Common/getServerHostPort" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="nodehost" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="nodeport" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/CoE/MonitorServer/Customize/commonValues" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/CoE/MonitorServer/Datasources/PackagedQueries/00_ExecuteDMLSelect" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputSQL" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="col1TS">
            <datatype type="DATETIME"/>
          </element>
          <element name="col2STR">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="col3INT">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="col4STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col5STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col6STR">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="col7INT">
            <datatype type="INTEGER"/>
          </element>
          <element name="col8STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col9STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col10STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col11STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col12STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col13STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col14STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col15STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="col16STR">
            <datatype type="STRING" maxLength="4000"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;pServerHealthProbe:

&#x9;This procedure gets invoked by the Load Balancer software.  The Load Balancer should be configured as follows:
&#x9;&#x9;1) Invoke every 5 seconds
&#x9;&#x9;2) Configure a 16 second check to determine if TDV is unavailable.
&#x9;&#x9;&#x9;a) If the load balancer invokes TDV 3 times and does not get a response, the 4th time (n+1) it will mark the server as down
&#x9;&#x9;3) Configure the load balancer to send traffic to TDV if it receives SERVER_READY
&#x9;&#x9;&#x9;a) SERVER_DOWN indicates that TDV is not taking requests.
&#x9;&#x9;&#x9;b) SERVER_BUSY indicates that TDV is not currently taking requests but that can change upon the next polling of TDV.

&#x9;INPUT:
&#x9;&#x9;NONE

&#x9;OUTPUT:
&#x9;&#x9;ProbeTime &#x9;&#x9;TIMESTAMP,&#x9;&#x9;-- Timestamp of the invocation
&#x9;&#x9;ProbeStatus &#x9;VARCHAR,   &#x9;&#x9;-- Possible values are SERVER_READY, SERVER_DOWN or SERVER_BUSY.
&#x9;&#x9;&#x9;SERVER_READY - load balancer may send requests to the TDV node.
&#x9;&#x9;&#x9;SERVER_DOWN - load balancer should not send requests to the TDV node.
&#x9;&#x9;&#x9;SERVER_BUSY - load balancer should continue polling the TDV node until SERVER_READY is received.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  If all nodes are reporting SERVER_BUSY then send the request to the least busy node based on the PROBE_SCORE.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Generates a user defined event &quot;ServerStatusBusy&quot; so that it gets logged in DV_SERVER_SYSTEM_EVENT and can be reported or alerted on.

&#x9;&#x9;ProbeMessage &#x9;VARCHAR(4000)   -- The reason for health failure.
&#x9;&#x9;ProbeScore&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_BUSY the ProbeScore indicates a score of busy on a scale of 1-100.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    The load balancer should choose the TDV node with the least busy score.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_READY the ProbeScore=0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_DOWN the ProbeScore=-1

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2020.200&#x9;05/27/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE pServerHealthProbe(
&#x9;OUT ProbeTime &#x9;&#x9;TIMESTAMP,&#x9;&#x9;-- Timestamp of the invocation
&#x9;OUT ProbeStatus &#x9;VARCHAR,   &#x9;&#x9;-- Possible values are SERVER_READY, SERVER_DOWN or SERVER_BUSY.
&#x9;OUT ProbeMessage &#x9;VARCHAR(4000),  -- The reason for health failure.
&#x9;OUT ProbeScore&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_BUSY the ProbeScore indicates a score of busy on a scale of 1-100.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    The load balancer should choose the TDV node with the least busy score.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_READY the ProbeScore=0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- When ProbeStatus=SERVER_DOWN the ProbeScore=-1
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT &apos;pServerHealthProbe&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) &#x9;&#x9;DEFAULT &apos;N&apos;;
&#x9;DECLARE constantName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT &apos;serverMaintenanceList&apos;;
&#x9;DECLARE constantPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000) &#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.commonValuesPath;
&#x9;DECLARE totalHeapUsedPercentLimit&#x9;&#x9;INTEGER &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.totalHeapUsedPercentLimit;
&#x9;DECLARE managedMemoryUsedPercentLimit&#x9;INTEGER &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.managedMemoryUsedPercentLimit;
&#x9;DECLARE totalActiveBigHeapRequestsLimit&#x9;INTEGER &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.totalActiveBigHeapRequestsLimit;
&#x9;DECLARE totalActiveRequestsLimit&#x9;&#x9;INTEGER &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.totalActiveRequestsLimit;
&#x9;DECLARE databaseType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.databaseType;
&#x9;DECLARE catalogName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.catalogName;
&#x9;DECLARE schemaName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.schemaName;
&#x9;DECLARE tableName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR &#x9;&#x9;DEFAULT /shared/CoE/MonitorServer/Customize/commonValues.HealthCheckTable;
&#x9;DECLARE serverMaintenanceList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE nodehost&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE nodeport&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;

&#x9;-- Set the initial timestamp, status and comment
&#x9;CALL /shared/ASAssets/Utilities/&quot;time&quot;/getCurrentTimestamp(ProbeTime);
&#x9;SET ProbeStatus = &apos;SERVER_READY&apos;;
&#x9;SET ProbeMessage = &apos;N/A&apos;;
&#x9;SET ProbeScore = 0;

&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- (1) Check server down for maintenance
&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos;) THEN
&#x9;&#x9;&#x9;--Get the current host and port
&#x9;&#x9;&#x9;CALL /shared/CoE/MonitorServer/Common/getServerHostPort(nodehost, nodeport);
&#x9;&#x9;&#x9;-- Get the &quot;serverMaintenanceList&quot; from the commonValues
&#x9;&#x9;&#x9;CALL /shared/ASAssets/Utilities/string/getConstantV2(constantPath, constantName, 3, serverMaintenanceList);
&#x9;&#x9;&#x9;-- Determine if the current nodehost is in the list which indicates SERVER_DOWN for maintenance
&#x9;&#x9;&#x9;IF (serverMaintenanceList IS NOT NULL AND LENGTH(TRIM(serverMaintenanceList)) &gt; 0 AND INSTR(serverMaintenanceList, nodehost) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_DOWN&apos;;
&#x9;&#x9;&#x9;&#x9;SET ProbeMessage = &apos;SERVER DOWN FOR MAINTENANCE&apos;;
&#x9;&#x9;&#x9;&#x9;SET ProbeScore = -1;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET ProbeMessage = SUBSTRING(&apos;EXCEPTION: &apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR), 1, 4000);
&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_DOWN&apos;;
&#x9;END;

&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- (2) Check DV_SERVER_HEALTH_CHECK
&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos;) THEN
&#x9;&#x9;&#x9;IF (catalogName IS NOT NULL AND LENGTH(TRIM(catalogName)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET catalogName = null;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (schemaName IS NOT NULL AND LENGTH(TRIM(schemaName)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET schemaName = null;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (databaseType = &apos;oracle&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT CURRENT_TIMESTAMP, TOTAL_HEAP_USED_PERCENT, MANAGED_HEAP_USED_PERCENT, BIG_HEAP_REQUESTS, TOTAL_ACTIVE_REQUESTS, null, null, null, null, null, null, null, null, null, null, null&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM (SELECT TOTAL_HEAP_USED_PERCENT, MANAGED_HEAP_USED_PERCENT, BIG_HEAP_REQUESTS, TOTAL_ACTIVE_REQUESTS FROM &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL2(catalogName,&apos;&quot;&apos;||catalogName||&apos;&quot;.&apos;,&apos; &apos;))||TRIM(NVL2(schemaName,&apos;&quot;&apos;||schemaName||&apos;&quot;.&apos;,&apos; &apos;))||&apos;&quot;&apos;||tableName||&apos;&quot; ORDER BY LOAD_TIME DESC)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE rownum &lt;= 1&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (databaseType = &apos;sqlserver&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT TOP 1 CURRENT_TIMESTAMP, TOTAL_HEAP_USED_PERCENT, MANAGED_HEAP_USED_PERCENT, BIG_HEAP_REQUESTS, TOTAL_ACTIVE_REQUESTS, null, null, null, null, null, null, null, null, null, null, null&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||TRIM(NVL2(catalogName,&apos;&quot;&apos;||catalogName||&apos;&quot;.&apos;,&apos; &apos;))||TRIM(NVL2(schemaName,&apos;&quot;&apos;||schemaName||&apos;&quot;.&apos;,&apos; &apos;))||&apos;&quot;&apos;||tableName||&apos;&quot; WITH(NOLOCK)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ORDER BY LOAD_TIME DESC&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (databaseType = &apos;postgres&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT CURRENT_TIMESTAMP, a.&quot;TOTAL_HEAP_USED_PERCENT&quot;, a.&quot;MANAGED_HEAP_USED_PERCENT&quot;, a.&quot;BIG_HEAP_REQUESTS&quot;, a.&quot;TOTAL_ACTIVE_REQUESTS&quot;, null, null, null, null, null, null, null, null, null, null, null&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM (SELECT &quot;TOTAL_HEAP_USED_PERCENT&quot;, &quot;MANAGED_HEAP_USED_PERCENT&quot;, &quot;BIG_HEAP_REQUESTS&quot;, &quot;TOTAL_ACTIVE_REQUESTS&quot; , RANK() OVER (ORDER BY &quot;LOAD_TIME&quot; DESC) as my_rank FROM &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TRIM(NVL2(catalogName,&apos;&quot;&apos;||catalogName||&apos;&quot;.&apos;,&apos; &apos;))||TRIM(NVL2(schemaName,&apos;&quot;&apos;||schemaName||&apos;&quot;.&apos;,&apos; &apos;))||&apos;&quot;&apos;||tableName||&apos;&quot;) a&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE my_rank &lt;= 1&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;sqlstatement=&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Query the health check table: DV_SERVER_HEALTH_CHECK
&#x9;&#x9;&#x9;FOR r AS 
&#x9;&#x9;&#x9;&#x9;SELECT col2STR TOTAL_HEAP_USED_PERCENT, col3INT MANAGED_HEAP_USED_PERCENT, col4STR BIG_HEAP_REQUESTS, col5STR TOTAL_ACTIVE_REQUESTS
&#x9;&#x9;&#x9;&#x9;FROM /shared/CoE/MonitorServer/Datasources/PackagedQueries/&quot;00_ExecuteDMLSelect&quot;(sqlStatement)
&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;-- Rule #1: Current Total Heap Used Percent
&#x9;&#x9;&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos; AND r.TOTAL_HEAP_USED_PERCENT &gt; totalHeapUsedPercentLimit) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_BUSY&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeMessage =&apos;Exceeded Current Total Heap Used Percent (TOTAL_HEAP_USED_PERCENT[&apos;||r.TOTAL_HEAP_USED_PERCENT||&apos;] &gt; totalHeapUsedPercentLimit[&apos;||totalHeapUsedPercentLimit||&apos;])&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Rule #2: Current Managed Memory Used Percent
&#x9;&#x9;&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos; AND r.MANAGED_HEAP_USED_PERCENT &gt; managedMemoryUsedPercentLimit) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_BUSY&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeMessage =&apos;Exceeded Current Managed Memory Used Percent (MANAGED_HEAP_USED_PERCENT[&apos;||r.MANAGED_HEAP_USED_PERCENT||&apos;] &gt; managedMemoryUsedPercentLimit[&apos;||managedMemoryUsedPercentLimit||&apos;])&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Rule #3: Current Active Big Heap Requests
&#x9;&#x9;&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos; AND r.BIG_HEAP_REQUESTS &gt; totalActiveBigHeapRequestsLimit) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_BUSY&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeMessage =&apos;Exceeded Current Active Big Heap Requests (BIG_HEAP_REQUESTS[&apos;||r.BIG_HEAP_REQUESTS||&apos;] &gt; totalActiveBigHeapRequestsLimit[&apos;||totalActiveBigHeapRequestsLimit||&apos;])&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Rule #4: Current Total Active Requests
&#x9;&#x9;&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_READY&apos; AND r.TOTAL_ACTIVE_REQUESTS &gt; totalActiveRequestsLimit) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_BUSY&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET ProbeMessage =&apos;Exceeded Current Total Active Requests (TOTAL_ACTIVE_REQUESTS[&apos;||r.TOTAL_ACTIVE_REQUESTS||&apos;] &gt; totalActiveRequestsLimit[&apos;||totalActiveRequestsLimit||&apos;])&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;IF (ProbeStatus = &apos;SERVER_BUSY&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- Generate a system user-defined event
&#x9;&#x9;&#x9;&#x9;CALL /lib/util/GenerateEvent(&apos;ServerStatusBusy&apos;, ProbeStatus||&apos;: &apos;||ProbeMessage);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET ProbeMessage = SUBSTRING(&apos;EXCEPTION: &apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR), 1, 4000);
&#x9;&#x9;&#x9;SET ProbeStatus = &apos;SERVER_DOWN&apos;;
&#x9;END;
END</attribute>
  <attribute name="creationDate" type="LONG">1590526611959</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1601333668980</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/133</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1590526611959</attribute>
</metadata>