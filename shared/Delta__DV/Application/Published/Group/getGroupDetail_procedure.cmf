<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="getGroupDetail" path="/shared/Delta_DV/Application/Published/Group/getGroupDetail" type="PROCEDURE" subtype="XQUERY_TRANSFORM_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="group" direction="OUT" nullable="true">
      <datatype name="group" referenceDefinitionSet="/shared/Delta_DV/Application/DefinitionSets/Group/defxAI_GroupDetail" referenceType="group" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="group">
        <schemaDatatype>
          <datatype name="group" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="ELEMENT_DECL" anonymous="true" type="TREE" refId="257">
            <element name="groupNumber">
              <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="groupName">
              <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="groupSurrogateId">
              <datatype name="integer" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="decimal" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DECIMAL" maxDigits="32" maxFractionalDigits="0"/>
            </element>
            <element name="groupNetworkId" minOccurs="0">
              <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="howEnabled">
              <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="customerCareNumber" minOccurs="0">
              <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
            </element>
            <element name="contact" maxOccurs="2147483647" minOccurs="0">
              <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="513">
                <element name="code">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="title" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="firstName" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="middleName" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="lastName" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="nameSuffix" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="effectiveDate">
                  <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                </element>
                <element name="endDate">
                  <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                </element>
                <element name="whoTypeIndicator">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="role" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="categoryCd" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
              </datatype>
            </element>
            <element name="division" maxOccurs="2147483647" minOccurs="0">
              <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="769">
                <element name="number">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="name">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="surrogateId">
                  <datatype name="integer" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="decimal" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DECIMAL" maxDigits="32" maxFractionalDigits="0"/>
                </element>
                <element name="prePaidGroup">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="programtype" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="selfFunded">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="basisOfPayment" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="assignmentOfBenefits">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="toaFlag">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="deltaCareOrthoMessageIndicator" minOccurs="0">
                  <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                </element>
                <element name="businessLevel" maxOccurs="2147483647" minOccurs="0">
                  <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1025">
                    <element name="groupTypeIdentifier">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="healthCareContractHolderIdentifier">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="state">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="product">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="networkId">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="effectiveDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                    <element name="endDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                  </datatype>
                </element>
                <element name="benefitPackage" maxOccurs="2147483647" minOccurs="0">
                  <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1281">
                    <element name="id">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="classCode" minOccurs="0">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="effectiveDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                    <element name="endDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                  </datatype>
                </element>
                <element name="dependant" minOccurs="0">
                  <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1537">
                    <element name="child">
                      <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1793">
                        <element name="coveredToAge">
                          <datatype name="integer" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="decimal" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DECIMAL" maxDigits="32" maxFractionalDigits="0"/>
                        </element>
                        <element name="terminationRule">
                          <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                        </element>
                        <element name="effectiveDate">
                          <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                        </element>
                        <element name="endDate">
                          <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                        </element>
                      </datatype>
                    </element>
                    <element name="student">
                      <reference refId="1793"/>
                    </element>
                  </datatype>
                </element>
                <element name="internalDualCoverage" minOccurs="0">
                  <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2049">
                    <element name="excludedGroupId">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="excludeSubscriber">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="excludeSpouse">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="excludeDependant">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </element>
                <element name="audit" maxOccurs="2147483647" minOccurs="0">
                  <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2305">
                    <element name="code">
                      <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="effectiveDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                    <element name="endDate">
                      <datatype name="date" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATE"/>
                    </element>
                    <element name="procedure" maxOccurs="2147483647" minOccurs="0">
                      <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2561">
                        <element name="code">
                          <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                        </element>
                        <element name="suppressionIndicator">
                          <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                        </element>
                      </datatype>
                    </element>
                  </datatype>
                </element>
                <element name="contact" maxOccurs="2147483647" minOccurs="0">
                  <reference refId="513"/>
                </element>
              </datatype>
            </element>
          </datatype>
        </schemaDatatype>
      </datatype>
    </parameter>
    <parameter name="pGroupID" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="12"/>
    </parameter>
    <parameter name="pDivisionID" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="12"/>
    </parameter>
    <parameter name="pEffectiveDate" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="10"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/Application/DefinitionSets/Group/defxAI_GroupDetail" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Business/BusinessSemantic/Group/Procedures/prcBl_GetGroupDetail" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Business/Logical/Group/Procedures/prcBl_AllContactTypeByLevel" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Business/Logical/Group/Procedures/prcBl_DivisionDependentAgeRule" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Business/Logical/Group/Procedures/prcBl_DivisionDetail" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Physical/Formatting/PackagedQueries/Group/pkgPl_CodeAuditOverride" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Physical/Formatting/PackagedQueries/Group/pkgPl_DivisionBenefitPkg" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Physical/Formatting/PackagedQueries/Group/pkgPl_DivisionBusinessLevel" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Physical/Formatting/PackagedQueries/Group/pkgPl_DivisionCodeAudit" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/Physical/Formatting/PackagedQueries/Group/pkgPl_DivisionDualCoverageExcl" type="PROCEDURE">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <attribute name="creationDate" type="LONG">1601596617924</attribute>
  <attribute name="creatorUserDomain" type="STRING">dev</attribute>
  <attribute name="creatorUserId" type="INTEGER">2810101</attribute>
  <attribute name="creatorUserName" type="STRING">dca31940</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">true</attribute>
  <attribute name="lastModifiedDate" type="LONG">1612913068320</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">dev</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">2810101</attribute>
  <attribute name="lastModifiedUserName" type="STRING">dca31940</attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1601596617924</attribute>
  <attribute name="transformModel" type="NULL"/>
  <attribute name="xquery" type="STRING">declare copy-namespaces no-preserve,inherit;
declare namespace ns1=&quot;http://www.w3.org/2001/XMLSchema&quot;;
declare variable $pGroupID external;
declare variable $pDivisionID external;
declare variable $pEffectiveDate external;

&lt;root xmlns:ns1=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;{
  let $nodes := (
    let $inputs := (if (empty($pGroupID)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pGroupID), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivisionID)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivisionID), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
    let $query := concat( &quot;select GroupNBR,GroupName,GroupSurrogateID,NetworkID,CustomerCareNumber,GroupSurrogateIDChar,GroupID,DivisionID from /shared/Delta_DV/Business/BusinessSemantic/&quot;&quot;Group&quot;&quot;/Procedures/prcBl_GetGroupDetail(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
    let $pGroup1 := composite:executeQuery($query)//result
    for $pGroup in $pGroup1
    return
    element group {
      element groupNumber {$pGroup/GroupNBR/text()},
      element groupName {$pGroup/GroupName/text()},
      element groupSurrogateId {$pGroup/GroupSurrogateID/text()},
      element groupNetworkId {$pGroup/NetworkID/text()},
      element howEnabled {},
      element customerCareNumber {$pGroup/CustomerCareNumber/text()},
      let $inputs := (if (empty($pGroup/GroupSurrogateIDChar/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pGroup/GroupSurrogateIDChar/text()), &quot;&apos;&quot;) cast as xs:string,&quot;&apos;GROUP&apos;&quot;,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
      let $query := concat( &quot;select ContactTypeCD,ContactTitle,FirstName,MiddleName,LastName,NameSuffix,EffDate,EndDate,ContactLevelIND,ContactRole,ContactCategoryCD from /shared/Delta_DV/Business/Logical/&quot;&quot;Group&quot;&quot;/Procedures/prcBl_AllContactTypeByLevel(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
      let $groupContact1 := composite:executeQuery($query)//result
      for $groupContact in $groupContact1
      return
      element contact {
        element code {$groupContact/ContactTypeCD/text()},
        element title {$groupContact/ContactTitle/text()},
        element firstName {$groupContact/FirstName/text()},
        element middleName {$groupContact/MiddleName/text()},
        element lastName {$groupContact/LastName/text()},
        element nameSuffix {$groupContact/NameSuffix/text()},
        element effectiveDate {$groupContact/EffDate/text()},
        element endDate {$groupContact/EndDate/text()},
        element whoTypeIndicator {$groupContact/ContactLevelIND/text()},
        element role {$groupContact/ContactRole/text()},
        element categoryCd {$groupContact/ContactCategoryCD/text()}
      },
      let $inputs := (if (empty($pGroup/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pGroup/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pGroup/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pGroup/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
      let $query := concat( &quot;select GroupSurrogateIDChar,GroupID,DivisionID,DivisionNBR,DivisionName,DivisionSurrogateID,PrePaidGroupIND,ProgramType,SelfFundedIND,BasisOfPayment,BenefitAssignmentIND,ToaIND,DeltaCareOrthoMsgIND,DivisionSurrogateIDChar from /shared/Delta_DV/Business/Logical/&quot;&quot;Group&quot;&quot;/Procedures/prcBl_DivisionDetail(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
      let $pDivision1 := composite:executeQuery($query)//result
      for $pDivision in $pDivision1
      return
      element division {
        element number {$pDivision/DivisionNBR/text()},
        element name {$pDivision/DivisionName/text()},
        element surrogateId {$pDivision/DivisionSurrogateID/text()},
        element prePaidGroup {$pDivision/PrePaidGroupIND/text()},
        element programtype {$pDivision/ProgramType/text()},
        element selfFunded {$pDivision/SelfFundedIND/text()},
        element basisOfPayment {$pDivision/BasisOfPayment/text()},
        element assignmentOfBenefits {$pDivision/BenefitAssignmentIND/text()},
        element toaFlag {$pDivision/ToaIND/text()},
        element deltaCareOrthoMessageIndicator {$pDivision/DeltaCareOrthoMsgIND/text()},
        let $inputs := (if (empty($pDivision/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
        let $query := concat( &quot;select NetworkID,EffDate,EndDate,GroupID,DivisionID,GroupTypeID,ContractHolderID,State,Product from /shared/Delta_DV/Physical/Formatting/PackagedQueries/&quot;&quot;Group&quot;&quot;/pkgPl_DivisionBusinessLevel(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
        let $pBusinessLevel1 := composite:executeQuery($query)//result
        for $pBusinessLevel in $pBusinessLevel1
        return
        element businessLevel {
          element groupTypeIdentifier {$pBusinessLevel/GroupTypeID/text()},
          element healthCareContractHolderIdentifier {$pBusinessLevel/ContractHolderID/text()},
          element state {$pBusinessLevel/State/text()},
          element product {$pBusinessLevel/Product/text()},
          element networkId {$pBusinessLevel/NetworkID/text()},
          element effectiveDate {$pBusinessLevel/EffDate/text()},
          element endDate {$pBusinessLevel/EndDate/text()}
        },
        let $inputs := (if (empty($pDivision/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
        let $query := concat( &quot;select EffDate,EndDate,GroupID,DivisionID,BenefitPkgID,MBRClassCD from /shared/Delta_DV/Physical/Formatting/PackagedQueries/&quot;&quot;Group&quot;&quot;/pkgPl_DivisionBenefitPkg(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
        let $pBenefitPkg1 := composite:executeQuery($query)//result
        for $pBenefitPkg in $pBenefitPkg1
        return
        element benefitPackage {
          element id {$pBenefitPkg/BenefitPkgID/text()},
          element classCode {$pBenefitPkg/MBRClassCD/text()},
          element effectiveDate {$pBenefitPkg/EffDate/text()},
          element endDate {$pBenefitPkg/EndDate/text()}
        },
        let $nodes := (
          let $inputs := (if (empty($pDivision/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/GroupSurrogateIDChar/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupSurrogateIDChar/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionSurrogateIDChar/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionSurrogateIDChar/text()), &quot;&apos;&quot;) cast as xs:string)
          let $query := concat( &quot;select EffDate,EndDate,GroupID,DivisionID,State,ChildAge,ChildTermRule,StudentAge,StudentTermRule from /shared/Delta_DV/Business/Logical/&quot;&quot;Group&quot;&quot;/Procedures/prcBl_DivisionDependentAgeRule(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
          for $pDependantAge in composite:executeQuery($query)//result
          return
          element dependant {
            let $nodes := (
              element child {
                element coveredToAge {$pDependantAge/ChildAge/text()},
                element terminationRule {$pDependantAge/ChildTermRule/text()},
                element effectiveDate {$pDependantAge/EffDate/text()},
                element endDate {$pDependantAge/EndDate/text()}
              }
            )
            return
            $nodes[1],
            let $nodes := (
              element student {
                element coveredToAge {$pDependantAge/StudentAge/text()},
                element terminationRule {$pDependantAge/StudentTermRule/text()},
                element effectiveDate {$pDependantAge/EffDate/text()},
                element endDate {$pDependantAge/EndDate/text()}
              }
            )
            return
            $nodes[1]
          }
        )
        return
        $nodes[1],
        let $nodes := (
          let $inputs := (if (empty($pDivision/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
          let $query := concat( &quot;select EffDate,EndDate,GroupID,DivisionID,ExcludedGroupID,ExcludedSubscriberIND,ExcludedSpouseIND,ExcludedDependantIND from /shared/Delta_DV/Physical/Formatting/PackagedQueries/&quot;&quot;Group&quot;&quot;/pkgPl_DivisionDualCoverageExcl(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
          for $pDualCoverage in composite:executeQuery($query)//result
          return
          element internalDualCoverage {
            element excludedGroupId {$pDualCoverage/ExcludedGroupID/text()},
            element excludeSubscriber {$pDualCoverage/ExcludedSubscriberIND/text()},
            element excludeSpouse {$pDualCoverage/ExcludedSpouseIND/text()},
            element excludeDependant {$pDualCoverage/ExcludedDependantIND/text()}
          }
        )
        return
        $nodes[1],
        let $inputs := (if (empty($pDivision/GroupID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/GroupID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pDivision/DivisionID/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionID/text()), &quot;&apos;&quot;) cast as xs:string,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
        let $query := concat( &quot;select EffDate,EndDate,GroupID,DivisionID,CodeAuditCD from /shared/Delta_DV/Physical/Formatting/PackagedQueries/&quot;&quot;Group&quot;&quot;/pkgPl_DivisionCodeAudit(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
        let $pCodeAudit1 := composite:executeQuery($query)//result
        for $pCodeAudit in $pCodeAudit1
        return
        element audit {
          element code {$pCodeAudit/CodeAuditCD/text()},
          element effectiveDate {$pCodeAudit/EffDate/text()},
          element endDate {$pCodeAudit/EndDate/text()},
          let $inputs := (if (empty($pCodeAudit/CodeAuditCD/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pCodeAudit/CodeAuditCD/text()), &quot;&apos;&quot;) cast as xs:string)
          let $query := concat( &quot;select CodeAuditCD,ProcedureCD,SuppressionIND from /shared/Delta_DV/Physical/Formatting/PackagedQueries/&quot;&quot;Group&quot;&quot;/pkgPl_CodeAuditOverride(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
          let $CodeAuditOverride1 := composite:executeQuery($query)//result
          for $CodeAuditOverride in $CodeAuditOverride1
          return
          element procedure {
            element code {$CodeAuditOverride/ProcedureCD/text()},
            element suppressionIndicator {$CodeAuditOverride/SuppressionIND/text()}
          }
        },
        let $inputs := (if (empty($pDivision/DivisionSurrogateIDChar/text())) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pDivision/DivisionSurrogateIDChar/text()), &quot;&apos;&quot;) cast as xs:string,&quot;&apos;DIVISION&apos;&quot;,if (empty($pEffectiveDate)) then &quot;NULL&quot; else concat(concat(&quot;&apos;&quot;,$pEffectiveDate), &quot;&apos;&quot;) cast as xs:string)
        let $query := concat( &quot;select ContactTypeCD,ContactTitle,FirstName,MiddleName,LastName,NameSuffix,EffDate,EndDate,ContactLevelIND,ContactRole,ContactCategoryCD from /shared/Delta_DV/Business/Logical/&quot;&quot;Group&quot;&quot;/Procedures/prcBl_AllContactTypeByLevel(&quot;, concat( string-join($inputs,&quot;,&quot;), &quot;)&quot;))
        let $DivisionContact1 := composite:executeQuery($query)//result
        for $DivisionContact in $DivisionContact1
        return
        element contact {
          element code {$DivisionContact/ContactTypeCD/text()},
          element title {$DivisionContact/ContactTitle/text()},
          element firstName {$DivisionContact/FirstName/text()},
          element middleName {$DivisionContact/MiddleName/text()},
          element lastName {$DivisionContact/LastName/text()},
          element nameSuffix {$DivisionContact/NameSuffix/text()},
          element effectiveDate {$DivisionContact/EffDate/text()},
          element endDate {$DivisionContact/EndDate/text()},
          element whoTypeIndicator {$DivisionContact/ContactLevelIND/text()},
          element role {$DivisionContact/ContactRole/text()},
          element categoryCd {$DivisionContact/ContactCategoryCD/text()}
        }
      }
    }
  )
  return
  $nodes[1]
}&lt;/root&gt;/group</attribute>
  <attribute name="xqueryModel" type="BYTE_ARRAY"></attribute>
</metadata>