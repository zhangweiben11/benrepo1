<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="SimpleBinaryAND" path="/shared/Delta_DV/_scripts/Utilities/activedirectory/SimpleBinaryAND" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[SimpleBinaryAND:

  Accepts a BIGINT and a power of 2 (e.g. 2, 4, 8, etc.) and ANDs the two numbers 
  to indicate whether the bit in the BIGINT at the position of the power of 2 is 
  1 or 0. It is a simple function originally created for determining whether or 
  not an Active Directory user is enabled or disabled, which is stored in a bit 
  mask in Active Directory. The function works for numbers 2 ^ 31 and smaller. 


&#x9;Input:
&#x9;&#x9;Num - A BIGINT value  
&#x9;&#x9;&#x9;Values: Any integer value up to 2 ^ 31

&#x9;&#x9;PowerOfTwo - The position of the bit to be examined.  
&#x9;&#x9;&#x9;Values: 0 to 31


&#x9;Output:
&#x9;&#x9;Result - The value of the bit at the input position
&#x9;&#x9;&#x9;Values: 1 or 0


&#x9;Exceptions:
    /shared/Utilities/activedirectory/SimpleBinaryAND.NumberTooLarge - Thrown if
       the input value &quot;Num&quot; is larger than 2 ^ 31.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;10/18/2010&#x9;&#x9;Gordon Rose&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="Num" direction="IN" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
    <parameter name="PowerOfTwo" direction="IN" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
    <parameter name="Result" direction="OUT" nullable="true">
      <datatype name="BIGINT" type="INTEGER"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <attribute name="Script" type="STRING">/* 
  SimpleBinaryAND:

  Accepts a BIGINT and a power of 2 (e.g. 2, 4, 8, etc.) and ANDs the two numbers 
  to indicate whether the bit in the BIGINT at the position of the power of 2 is 
  1 or 0. It is a simple function originally created for determining whether or 
  not an Active Directory user is enabled or disabled, which is stored in a bit 
  mask in Active Directory. The function works for numbers 2 ^ 31 and smaller. 


&#x9;Input:
&#x9;&#x9;Num - A BIGINT value  
&#x9;&#x9;&#x9;Values: Any integer value up to 2 ^ 31

&#x9;&#x9;PowerOfTwo - The position of the bit to be examined.  
&#x9;&#x9;&#x9;Values: 0 to 31


&#x9;Output:
&#x9;&#x9;Result - The value of the bit at the input position
&#x9;&#x9;&#x9;Values: 1 or 0


&#x9;Exceptions:
    /shared/Utilities/activedirectory/SimpleBinaryAND.NumberTooLarge - Thrown if
       the input value &quot;Num&quot; is larger than 2 ^ 31.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;10/18/2010&#x9;&#x9;Gordon Rose&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE SimpleBinaryAND(
  IN Num bigint,
  IN PowerOfTwo bigint,
  OUT Result bigint
)
BEGIN
  
  /*

  Note, this was originally created for use with active directory to determine
  if an account were disabled or not. The recipe is

  case ... 
      -- the second bit in the userAccountControl bitmask indicates account is disabled if bit is on
      -- second arg is the power of two, as in 2 = 2 ^ 1, where the first bit is 0, making 1 the second bit
      when SimpleBinaryAND(userAccountControl, 2) = 2 then
        &apos;TRUE&apos;
      else
        &apos;FALSE&apos;
    end accountIsDisabled

  */

  declare PUBLIC NumberTooLarge EXCEPTION;
  declare i bigint;
  declare temp bigint;
  declare Pwr bigint;

  -- We&apos;ll only handle 32-bits. We test 2 ^ 31 as first power is 0.
  if Num &gt; power(2, 31) then
    raise NumberTooLarge value &apos;This function operates on a maximum of 32-bits&apos;;
  end if;

  set temp = Num;
  set Result = 0;
  
  set i = 31;
  DoLoop:
  While i &gt;= 0 Do

    set Pwr = cast(power(2, i) as bigint);

    if Pwr &gt; PowerOfTwo then
      if temp &gt;= Pwr then     
        set temp = temp - Pwr; 
        if temp = 0 then
          -- no need to look further 
          leave DoLoop;
        end if;
      End If;        
    else
      -- as we&apos;re decrementing i, then Pwr must = PowerOfTwo here
      if temp &gt;= Pwr then 
--        set Result = PowerOfTwo;
        set Result = 1;
      else 
        set Result = 0;
      end if; 
      leave DoLoop;
    end if;

    set i = i - 1;
    iterate DoLoop;

  End While;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609896176534</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="public_exceptions" type="STRING_ARRAY">
    <item>NumberTooLarge</item>
  </attribute>
  <attribute name="references" type="NULL"/>
</metadata>