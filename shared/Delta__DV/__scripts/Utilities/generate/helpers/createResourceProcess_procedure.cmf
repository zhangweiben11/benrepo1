<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="createResourceProcess" path="/shared/Delta_DV/_scripts/Utilities/generate/helpers/createResourceProcess" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[createResourceProcess:

&#x9;The is a helper procedure which is used to manage the creation of the folder and views 
&#x9;&#x9;within the Data Abstraction Best Practices layers.  It is invoked by generateViews().

&#x9;Input:
&#x9;&#x9;IN parentLayerType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent path.
&#x9;&#x9;IN sourcePath &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- The full source resource path.
&#x9;&#x9;IN sourceType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The source type.  May be DATA_SOURCE or CONTAINER.
&#x9;&#x9;IN targetPath &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- The target path.  This will always be a path of type CONTAINER.
&#x9;&#x9;IN tableNames &#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;When NULL, all tables for the schema are introspected.
&#x9;&#x9;IN separator&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;The separator value should not exist within the table or procedure names.
&#x9;&#x9;IN tablePrefix &#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
&#x9;&#x9;IN tableQualifier&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
&#x9;&#x9;IN overwrite&#x9;&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
&#x9;&#x9;IN copyAnnotation&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy table and column annotations. 0=do not copy
&#x9;&#x9;IN copySqlIndexes&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy SQL indexes from source to target.  0=do not copy 
&#x9;&#x9;IN copyForeignKeys&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy foreign keys from source to target.  0=do not copy
&#x9;&#x9;IN inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on, N=debug off, null=N

&#x9;Output: 
&#x9;&#x9;OUT numCreated&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of views created
&#x9;&#x9;OUT numUpdated&#x9;&#x9;&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- The number of views updated
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (&#x9;&#x9;&#x9;-- A cursor of results for each row created or updated
&#x9;&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
&#x9;&#x9;&#x9;layerType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
&#x9;&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the resource.
&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path to the resource.
&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the resource.
&#x9;&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the resource.
&#x9;&#x9;&#x9;parentLineageLayerType&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent resource according to the lineage.
&#x9;&#x9;&#x9;parentLineagePath&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path of the parent resource according to the lineage.
&#x9;&#x9;&#x9;metadataLineageName&#x9;&#x9;LONGVARCHAR,&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;&#x9;metadataLineagePath&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;)

&#x9;Exception: may throw exceptions if input is not valid.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.2&#x9;&#x9;04/14/2014&#x9;&#x9;Venky Madireddi&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Created new
&#x9;2018.100&#x9;01/10/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted and modified for a more complete view generation.
&#x9;2019.200&#x9;05/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified call from copyResourcesPrivileges to copyResourcesPrivilegesV2 to remove VECTOR usage.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="parentLayerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="layerType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="sourcePathIn" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="targetPathIn" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="tableNames" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tablePrefix" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="tableQualifier" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="overwrite" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copyAnnotation" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copySqlIndexes" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="copyForeignKeys" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="numCreated" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="numUpdated" direction="OUT" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="actionType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="layerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resPath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="resType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentLineageLayerType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="parentLineagePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="metadataLineageName">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="metadataLineagePath">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/copyResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inSourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="inDestPath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="inDestType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/copyResourcesPrivilegesV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCopyPrivilegeEntries" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_SQL_TABLE_FOREIGNKEYS" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyTable">
            <datatype type="STRING" maxLength="4000"/>
          </element>
          <element name="foreignKeyColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="primaryKeyColumnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="sqlIndexName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexUnique">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="sqlIndexColName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlIndexColOrder">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceListChildren" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/publishResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="publishFolder" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="publishName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="publishResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateResourcesSqlTableV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inSqlIndexList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inForeignKeyList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;createResourceProcess:

&#x9;The is a helper procedure which is used to manage the creation of the folder and views 
&#x9;&#x9;within the Data Abstraction Best Practices layers.  It is invoked by generateViews().

&#x9;Input:
&#x9;&#x9;IN parentLayerType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent path.
&#x9;&#x9;IN sourcePath &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- The full source resource path.
&#x9;&#x9;IN sourceType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The source type.  May be DATA_SOURCE or CONTAINER.
&#x9;&#x9;IN targetPath &#x9;&#x9;&#x9;&#x9;VARCHAR(32768),&#x9;-- The target path.  This will always be a path of type CONTAINER.
&#x9;&#x9;IN tableNames &#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;When NULL, all tables for the schema are introspected.
&#x9;&#x9;IN separator&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;The separator value should not exist within the table or procedure names.
&#x9;&#x9;IN tablePrefix &#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
&#x9;&#x9;IN tableQualifier&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
&#x9;&#x9;IN overwrite&#x9;&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
&#x9;&#x9;IN copyAnnotation&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy table and column annotations. 0=do not copy
&#x9;&#x9;IN copySqlIndexes&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy SQL indexes from source to target.  0=do not copy 
&#x9;&#x9;IN copyForeignKeys&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy foreign keys from source to target.  0=do not copy
&#x9;&#x9;IN inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on, N=debug off, null=N

&#x9;Output: 
&#x9;&#x9;OUT numCreated&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The number of views created
&#x9;&#x9;OUT numUpdated&#x9;&#x9;&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- The number of views updated
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (&#x9;&#x9;&#x9;-- A cursor of results for each row created or updated
&#x9;&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
&#x9;&#x9;&#x9;layerType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
&#x9;&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the resource.
&#x9;&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path to the resource.
&#x9;&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the resource.
&#x9;&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the resource.
&#x9;&#x9;&#x9;parentLineageLayerType&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent resource according to the lineage.
&#x9;&#x9;&#x9;parentLineagePath&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path of the parent resource according to the lineage.
&#x9;&#x9;&#x9;metadataLineageName&#x9;&#x9;LONGVARCHAR,&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;&#x9;metadataLineagePath&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;)

&#x9;Exception: may throw exceptions if input is not valid.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.2&#x9;&#x9;04/14/2014&#x9;&#x9;Venky Madireddi&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Created new
&#x9;2018.100&#x9;01/10/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Adapted and modified for a more complete view generation.
&#x9;2019.200&#x9;05/14/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified call from copyResourcesPrivileges to copyResourcesPrivilegesV2 to remove VECTOR usage.
&#x9;2019.400&#x9;10/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Replace the foreign key table reference from the source path to the target path.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE createResourceProcess
(
&#x9;IN  parentLayerType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent path.
&#x9;IN  layerType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type.  e.g. FORMATTING, BUSINESS, APPLICATION, PUBLISHED
&#x9;IN  sourcePathIn&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full source path.
&#x9;IN  sourceType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The source type.  May be DATA_SOURCE or CONTAINER.
&#x9;IN  targetPathIn&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The target path.  This will always be a path of type CONTAINER.
&#x9;IN  tableNames &#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- optional.  NULL=no specified table list OR one or more comma separated tables to introspect.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;When NULL, all tables for the schema are introspected.
&#x9;IN&#x9;separator&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Default=,  The separator used to separate lists for the input parameters: tableNames and procedureNames
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;The separator value should not exist within the table or procedure names.
&#x9;IN  tablePrefix &#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be prefixed to the table.  If null then no value is prefixed.  e.g. V_
&#x9;IN  tableQualifier&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- A value to be added as a table qualifer.  It goes after the prefix but before the table name.  If null then no value is added.
&#x9;IN  overwrite&#x9;&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=overwrite the resouce if it exists. 0=do not overwrite the resource.
&#x9;IN  copyAnnotation&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy table and column annotations. 0=do not copy
&#x9;IN  copySqlIndexes&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy SQL indexes from source to target.  0=do not copy 
&#x9;IN  copyForeignKeys&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;-- 1=copy foreign keys from source to target.  0=do not copy
&#x9;IN  inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on, N=debug off, null=N
&#x9;OUT numCreated&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- Number of new views created
&#x9;OUT numUpdated&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- Numbrer of existing views updated
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (&#x9;&#x9;&#x9;-- A cursor of results for each row created or updated
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
&#x9;&#x9;layerType&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the resource.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path to the resource.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the resource.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the resource.
&#x9;&#x9;parentLineageLayerType&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent resource according to the lineage.
&#x9;&#x9;parentLineagePath&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path of the parent resource according to the lineage.
&#x9;&#x9;metadataLineageName&#x9;&#x9;LONGVARCHAR,&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;metadataLineagePath&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Placeholder for generateViews - always null.
&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;createResourceProcess&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT NVL(UPPER(inDebug), &apos;N&apos;);
&#x9;DECLARE sep&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT NVL(separator, &apos;,&apos;);
&#x9;DECLARE sourcePath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT TRIM(sourcePathIn);
&#x9;DECLARE targetPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT TRIM(targetPathIn);
&#x9;DECLARE ScriptUpdatePath&#x9;&#x9;&#x9;VARCHAR(32768);
&#x9;DECLARE SQLScript &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(32768);
&#x9;DECLARE Res_Target_Full_Path_Name &#x9;VARCHAR(32768);
&#x9;DECLARE Res_Name&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE Resource_Exists &#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE Table_Names&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT null;
&#x9;DECLARE Tab_Prefix &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE Tab_Qualifier&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE copyPrivilegeEntry&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlIndexList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlIndexNamePrev&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE TYPE sqlIndexType&#x9;&#x9;&#x9;ROW (
        sqlIndexName &#x9;VARCHAR(255), 
        sqlIndexType &#x9;VARCHAR(255), 
        sqlIndexUnique &#x9;VARCHAR(255), 
        sqlIndexColName VARCHAR(255), 
        sqlIndexColOrder VARCHAR(255)
        );
&#x9;DECLARE sqlIndexRec&#x9;&#x9;&#x9;&#x9;&#x9;sqlIndexType;
&#x9;DECLARE sqlIndexRecPrev&#x9;&#x9;&#x9;&#x9;sqlIndexType;
&#x9;DECLARE foreignKeyList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE TYPE foreignKeyType&#x9;&#x9;&#x9;ROW (
        fkName &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
        primaryKeyName &#x9;&#x9;&#x9;VARCHAR(255), 
        primaryKeyTable &#x9;&#x9;VARCHAR(4000), 
        foreignKeyColumnName &#x9;VARCHAR(255), 
        primaryKeyColumnName &#x9;VARCHAR(255)
        );
&#x9;DECLARE foreignKeyRec&#x9;&#x9;&#x9;&#x9;foreignKeyType;
&#x9;DECLARE foreignKeyRecPrev&#x9;&#x9;&#x9;foreignKeyType;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse &#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE TYPE resultType&#x9;&#x9;&#x9;&#x9;ROW (&#x9;&#x9;&#x9;-- A row type to capture results for each row created or updated
&#x9;&#x9;actionType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The action taken for this resource:  CREATED, OVERWRITTEN, SKIPPED [EXISTS].
&#x9;&#x9;layerType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type that the view is being generated in:  METADATA, FORMATTING, BUSINESS, APPLICATION, PUBLISHED.
&#x9;&#x9;resName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the resource.
&#x9;&#x9;resPath&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path to the resource.
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The type of the resource.
&#x9;&#x9;subtype&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The subtype of the resource.
&#x9;&#x9;parentLineageLayerType&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The layer type of the parent resource according to the lineage.
&#x9;&#x9;parentLineagePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The full path of the parent resource according to the lineage.
&#x9;&#x9;metadataLineageName&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- Placeholder for generateViews - always null.
&#x9;&#x9;metadataLineagePath&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Placeholder for generateViews - always null.
&#x9;);
&#x9;DECLARE resultRec&#x9;&#x9;&#x9;&#x9;&#x9;resultType;

&#x9;-- Remove any white space and / at the end if exists.
&#x9;IF (SUBSTRING(sourcePath, LENGTH(sourcePath), 1) = &apos;/&apos;) THEN
&#x9;&#x9;SET sourcePath = SUBSTRING(sourcePath, 1, LENGTH(sourcePath)-1);
&#x9;END IF;
&#x9;-- Remove any white space and / at the end if exists.
&#x9;IF (SUBSTRING(targetPath, LENGTH(targetPath), 1) = &apos;/&apos;) THEN
&#x9;&#x9;SET targetPath = SUBSTRING(targetPath, 1, LENGTH(targetPath)-1);
&#x9;END IF;
&#x9;-- Set default values
&#x9;SET numCreated = 0;
&#x9;SET numUpdated = 0;
&#x9;-- Enclose the table name list with separators on each side for searching purposes
&#x9;IF (tableNames IS NOT NULL AND LENGTH(tableNames) &gt; 0) THEN
&#x9;&#x9;SET Table_Names = sep||tableNames||sep;
&#x9;END IF;

&#x9;-- Assign the table prefix
&#x9;IF tablePrefix is not null THEN
&#x9;&#x9;SET Tab_Prefix = tablePrefix;
&#x9;END IF;
&#x9;-- Assign the table qualifer
&#x9;IF tableQualifier is not null THEN
&#x9;&#x9;SET Tab_Qualifier = tableQualifier;
&#x9;END IF;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  INPUT:&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    SOURCE PATH=[&apos;||NVL(sourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    SOURCE TYPE=[&apos;||NVL(sourceType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    TARTGET PATH=[&apos;||NVL(targetPath,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    TABLENAMES=[&apos;||NVL(tableNames,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    SEPARATOR=[&apos;||NVL(sep,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    PREFIX=[&apos;||NVL(tablePrefix,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    QUALIFIER=[&apos;||NVL(tableQualifier,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    OVERWRITRE=[&apos;||NVL(CAST(overwrite AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY ANNOTATION=[&apos;||NVL(CAST(copyAnnotation AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY SQL INDEXES=[&apos;||NVL(CAST(copySqlIndexes AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;    COPY FOREIGN KEYS=[&apos;||NVL(CAST(copyForeignKeys AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;

&#x9;-- Check to see if the target path exists
&#x9;CALL /lib/resource/ResourceExists(targetPath, &apos;CONTAINER&apos;, null, Resource_Exists);
&#x9;IF (NOT Resource_Exists) THEN 
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createAllFoldersPrivileges(targetPath, 1, 1, success, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;END;
&#x9;END IF;

&#x9;-- Loop through the source path resources and create them in the target path
&#x9;FOR r AS SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListChildren(sourcePath, sourceType) DO
&#x9;&#x9;--CALL PRINT (moduleName||&apos; :     &apos;||r.name ||&apos; DISCOVERED&apos;);

&#x9;&#x9;-- If the resource is a table and the resource is in the table list or the table list is null then generate the view
&#x9;&#x9;IF (r.resType = &apos;TABLE&apos; AND ((Table_Names IS NOT NULL AND INSTR(Table_Names, sep||r.name||sep) &gt; 0) OR (Table_Names IS NULL))) THEN
&#x9;&#x9;&#x9;SET Res_Target_Full_Path_Name = targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name;
&#x9;&#x9;&#x9;SET resultRec.resName = Tab_Prefix||Tab_Qualifier||r.name;
&#x9;&#x9;&#x9;SET resultRec.resPath = Res_Target_Full_Path_Name;
&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;UNKNOWN&apos;;
&#x9;&#x9;&#x9;SET resultRec.layerType = layerType;
&#x9;&#x9;&#x9;SET resultRec.parentLineageLayerType = parentLayerType;
&#x9;&#x9;&#x9;SET resultRec.parentLineagePath = sourcePath||&apos;/&apos;||r.name;
&#x9;&#x9;&#x9;SET resultRec.metadataLineageName = null;
&#x9;&#x9;&#x9;SET resultRec.metadataLineagePath = null;

&#x9;&#x9;&#x9;-- Determine if the target resource is to be published
&#x9;&#x9;&#x9;IF (INSTR(Res_Target_Full_Path_Name, &apos;/services/databases/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET resultRec.resType = &apos;LINK&apos;;
&#x9;&#x9;&#x9;&#x9;SET resultRec.subtype = &apos;NONE&apos;;

&#x9;&#x9;&#x9;&#x9;-- Verify if the resources exists
&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(Res_Target_Full_Path_Name, &apos;LINK&apos;, null, Resource_Exists);
&#x9;&#x9;&#x9;&#x9;IF (NOT Resource_Exists OR (Resource_Exists AND overwrite = 1)) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT Resource_Exists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCreated = numCreated + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numUpdated = numUpdated + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (Resource_Exists and overwrite = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(targetPath,Tab_Prefix||Tab_Qualifier||r.name,&apos;LINK&apos;,success,createResponse,faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (faultResponse is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value  moduleName||&apos;: &apos;||CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the published resource link
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/publishResource(r.resPath, r.resType, targetPath, Tab_Prefix||Tab_Qualifier||r.name, null, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (faultResponse is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;: &apos;||CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the privileges on the resource using the parent folder privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set copyPrivilegeEntry = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;LINK&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the procedure to apply privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;param1=updatePrivilegesRecursively, param2=copyPrivilegeMode, param3=copyPrivilegeEntry XML
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/copyResourcesPrivilegesV2(0, 1, copyPrivilegeEntry, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Copy the table annotation
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (copyAnnotation IS NOT NULL AND copyAnnotation = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/copyResourceAnnotations(sourcePath||&apos;/&apos;||r.name, r.resType, targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, &apos;LINK&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (Resource_Exists AND overwrite = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;OVERWRITTEN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;CREATED&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;SKIPPED [EXISTS]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES (resultRec);
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET resultRec.resType = &apos;TABLE&apos;;
&#x9;&#x9;&#x9;&#x9;SET resultRec.subtype = &apos;SQL_TABLE&apos;;

&#x9;&#x9;&#x9;&#x9;-- Verify if the resource exists
&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(Res_Target_Full_Path_Name, r.resType, null, Resource_Exists);
&#x9;&#x9;&#x9;&#x9;IF (NOT Resource_Exists OR (Resource_Exists AND overwrite = 1)) THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT Resource_Exists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createResource(targetPath, Tab_Prefix||Tab_Qualifier||r.name, &apos;TABLE&apos;, &apos;SQL_TABLE&apos;,success,createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numCreated = numCreated + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numUpdated = numUpdated + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Maps the Views with the below Layer table script
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, NULL, ScriptUpdatePath);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sourcePath||&apos;/&apos;||r.name, NULL, Res_Target_Full_Path_Name);
&#x9;&#x9;&#x9;&#x9;&#x9;SET SQLScript= &apos;select * from &apos; ||Res_Target_Full_Path_Name;

/*
&#x9;SET sqlIndexList =
&#x9;&#x9;&apos;        &lt;resource:sqlIndexes&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;            &lt;resource:index&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:type&gt;&apos;||CAST(XMLTEXT(sqlIndexType) AS LONGVARCHAR)||&apos;&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:unique&gt;&apos;||CAST(XMLTEXT(sqlIndexUnique) AS LONGVARCHAR)||&apos;&lt;/resource:unique&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:order&gt;&apos;||CAST(XMLTEXT(sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10)||
&#x9;&#x9;-- If it is a multi-column key then add more &lt;column&gt; nodes here:
&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:order&gt;&apos;||CAST(XMLTEXT(sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10)||

&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;            &lt;/resource:index&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;        &lt;/resource:sqlIndexes&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;&apos;;
*/
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the SQL Indexes from the source resource
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (copySqlIndexes IS NOT NULL AND copySqlIndexes = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexRecPrev = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList =
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;resource:sqlIndexes&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR idx AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlIndexName,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlIndexType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN sqlIndexUnique = 0 THEN &apos;false&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ELSE &apos;true&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END sqlIndexUnique,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlIndexColName,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlIndexColOrder
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE_SQLINDEXES(sourcePath||&apos;/&apos;||r.name, r.resType) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexRec = idx;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (sqlIndexRecPrev IS NULL OR sqlIndexRec.sqlIndexName &lt;&gt; sqlIndexRecPrev.sqlIndexName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (i &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Close out the previous index
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList = sqlIndexList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;/resource:index&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList = sqlIndexList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:index&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:type&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexType) AS LONGVARCHAR)||&apos;&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:unique&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexUnique) AS LONGVARCHAR)||&apos;&lt;/resource:unique&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:order&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList = sqlIndexList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:name&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexColName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:order&gt;&apos;||CAST(XMLTEXT(sqlIndexRec.sqlIndexColOrder) AS LONGVARCHAR)||&apos;&lt;/resource:order&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10);

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name||&apos;  SQL Index i=&apos;||i);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexName=&apos;||NVL(sqlIndexRec.sqlIndexName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexType=&apos;||NVL(sqlIndexRec.sqlIndexType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexUnique=&apos;||NVL(CAST(sqlIndexRec.sqlIndexUnique AS VARCHAR),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexColName=&apos;||NVL(sqlIndexRec.sqlIndexColName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     sqlIndexColOrder=&apos;||NVL(sqlIndexRec.sqlIndexColOrder,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexRecPrev = sqlIndexRec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (i = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlIndexList = sqlIndexList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;/resource:index&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;/resource:sqlIndexes&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;
/*
&#x9;SET foreignKeyList =
&#x9;&#x9;&apos;        &lt;resource:sqlForeignKeys&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;            &lt;resource:foreignKey&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:name&gt;&apos;||CAST(XMLTEXT(fkName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:primaryKeyName&gt;&apos;||CAST(XMLTEXT(fkPrimaryKeyName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:primaryKeyTable&gt;&apos;||CAST(XMLTEXT(fkPrimaryKeyTable) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyTable&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                &lt;resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:foreignKeyColumnName&gt;&apos;||CAST(XMLTEXT(fkForeignKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:foreignKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:primaryKeyColumnName&gt;&apos;||CAST(XMLTEXT(fkPrimaryKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10)||
&#x9;&#x9;-- If multiple foreign key columns then add more &lt;column&gt; nodes here:
&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:foreignKeyColumnName&gt;&apos;||CAST(XMLTEXT(fkForeignKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:foreignKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                        &lt;resource:primaryKeyColumnName&gt;&apos;||CAST(XMLTEXT(fkPrimaryKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10)||

&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;            &lt;/resource:foreignKey&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;        &lt;/resource:sqlForeignKeys&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;&apos;;
*/
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the Foreign Keys from the source resource
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (copyForeignKeys IS NOT NULL AND copyForeignKeys = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList =
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;resource:sqlForeignKeys&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR fk AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE_FOREIGNKEYS(sourcePath||&apos;/&apos;||r.name, r.resType) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyRec = fk;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the foreign key table reference from the source path to the target path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyRec.primaryKeyTable = REPLACE(foreignKeyRec.primaryKeyTable, sourcePath, targetPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (foreignKeyRecPrev IS NULL OR foreignKeyRec.fkName &lt;&gt; foreignKeyRecPrev.fkName) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (i &gt; 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Close out the previous foreign key
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList = foreignKeyList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;/resource:foreignKey&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList = foreignKeyList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:foreignKey&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:name&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.fkName) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:primaryKeyName&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.primaryKeyName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:primaryKeyTable&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.primaryKeyTable) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyTable&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:foreignKeyColumnName&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.foreignKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:foreignKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:primaryKeyColumnName&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.primaryKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList = foreignKeyList ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:foreignKeyColumnName&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.foreignKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:foreignKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                        &lt;resource:primaryKeyColumnName&gt;&apos;||CAST(XMLTEXT(foreignKeyRec.primaryKeyColumnName) AS LONGVARCHAR)||&apos;&lt;/resource:primaryKeyColumnName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;/column&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF; 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name||&apos;  Foreign Key i=&apos;||i);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkName=&apos;||NVL(foreignKeyRec.fkName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyName=&apos;||NVL(foreignKeyRec.primaryKeyName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyTable=&apos;||NVL(foreignKeyRec.primaryKeyTable,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkForeignKeyColumnName=&apos;||NVL(foreignKeyRec.foreignKeyColumnName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;     fkPrimaryKeyColumnName=&apos;||NVL(foreignKeyRec.primaryKeyColumnName,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyRecPrev = foreignKeyRec;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (i = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET foreignKeyList = foreignKeyList || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;                &lt;/resource:columns&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;/resource:foreignKey&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;/resource:sqlForeignKeys&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the resource table
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateResourcesSqlTableV2(ScriptUpdatePath, SQLScript, null, null, sqlIndexList, foreignKeyList, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the privileges on the resource using the parent folder privileges
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set copyPrivilegeEntry = 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;CONTAINER&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:srcResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:path&gt;&apos; || CAST(XMLTEXT(targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      &lt;resource:type&gt;TABLE&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;/resource:dstResource&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  &lt;/resource:copyPrivilegeEntry&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the procedure to apply privileges
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;param1=updatePrivilegesRecursively, param2=copyPrivilegeMode, param3=copyPrivilegeEntry XML
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/copyResourcesPrivilegesV2(0, 1, copyPrivilegeEntry, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Copy the table and column annotation
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (copyAnnotation IS NOT NULL AND copyAnnotation = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/copyResourceAnnotations(sourcePath||&apos;/&apos;||r.name, r.resType, targetPath||&apos;/&apos;||Tab_Prefix||Tab_Qualifier||r.name, &apos;TABLE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (Resource_Exists AND overwrite = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;OVERWRITTEN&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;CREATED&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET resultRec.actionType = &apos;SKIPPED [EXISTS]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT (moduleName||&apos; : &apos;||&apos;  &apos;||Tab_Prefix||Tab_Qualifier||r.name ||&apos; &apos;|| resultRec.actionType);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES (resultRec);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END FOR;
END
</attribute>
  <attribute name="creationDate" type="LONG">1398195366998</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">zk5tunx</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/179</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/551</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/485</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/190</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/483</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/484</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/481</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/556</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/482</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/480</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/294</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/189</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/188</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/289</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/187</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/186</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/181</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/397</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/398</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/395</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/396</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/185</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/393</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/184</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/394</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/183</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/182</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>