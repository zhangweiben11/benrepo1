<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="updatePrivilegesDriverInterface" path="/shared/Delta_DV/_scripts/Utilities/deployment/privilegesBestPractices/updatePrivilegesDriverInterface" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="Datasource" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Batch_Privileges" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="Environment_Name" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="Organization" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Project" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="SubProject" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Sheet_Name" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Resource_Path" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Resource_Type" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Name_" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Name_Type" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="Domain_Name" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="preview" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="forceDomainAsComposite" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1Console" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1CISLog" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1ReadOnly" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug1RevokeAll" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inDebug2" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inBypassErrors" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="logOutputResult" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* updatePrivilegesDriverInterface:

&#x9;REQUIREMENT:
&#x9;&#x9;This procedure requires Data Abstraction Best Practices to be installed
&#x9;&#x9;/shared/ASAssets/BestPractices_v81/PrivilegeScripts/updatePrivilegesDriver

&#x9;This version of the privileges update procedure allows for more fine-grained control over debug output and 
&#x9;&#x9;the ability to skip resource paths that do not exist and report the errors on them.

&#x9;This procedure is used to update privileges by reading the privileges from an excel spreadsheet - Resource_Privileges_LOAD_DB.
&#x9;&#x9;sheets: Privileges_shared &#x9;&#x9;- Update privileges for /shared
&#x9;&#x9;&#x9;    Privileges_databases &#x9;- Update privileges for /services/databases
&#x9;&#x9;&#x9;&#x9;Privileges_webservices &#x9;- Update privileges for /services/webservices

&#x9;Input:
&#x9;&#x9;Datasource&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: the datasource where the privileges are stored.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If not parameter is provided the default value is used from defaultValues.datasource.  Possible values include:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEL - Excel spreadsheet which gets uploaded to each CIS server.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DB_LLE - SQL Server database for lower level environments.  Basically it is used for testing purposes and developing new functionality.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DB_PROD - SQL Server production database.  This connection should always be used unless developing new functionality.
&#x9;&#x9;Batch_Privileges INTEGER,&#x9;&#x9;-- REQUIRED_FILTER: 1=Batch all privileges for the same path, type and recursion setting. 0=Process each spreadsheet line separately (no batching).
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the resource path in the spreadsheet changes, a batch is executed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the resource type in the spreadsheet changes, a batch is executed.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;When the recursion identifier in the spreadsheet changes, a batch is executed.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;A group of rows with like recursion may only be batched together otherwise the meaning of the privilege setting is not the same.
&#x9;&#x9;Environment_Name VARCHAR(255), &#x9;-- REQUIRED FILTER: A single value of the Composite server environment in which to get/update privileges for: Example [DEV, TEST, UAT, PROD]

Multiple parameter iterations -     For single values, DO NOT use commas.  For multiple values, DO NOT add extra commas to the end of the line.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The following parameters may contain multiple comma-separated parameters that are all coordinated with each other according to their ordinal position.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple parameters mean multiple iterations for the &quot;updatePrivilegesDriver&quot; procedure for a single invocation of this procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If there are no commas present then the parameters is only used once.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If there are commas present, then the same number of commas must be present in other parameters in order to represent the same ordinal position
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unless there are no parameters for those parameters to be passed in.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The value may be empty between commas indicating a null value.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Commas may not be present within the data values unless they are escaped with &quot;_002C&quot;.  The escape will be converted back into a comma upon processing.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;All values are trimmed [left and right] when processed.  There should not be any spaces at the end of any parameter.

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXAMPLE 1 - Here is an example of multiple projects correlated with sub-projects:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Project=&#x9;p1,p2,p3
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SubProject=&#x9;s1,,s3
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The above will result in 3 iterations of the procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iteration 1: Project=p1, SubProject=s1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iteration 2: Project=p2, SubProject=null
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iteration 3: Project=p3, SubProject=s3

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXAMPLE 2 - Here is an example of single values
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Project=&#x9;p1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SubProject=&#x9;s1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The above will result in 1 iteration of the procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Iteration 1: Project=p1, SubProject=s1

-----------------------------------------
&#x9;|&#x9;Organization&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given organization.  If left blank, all rows for the organization will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated organizations may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Project&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated projects may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;SubProject&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-project will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated sub-projects may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Sheet_Name &#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [shared, databases, webservices]
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated sub-projects may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Resource_Path &#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated resource-paths may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Resource_Type &#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated resource-types may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; CONTAINER - a folder path, a catalog or schema path.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; COLUMN - a column from a table
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; TABLE - a view in the /shared path.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; PROCEDURE a procedure in the /shared path.
&#x9;|&#x9;Name_ &#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated user/group names may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Name_Type&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: Valid values are USER or GROUP
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated name-types may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
&#x9;|&#x9;Domain_Name &#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated domain-names may be passed resulting in multiple executions of the updatePrivilegesDriver.  DO NOT ADD EXTRA COMMAS AT THE END.
-----------------------------------------
&#x9;&#x9;preview&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N or null(default)=Do not preview.  Execute the privileges.  Y=preview what will get set but don&apos;t actually execute the privileges.
&#x9;&#x9;forceDomainAsComposite &#x9;CHAR(1),-- OPTIONAL PARAM: Y=true, N=false. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
&#x9;&#x9;inDebug1&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
&#x9;&#x9;inDebug1Console&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;&#x9;inDebug1CISLog&#x9;&#x9;CHAR(1), &#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;&#x9;inDebug1ReadOnly&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for READ only messages
&#x9;&#x9;inDebug1RevokeAll&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for Revoke All messages.
&#x9;&#x9;inDebug2&#x9;&#x9;&#x9;CHAR(1),&#x9;-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
&#x9;&#x9;inBypassErrors&#x9;&#x9;CHAR(1)&#x9;&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Y=bypass resource not found errors but report them.
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- SUCCESS if no invalid paths, WARNING if 0 privileges applied.
&#x9;&#x9;logOutputResult&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Contains an iteration of the following with pipe delimiters:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;executeNum - The iteration number of this execution.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;rowStatus - SUCCESS if no invalid paths, WARNING if 0 privileges applied or a resource path was bypassed because it was NOT FOUND.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;rowsProcessed - Number of rows processed from the spreadsheet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;sqlStatement - The invocation SQL Statement with all the parameters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;logOutput - The output log that gets printed to the command line console is also output for any rows matching &apos;BYPASS **ERROR**&apos;

&#x9;Exceptions:  Exception may be thrown.

&#x9;---------------------------------------------------------------------------------
&#x9;/services/webservices/system/admin/resource/operations/updateResourcePrivileges:
&#x9;----------------------------------------------------------------------------------
&#x9;Set the privilege information for a list of resources.

&#x9;Only a user with GRANT privilege on a resource can modify the privileges for that
&#x9;resource.  The owner of a resource always has GRANT privilege, as do users with the
&#x9;MODIFY_ALL_RESOURCES right.

&#x9;When &quot;mode&quot; is &quot;OVERWRITE_APPEND&quot;, or is not supplied, privileges are applied on a
&#x9;per-user or per-group basis, so that updating privileges for one user or group does not
&#x9;alter privileges from any other user or group.  The privileges applied for a user or
&#x9;group replace the previous value for that user or group. When &quot;mode&quot; is &quot;SET_EXACTLY&quot;,
&#x9;all privileges on the resource are made to look exactly like the provided privileges.

&#x9;When &quot;updateRecursively&quot; is &quot;false&quot;, the privileges are applied only the specified
&#x9;resources.  When it is &quot;true&quot;, the privileges are recursively applied into any 
&#x9;CONTAINER or DATA_SOURCE resource specified.  When recursively applying privileges, 
&#x9;the privilege change is ignored for any resource the user lacks owner privileges for.

&#x9;Privileges that are not applicable for a given resource type are automatically stripped
&#x9;down to the set that is legal for each resource.  TABLE resources support NONE, READ,
&#x9;WRITE, SELECT, INSERT, UPDATE, and DELETE.  PROCEDURE resources support NONE, READ,
&#x9;WRITE, and EXECUTE.  All other resource types only support NONE, READ, and WRITE.

&#x9;The &quot;combinedPrivs&quot; and &quot;inheritedPrivs&quot; elements on each &quot;privilegeEntry&quot; will be
&#x9;ignored and can be left unset.

&#x9;Request Elements:
&#x9;&#x9;updateRecursively: If &quot;true&quot;, then all children of the given resources will
&#x9;&#x9;   recursively be updated with the privileges assigned to their parent.
&#x9;&#x9;updateDependenciesRecursively: If &quot;true&quot;, then all dependencies of the given resources will
&#x9;&#x9;   recursively be updated with the privileges assigned to their parent.
&#x9;&#x9;privilegeEntries: A list of resource names, types, and the privileges.
&#x9;&#x9;mode (optional): Determines whether privileges are merged with existing ones,
&#x9;&#x9;   default is &quot;OVERWRITE_APPEND&quot;, which merges and does not update privileges for
&#x9;&#x9;   users or groups not mentioned.  &quot;SET_EXACTLY&quot; makes privileges look exactly like
&#x9;&#x9;   those provided in the call.

&#x9;Response Elements:
&#x9;&#x9;N/A

&#x9;Faults:
&#x9;&#x9;IllegalArgument: If any path is malformed or any type or privilege entry is illegal,
&#x9;&#x9;   or mode is not one of the legal values.
&#x9;&#x9;NotAllowed: If an attempt is made to use this operation with an insufficient license.
&#x9;&#x9;NotFound: If a path refers to a resource that does not exist.
&#x9;&#x9;NotFound: If an unknown domain is provided.
&#x9;&#x9;NotFound: If an unknown user is provided.
&#x9;&#x9;NotFound: If an unknown group is provided.
&#x9;&#x9;Security: If for a given entry path the user does not have READ access on any item
&#x9;&#x9;   in a path other than the last item, or does not have GRANT access on the last item.
&#x9;&#x9;Security: If the user does not have the ACCESS_TOOLS right.


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.400&#x9;11/11/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Adopted from Data Abstraction Best Practices updatePrivilegesDriver.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.
*/
PROCEDURE updatePrivilegesDriverInterface(
&#x9;IN Datasource&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: the datasource where the privileges are stored.
&#x9;IN Batch_Privileges &#x9;&#x9;INTEGER,&#x9;&#x9;-- REQUIRED_FILTER: 1=Batch all privileges for the same path and type, 0=Process each spreadsheet line separately (no batching).
&#x9;IN Environment_Name &#x9;&#x9;VARCHAR(255), &#x9;-- REQUIRED FILTER: The Composite server environment in which to get/update privileges for: [DEV, TEST, UAT, PROD]
&#x9;IN Organization&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
&#x9;IN Project&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;IN SubProject&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-projects will be updated.
&#x9;IN Sheet_Name &#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [Privileges_initialize, Privileges_shared, Privileges_databases, Privileges_webservices]
&#x9;IN Resource_Path &#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;IN Resource_Type &#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  This will only be used when no &quot;Resource_Path&quot; or a single &quot;Resource_Path&quot; is provided.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--  It is not used when a list of &quot;Resource_Path&quot; entries are provided.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; CONTAINER - a folder path, a catalog or schema path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; COLUMN - a column from a table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; TABLE - a view in the /shared path.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; PROCEDURE a procedure in the /shared path.
&#x9;IN Name_ &#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
    IN Name_Type&#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: Valid values are USER or GROUP
&#x9;IN Domain_Name &#x9;&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;IN preview&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N or null(default)=Do not preview.  Execute the privileges.  Y=preview what will get set but don&apos;t actually execute the privileges.
&#x9;IN forceDomainAsComposite &#x9;CHAR(1),&#x9;&#x9;-- OPTIONAL PARAM: Y=true, N=false. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    Provides a way to force a conversion of the group from an LDAP domain name like &quot;ldap&quot; to a the &quot;composite&quot; domain.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    This is useful when setting up the privileges for testing with composite groups that mirror the LDAP groups.  This way the spreadsheet does not have to be modified.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--    For example, the LDAP group Composite_Servicing_Dev is automatically converted to the composite domain group composite_servicing_dev.
&#x9;IN inDebug1&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null=No debug, Y (default)=Debug for this procedure - basic messages
&#x9;IN inDebug1Console&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug console.  Determines whether to print the studio console window or not.
&#x9;IN inDebug1CISLog&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug log.  Determines whether to print to the CIS log or not.
&#x9;IN inDebug1ReadOnly&#x9;&#x9;&#x9;CHAR(1), &#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for READ only messages
&#x9;IN inDebug1RevokeAll&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for Revoke All messages.

&#x9;IN inDebug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N/Null (default)=No debug, Y=Debug for 2nd and 3rd tier procedures (deep debug)
&#x9;IN inBypassErrors&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Bypass errors.  Throw exception when paths not found.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   N/Null (default) Do not bypass errors.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--   Y=bypass resource not found errors but report them.
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- SUCCESS if no invalid paths, WARNING if 0 privileges applied.
&#x9;OUT logOutputResult&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- Contains an iteration of the following with pipe delimiters:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;executeNum - The iteration number of this execution.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;rowStatus - SUCCESS if no invalid paths, WARNING if 0 privileges applied or a resource path was bypassed because it was NOT FOUND.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;rowsProcessed - Number of rows processed from the spreadsheet
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;sqlStatement - The invocation SQL Statement with all the parameters
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;logOutput - The output log that gets printed to the command line console is also output for any rows matching &apos;BYPASS **ERROR**&apos;
)
BEGIN
&#x9;DECLARE resourcePath&#x9;&#x9;VARCHAR(1000) DEFAULT &apos;/shared/ASAssets/BestPractices_v81/PrivilegeScripts/updatePrivilegesDriver&apos;;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE curs&#x9;&#x9;&#x9;&#x9;CURSOR (rowsProcessed INTEGER, logOutput LONGVARCHAR);
&#x9;DECLARE TYPE pType&#x9;&#x9;&#x9;ROW (
&#x9;&#x9;Organization&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
&#x9;&#x9;Project&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;&#x9;SubProject&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-projects will be updated.
&#x9;&#x9;Sheet_Name &#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [Privileges_initialize, Privileges_shared, Privileges_databases, Privileges_webservices]
&#x9;&#x9;Resource_Path &#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;&#x9;Resource_Type &#x9;&#x9;&#x9;VARCHAR(255),&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;&#x9;Name_ &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
&#x9;&#x9;Name_Type&#x9;&#x9;&#x9;&#x9;VARCHAR(255), &#x9;-- OPTIONAL FILTER: Valid values are USER or GROUP
&#x9;&#x9;Domain_Name &#x9;&#x9;&#x9;VARCHAR(255) &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;);
&#x9;DECLARE pRec&#x9;&#x9;&#x9;&#x9;pType;
&#x9;DECLARE pVect&#x9;&#x9;&#x9;&#x9;VECTOR(pType) DEFAULT VECTOR[];&#x9;
&#x9;DECLARE pVectSize&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE i, pos1, pos2, len&#x9;INTEGER;
&#x9;DECLARE inputStr&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE rowStatus&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE rowsProcessed&#x9;&#x9;INTEGER;
&#x9;DECLARE logOutput&#x9;&#x9;&#x9;LONGVARCHAR;&#x9;
/*
&#x9;|&#x9;Organization&#x9;VARCHAR(255),&#x9;-- RECOMMENDED FILTER: The name of the organization such as ORG1 or ORG2
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given organization.  If left blank, all rows for the organization will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated organizations may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Project&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given project.  If left blank, all projects will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated projects may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;SubProject&#x9;&#x9;LONGVARCHAR,&#x9;-- RECOMMENDED FILTER: The name of the sub-project that is hosted on CIS for this &quot;Env Type&quot;.  
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;This provides a filter for only applying privileges for the given sub-project.  If left blank, all rows for the sub-project will be updated.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated sub-projects may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Sheet_Name &#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The name of the Excel spreadsheet in which to get/update privileges from: [shared, databases, webservices]
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated sub-projects may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Resource_Path &#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource path in which to get/update privileges.  It may contain a wildcard &quot;%&quot;.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated resource-paths may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Resource_Type &#x9;LONGVARCHAR,&#x9;-- OPTIONAL FILTER: The resource type in which to get/update privileges.  It is always upper case. 
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated resource-types may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;E.g. DATA_SOURCE - a published datasource or physical metadata datasource.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; CONTAINER - a folder path, a catalog or schema path.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; COLUMN - a column from a table
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; LINK - a published table or procedure.  If it resides in the path /services and points to a TABLE or PROCEDURE then it is a LINK.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; TABLE - a view in the /shared path.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9; PROCEDURE a procedure in the /shared path.
&#x9;|&#x9;Name_ &#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The user/group name in which to get/update privileges.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated user/group names may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Name_Type&#x9;&#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: Valid values are USER or GROUP
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated name-types may be passed resulting in multiple executions of the updatePrivilegesDriver.
&#x9;|&#x9;Domain_Name &#x9;LONGVARCHAR, &#x9;-- OPTIONAL FILTER: The domain name in which to get/update privileges.
&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Multiple comma-separated domain-names may be passed resulting in multiple executions of the updatePrivilegesDriver.
*/
&#x9;-- Process the Organization parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Organization);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Organization = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Organization = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Project parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Project);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Project = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Project = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the SubProject parameter for single or multiple columns
&#x9;SET inputStr = TRIM(SubProject);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].SubProject = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].SubProject = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Sheet_Name parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Sheet_Name);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Sheet_Name = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Sheet_Name = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Resource_Path parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Resource_Path);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Resource_Path = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Resource_Path = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Resource_Type parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Resource_Type);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Resource_Type = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Resource_Type = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Name_ parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Name_);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Name_ = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Name_ = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Name_Type parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Name_Type);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Name_Type = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Name_Type = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Process the Domain_Name parameter for single or multiple columns
&#x9;SET inputStr = TRIM(Domain_Name);
&#x9;IF (inputStr IS NOT NULL AND LENGTH(inputStr) &gt; 0) THEN
&#x9;&#x9;SET i = 0;
&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;);
&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;--CALL print(&apos;i=&apos;||i||&apos;  pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;&#x9;IF (i &gt; pVectSize) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect = EXTEND(pVect, 1);
&#x9;&#x9;&#x9;&#x9;SET pVectSize = pVectSize + 1;
&#x9;&#x9;&#x9;&#x9;--CALL print(&apos;Extending pVect. pVectSize=&apos;||pVectSize); 
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pVect[i].Domain_Name = null;
&#x9;&#x9;&#x9;IF ((pos2-pos1) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET pVect[i].Domain_Name = TRIM(SUBSTRING(inputStr, pos1, pos2-pos1));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(inputStr||&apos;,&apos;, &apos;,&apos;, pos1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;-- Begin assignment of the SQL Statement and execute it.
&#x9;SET result = &apos;SUCCESS&apos;;
&#x9;SET logOutputResult = &apos;&apos;;
&#x9;SET i = 1;
&#x9;WHILE (i &lt;= CARDINALITY(pVect)) DO&#x9; 
&#x9;&#x9;SET pRec = pVect[i];
&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&apos;SELECT * FROM &apos;||resourcePath||&apos;(&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(Datasource,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;     NVL(CAST(Batch_Privileges AS VARCHAR),&apos;1&apos;)||&apos;,&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(Environment_Name,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Organization,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Project,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.SubProject,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Sheet_Name,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Resource_Path,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Resource_Type,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Name_,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Name_Type,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(pRec.Domain_Name,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(preview,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(forceDomainAsComposite,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug1,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug1Console,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug1CISLog,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug1ReadOnly,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug1RevokeAll,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inDebug2,&apos;null&apos;)||&apos;],&apos;||
&#x9;&#x9;&#x9;&apos;[&apos;||NVL(inBypassErrors,&apos;null&apos;)||&apos;]&apos;||
&#x9;&#x9;&apos;)&apos;;
&#x9;&#x9;SET sqlStatement = REPLACE(sqlStatement, &apos;[null]&apos;, &apos;null&apos;);
&#x9;&#x9;SET sqlStatement = REPLACE(REPLACE(sqlStatement, &apos;[&apos;, &apos;&apos;&apos;&apos;), &apos;]&apos;, &apos;&apos;&apos;&apos;);

&#x9;&#x9;-- Initialize loop variables.
&#x9;&#x9;SET rowStatus = &apos;SUCCESS&apos;;
&#x9;&#x9;SET rowsProcessed = 0;
&#x9;&#x9;SET logOutput = &apos;&apos;;

&#x9;&#x9;-- Execute the dynamic SQL Statement
&#x9;&#x9;OPEN curs FOR sqlStatement;
&#x9;&#x9;FOR r AS curs DO
&#x9;&#x9;&#x9;SET rowsProcessed = r.rowsProcessed;
&#x9;&#x9;&#x9;IF (INSTR(r.logOutput, &apos;BYPASS **ERROR**&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET rowStatus = &apos;WARNING&apos;;
&#x9;&#x9;&#x9;&#x9;FOR log AS 
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT textExpression logLine FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(r.logOutput, &apos;|&apos;, 0,0,0,0,1)
&#x9;&#x9;&#x9;&#x9;&#x9;WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(log.logLine, &apos;BYPASS **ERROR**&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET logOutput = logOutput || &apos;logOutput=&apos;||log.logLine || &apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET logOutput = &apos;logOutput=SUCCESS&apos; || &apos;|&apos;;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;&#x9;IF (rowsProcessed = 0 OR rowStatus = &apos;WARNING&apos;) THEN
&#x9;&#x9;&#x9;SET result = &apos;WARNING&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Concatenate the logOutput
&#x9;&#x9;SET logOutputResult = logOutputResult || &apos;executeNum=&apos;||i || &apos;|&apos; || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &apos;rowStatus=&apos;||rowStatus || &apos;|&apos; || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &apos;rowsProcessed=&apos;||rowsProcessed || &apos;|&apos; || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &apos;sqlStatement=&apos;||sqlStatement || &apos;|&apos; || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; REPLACE(REPLACE(NVL(logOutput,&apos;logOutput=null&apos;), CHR(10), &apos;&apos;), CHR(13), &apos;&apos;) ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CHR(10);
&#x9;&#x9;-- Insert status for this iteration of the SQL invocation.
&#x9;&#x9;SET i = i + 1;
&#x9;END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">1573532447680</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1573532447680</attribute>
</metadata>