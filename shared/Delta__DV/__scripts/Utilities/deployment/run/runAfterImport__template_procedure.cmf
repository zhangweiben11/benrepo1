<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="runAfterImport_template" path="/shared/Delta_DV/_scripts/Utilities/deployment/run/runAfterImport_template" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[runAfterImport_template:

&#x9;This procedure is a template for running internal DV procedure after import of a DV migration.
&#x9;This procedure should be copied to a different location so that it does not get overwritten when the Utilities are upgraded.

&#x9;Instructions:
&#x9;&#x9;1. Modify /shared/ASAssets/Utilities/environment/getEnvName() and provide an environment name such as DEV, TEST, PROD etc based on the TDV server environment.
&#x9;&#x9;2. Copy this template to a different location outside of the /shared/ASAssets/Utilities folder so that it does not get overwritten if the Utilities are updated.
&#x9;&#x9;3. Modify the variable &quot;scriptEnv&quot; below to match environment name that comes from getEnvName().
&#x9;&#x9;4. Modify this procedure and add procedure calls to additional logic that you want to &quot;run after import&quot;.
&#x9;&#x9;5. Publish the copied procedure &quot;runAfterImport&quot; to /services/databases/ASAssets/Utilities/deployment
&#x9;&#x9;6. The script deployProject.sh would invoke runAfterImport.

&#x9;Input:
&#x9;&#x9;NONE
&#x9;Output:
&#x9;&#x9;NONE

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
 &#x9;2014.4&#x9;&#x9;10/16/2014      Jeremy Akers        6.2.6           Created new
&#x9;2019.200&#x9;05/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified from original

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="input1" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="input2" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="input3" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/environment/getEnvName" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="envName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;runAfterImport_template:

&#x9;This procedure is a template for running internal DV procedures after import of a CAR file during a DV migration.
&#x9;This procedure should be copied to a different location so that it does not get overwritten when the Utilities are upgraded.

&#x9;Instructions:
&#x9;&#x9;1. Modify /shared/ASAssets/Utilities/environment/getEnvName() and provide an environment name such as DEV, TEST, PROD etc based on the TDV server environment.
&#x9;&#x9;2. Copy this template to a different location outside of the /shared/ASAssets/Utilities folder so that it does not get overwritten if the Utilities are updated.
&#x9;&#x9;3. Modify the copied procedure
&#x9;&#x9;&#x9;a. Modify the variable &quot;scriptEnv&quot; to match environment name that comes from getEnvName().
&#x9;&#x9;&#x9;b. Add procedure calls to add additional logic that you want to &quot;run after import&quot;.
&#x9;&#x9;4. Publish the copied procedure &quot;runAfterImport&quot; to /services/databases/ADMIN/runAfterImport
&#x9;&#x9;5. The script deployProject.[bat|sh] would invoke runAfterImport.  
&#x9;&#x9;&#x9;See the following for script details: /shared/ASAssets/Utilities/deployment/_README

&#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;CHAR(1)&#x9;&#x9;-- Y=debug on,  N=debug off.  Debug writes to CONSOLE and LOG.
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;-- SUCCESS otherwise an exception is thrown.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
 &#x9;2014.4&#x9;&#x9;10/16/2014      Jeremy Akers        6.2.6           Created new
&#x9;2019.200&#x9;05/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified from original

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE runAfterImport_template(
&#x9;IN debug&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on,  N=debug off.  Debug writes to CONSOLE and LOG.
&#x9;IN input1&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- Any character value that can be used within this program that is passed from deployProject.[bat|sh].
&#x9;IN input2&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- Any character value that can be used within this program that is passed from deployProject.[bat|sh].
&#x9;IN input3&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- Any character value that can be used within this program that is passed from deployProject.[bat|sh].
&#x9;OUT result&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;-- SUCCESS otherwise an exception is thrown.
)
BEGIN
&#x9;-- Modify this value to match the actual environment as set in /shared/ASAssets/Utilities/environment/getEnvName().
&#x9;DECLARE scriptEnv &#x9;&#x9;VARCHAR DEFAULT &apos;PROD&apos;;
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;runAfterImport&apos;;
&#x9;DECLARE env&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE message&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE ex &#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE intVal&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE longvarcharVal&#x9;LONGVARCHAR;

&#x9;-- Modify the value in getEnvName to represent the environment.
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/environment/getEnvName(env);
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET message = moduleName||&apos; :: BEGIN execute &apos;||moduleName||&apos;() [&apos;||scriptEnv||&apos;]  for the current environment=[&apos;||NVL(env,&apos;null&apos;)||&apos;]&apos;||
&#x9;&#x9;&#x9;&#x9;&apos;  input1=[&apos;||NVL(input1,&apos;null&apos;)||&apos;]&apos;||  &apos;  input2=[&apos;||NVL(input2,&apos;null&apos;)||&apos;]&apos;||  &apos;  input3=[&apos;||NVL(input3,&apos;null&apos;)||&apos;]&apos;;
&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;CALL LOG(message);
&#x9;END IF;
&#x9;IF (env is null or env &lt;&gt; scriptEnv) THEN
&#x9;&#x9;RAISE ex VALUE &apos;You cannot execute &apos;||moduleName||&apos;() [&apos;||scriptEnv||&apos;]  for the current environment of &apos;||NVL(env,&apos;null&apos;)||&apos;.&apos;;
&#x9;END IF;

&#x9;-- Execute environment specific actions here:
&#x9;CASE
&#x9;&#x9;WHEN env = &apos;TEST&apos; THEN

&#x9;&#x9;WHEN env = &apos;PROD&apos; THEN

&#x9;&#x9;ELSE
&#x9;END CASE;

&#x9;-- Execute other customized procedure actions here:
&#x9;-- Example: Invoke the update priviliege scripts to set privileges using the Data Abstraction Best Practices Privileges spreadsheet.
&#x9;--call /shared/ASAssets/BestPractices_v81/PrivilegeScripts/updatePrivilegesDriver(&apos;EXCEL&apos;,1,env,input1,input2,input3,null,null,null,null,null,null,null,null,&apos;Y&apos;,&apos;Y&apos;,&apos;N&apos;,&apos;Y&apos;,&apos;Y&apos;,&apos;N&apos;,&apos;N&apos;,intVal,longvarcharVal);

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET message = moduleName||&apos; :: END sucessfully executed.&apos;;
&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;CALL LOG(message);
&#x9;END IF;
&#x9;SET result = &apos;SUCCESS&apos;;
END</attribute>
  <attribute name="creationDate" type="LONG">1459950192081</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/65</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/87</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/66</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/88</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1459950192081</attribute>
</metadata>