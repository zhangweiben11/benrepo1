<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="validateDeployment" path="/shared/Delta_DV/_scripts/Utilities/deployment/validate/validateDeployment" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="externalID" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="50"/>
    </parameter>
    <parameter name="archivePkgFileName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="deploymentDateStr" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="nodeHost" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="nodePort" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="resourceContentFilePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="resourceMetadataFilePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="validationTablePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="sequenceNumProcPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/file/FileProcessingCJP/getFileContentsAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fileContent" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/time/DateUtils/BigintToTimestamp" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inBigint" direction="IN">
        <datatype type="INTEGER"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="DATETIME"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/validate/helpers/archiveMetadataXSLT" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inXML" direction="IN" nullable="false">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="outputs" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="packageFormatVersion">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceName">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="resourcePath">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="resourceType">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="subtype">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="changeToken">
            <datatype type="INTEGER"/>
          </element>
          <element name="virtual">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="tableType">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="attrName">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="attrType">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
          <element name="attrValue">
            <datatype namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;validateDeployment:

&#x9;The purpose of this procedure is to validate the .car file metadata.xml resources against previous deployments.
&#x9;The objective is to both record the resources being deployed and validate that a resource archive date is not 
&#x9;&#x9;going to overwrite a previous deployment where the archive date is greater than the one being deployed.
&#x9;&#x9;Under that circumstance, the older archive could overwrite newer resource logic.

&#x9;The validation requires a table called DV_DEPLOYMENT_VALIDATION and a sequence to generate a unique id. 
&#x9;&#x9;The procedure to create the table and sequence can be found in 
&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/deployment/validate/helpers/validateDeploymentInit
&#x9;&#x9;Execute &quot;validateDeploymentInit&quot; to create the necessary resources for [oracle, sqlserver, or postgres].

&#x9;Validation Value
&#x9;&#x9;1. Resource path collision from different developers doing deployments at different times
&#x9;&#x9;2. Verify deployment by querying table
&#x9;&#x9;3. History of deployments and resources

&#x9;Input:
&#x9;&#x9;debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off
&#x9;&#x9;externalID&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(50),&#x9;-- An external id to correlate to an external system.
&#x9;&#x9;archivePkgFileName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the archive package file (.car).
&#x9;&#x9;deploymentDateStr&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Format: YYYY-MM-DD HH24:MI:SS.FFF
&#x9;&#x9;nodeHost&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The hostname of the server deploying to.
&#x9;&#x9;nodePort&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The port of the server deploying to.
&#x9;&#x9;resourceContentFilePath&#x9;&#x9;VARCHAR(4000),&#x9;-- The file path to the package archive metadata file [content.xml].  Unzipped from the .car file.
&#x9;&#x9;resourceMetadataFilePath&#x9;VARCHAR(4000),&#x9;-- The file path to the package archive metadata file [metadata.xml].  Unzipped from the .car file.
&#x9;&#x9;validationTablePath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The full path to the DV Deployment Validation table.  This points to the customer implementation of the &quot;DV_DEPLOYMENT_VALIDATION&quot; table.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Example: /shared/Common/DeploymentValidation/Physical/Formatting/DV_DEPLOYMENT_VALIDATION
&#x9;&#x9;sequenceNumProcPath&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The full path to the DV sequence num generator procedure path that has no input and returns a single scalar INTEGER output.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Example: /shared/Common/DeploymentValidation/Physical/Formatting/getSequenceNum
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- SUCCESS if no invalid paths, otherwise an exception is thrown.


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.400&#x9;12/31/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8 / 8.x&#x9;&#x9;Created new
&#x9;2020.202&#x9;06/08/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8 / 8.x&#x9;&#x9;Added 3 columns.  Modified to read contents.xml.  Modified input parameters.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE validateDeployment(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on.  N=debug off
&#x9;IN externalID&#x9;&#x9;&#x9;&#x9;VARCHAR(50),&#x9;-- An external id to correlate to an external system.
&#x9;IN archivePkgFileName&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The name of the archive package file (.car).
&#x9;IN deploymentDateStr&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Format: YYYY-MM-DD HH24:MI:SS.FFF
&#x9;IN nodeHost&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The hostname of the server deploying to.
&#x9;IN nodePort&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The port of the server deploying to.
&#x9;IN resourceContentFilePath&#x9;VARCHAR(4000),&#x9;-- The file path to the package archive metadata file [content.xml].  Unzipped from the .car file.
&#x9;IN resourceMetadataFilePath&#x9;VARCHAR(4000),&#x9;-- The file path to the package archive metadata file [metadata.xml].  Unzipped from the .car file.
&#x9;IN validationTablePath&#x9;&#x9;VARCHAR(4000),&#x9;-- The full path to the DV Deployment Validation table.  This points to the customer implementation of the &quot;DV_DEPLOYMENT_VALIDATION&quot; table.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Example: /shared/Common/DeploymentValidation/Physical/Formatting/DV_DEPLOYMENT_VALIDATION
&#x9;IN sequenceNumProcPath&#x9;&#x9;VARCHAR(4000),&#x9;-- The full path to the DV sequence num generator procedure path that has no input and returns a single scalar INTEGER output.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;Example: /shared/Common/DeploymentValidation/Physical/Formatting/getSequenceNum
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- SUCCESS upon completion or EXCEPTION
)
BEGIN
&#x9;-- Static variables
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;validateDeployment&apos;;
&#x9;DECLARE tablePath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE procedurePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;-- Cursor variables
&#x9;DECLARE cursValidate&#x9;&#x9;&#x9;&#x9;CURSOR(PK_ID1 NUMERIC(19,0), PK_ID2 NUMERIC(19,0), EXTERNAL_ID1 VARCHAR(50), EXTERNAL_ID2 VARCHAR(50), RESOURCE_PATH VARCHAR(4000), RESOURCE_TYPE VARCHAR(25), ARCHIVE_CREATION_DATE2 TIMESTAMP, DEPLOYMENT_DATE2 TIMESTAMP, SCRIPT_TEXT1 LONGVARCHAR, SCRIPT_TEXT2 LONGVARCHAR);
&#x9;-- Cursor for sequence number
&#x9;DECLARE cursSequence&#x9;&#x9;&#x9;&#x9;CURSOR(sequenceNum INTEGER);
&#x9;-- General variables
&#x9;DECLARE resourceContentXML&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceMetadataXML&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE publishedResourceExistList&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE beginTS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE duration&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE numCollisions&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE archiveCreationDateStr&#x9;&#x9;VARCHAR;
&#x9;DECLARE archiveCreationDateStr2&#x9;&#x9;VARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE archiveCreationDate&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE deploymentDate&#x9;&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE sourceServerName&#x9;&#x9;&#x9;VARCHAR(50);
&#x9;DECLARE serverVersion&#x9;&#x9;&#x9;&#x9;VARCHAR(20);
&#x9;DECLARE collisionArchiveCreationDate TIMESTAMP;
&#x9;DECLARE collisionDeploymentDate&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE collisionExternalID&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE tz&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE prevResourcePath&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT null;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE i, pos1, pos2, len&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE numRows&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
    DECLARE TYPE recType &#x9;&#x9;&#x9;&#x9;ROW (
        PK_ID &#x9;&#x9;&#x9;&#x9;&#x9;NUMERIC(19,0),
        EXTERNAL_ID &#x9;&#x9;&#x9;VARCHAR(50),
&#x9;&#x9;ARCHIVE_FILE_NAME&#x9;&#x9;VARCHAR(100),
        ARCHIVE_CREATION_DATE &#x9;TIMESTAMP,
&#x9;&#x9;SOURCE_SERVER_NAME&#x9;&#x9;VARCHAR(50),
&#x9;&#x9;SERVER_VERSION&#x9;&#x9;&#x9;VARCHAR(20),
        DEPLOYMENT_DATE &#x9;&#x9;TIMESTAMP,
        NODE_HOST &#x9;&#x9;&#x9;&#x9;VARCHAR(255),
        NODE_PORT &#x9;&#x9;&#x9;&#x9;INTEGER,
        RESOURCE_NAME &#x9;&#x9;&#x9;VARCHAR(255),
        RESOURCE_PATH &#x9;&#x9;&#x9;VARCHAR(4000),
        RESOURCE_TYPE &#x9;&#x9;&#x9;VARCHAR(25),
        RESOURCE_SUBTYPE &#x9;&#x9;VARCHAR(50),
        RESOURCE_MOD_DATE &#x9;&#x9;TIMESTAMP,
        RESOURCE_MOD_USER &#x9;&#x9;VARCHAR(100),
        RESOURCE_MOD_DOMAIN &#x9;VARCHAR(50),
&#x9;&#x9;RESOURCE_MOD_USERID&#x9;&#x9;NUMERIC(19,0),
        COLLISION_ID &#x9;&#x9;&#x9;NUMERIC(19,0),
        SCRIPT_TEXT &#x9;&#x9;&#x9;CLOB
&#x9;);
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recType;

&#x9;-- Get the archive file &quot;content.xml&quot; file
&#x9;IF (resourceContentFilePath IS NOT NULL) THEN
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/file/FileProcessingCJP/getFileContentsAscii(resourceContentFilePath, resourceContentXML);
&#x9;&#x9;-- Extract the create archive timestamp
&#x9;&#x9;SET pos1 = INSTR(resourceContentXML, &apos;&lt;creationDate&gt;&apos;);
&#x9;&#x9;SET pos2 = INSTR(resourceContentXML, &apos;/creationDate&gt;&apos;);
&#x9;&#x9;SET len = LENGTH(&apos;&lt;creationDate&gt;&apos;);
&#x9;&#x9;IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;SET archiveCreationDateStr = SUBSTRING(resourceContentXML, pos1+len, pos2-(pos1+len)-1);&#x9;&#x9;

&#x9;&#x9;&#x9;-- Parse the archive timestamp
&#x9;&#x9;&#x9;--&#x9;&#x9;Format: Tue Sep 10 14:26:28 EDT 2019
&#x9;&#x9;&#x9;--&#x9;&#x9;Position: 1   2  3        4   5    6
&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;&#x9; DY MON DD     HH24  TZ YYYY
&#x9;&#x9;&#x9;--&#x9;&#x9;Format: Tue|Sep|10|14:26:28|EDT|2019|
&#x9;&#x9;&#x9;SET archiveCreationDateStr = REPLACE(archiveCreationDateStr, &apos; &apos;, &apos;|&apos;)||&apos;|&apos;;
&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;SET pos1 = 1;
&#x9;&#x9;&#x9;SET pos2 = INSTR(archiveCreationDateStr, &apos;|&apos;);
&#x9;&#x9;&#x9;WHILE (pos2 &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;IF (i = 5) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET tz = SUBSTRING(archiveCreationDateStr, pos1, pos2-pos1);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET archiveCreationDateStr2 = archiveCreationDateStr2 || SUBSTRING(archiveCreationDateStr, pos1, pos2-pos1) || &apos; &apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET pos1 = pos2+1;
&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(archiveCreationDateStr, &apos;|&apos;, pos2+1);
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;SET archiveCreationDateStr = TRIM(archiveCreationDateStr2);
&#x9;&#x9;&#x9;SET archiveCreationDate = PARSE_TIMESTAMP(archiveCreationDateStr,&apos;DY MON DD HH24:MI:SS YYYY&apos;); --&apos;Tue Sep 10 14:26:28 EDT 2019&apos;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Extract the source server name
&#x9;&#x9;SET pos1 = INSTR(resourceContentXML, &apos;&lt;sourceServer&gt;&apos;);
&#x9;&#x9;SET pos2 = INSTR(resourceContentXML, &apos;/sourceServer&gt;&apos;);
&#x9;&#x9;SET len = LENGTH(&apos;&lt;sourceServer&gt;&apos;);
&#x9;&#x9;IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;SET sourceServerName = SUBSTRING(resourceContentXML, pos1+len, pos2-(pos1+len)-1);&#x9;&#x9;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Extract the server version
&#x9;&#x9;SET pos1 = INSTR(resourceContentXML, &apos;&lt;serverVersion&gt;&apos;);
&#x9;&#x9;SET pos2 = INSTR(resourceContentXML, &apos;/serverVersion&gt;&apos;);
&#x9;&#x9;SET len = LENGTH(&apos;&lt;serverVersion&gt;&apos;);
&#x9;&#x9;IF (pos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;SET serverVersion = SUBSTRING(resourceContentXML, pos1+len, pos2-(pos1+len)-1);&#x9;&#x9;
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Get the archive file &quot;metadata.xml&quot; file
&#x9;IF (resourceMetadataFilePath IS NOT NULL) THEN
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/file/FileProcessingCJP/getFileContentsAscii(resourceMetadataFilePath, resourceMetadataXML);
&#x9;END IF;

&#x9;-- Apply reserved path to resource paths
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(validationTablePath, null, tablePath);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sequenceNumProcPath, null, procedurePath);

&#x9;-- Parse the deployment timestamp
&#x9;SET deploymentDate = PARSE_TIMESTAMP(deploymentDateStr, &apos;YYYY-MM-DD HH24:MI:SS.ff&apos;);


&#x9;-- Print debug
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : tz=&apos;||NVL(tz,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : archiveCreationDateStr=&apos;||NVL(archiveCreationDateStr,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : archiveCreationDate=&apos;||NVL(CAST(archiveCreationDate AS VARCHAR),&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceServerName=&apos;||NVL(sourceServerName,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : serverVersion=&apos;||NVL(serverVersion,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : deploymentDateStr=&apos;||NVL(deploymentDateStr,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : deploymentDate=&apos;||NVL(CAST(deploymentDate AS VARCHAR),&apos;null&apos;));
&#x9;END IF;

&#x9;-- Modify the resource contents list
&#x9;IF (resourceMetadataXML IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The resource metadata XML does not exist for file path=&apos;||resourceMetadataFilePath;
&#x9;END IF;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;LENGTH=&apos;||LENGTH(resourceMetadataXML));
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;END IF;

&#x9;-- Loop through the list and insert each path into the database table
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;SET i = 0;
&#x9;&#x9;FOR r AS
&#x9;&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/validate/helpers/archiveMetadataXSLT(resourceMetadataXML) 
&#x9;&#x9;&#x9;&#x9;WHERE attrName IS NOT NULL AND attrType IS NOT NULL AND attrValue IS NOT NULL
&#x9;&#x9;&#x9;UNION
&#x9;&#x9;&#x9;SELECT  null packageFormatVersion, &apos;EOF&apos; resourceName, &apos;EOF&apos; resourcePath, &apos;EOF&apos; resourceType, null subtype, 
&#x9;&#x9;&#x9;&#x9;&#x9;null changeToken, null virtual, null tableType, null attrName, null attrType, null attrValue
&#x9;&#x9;&#x9;&#x9;FROM /services/databases/system/DUAL
&#x9;&#x9;DO
&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;-- If this is a different path than the previous then reset the duplicateResourceList variable.
&#x9;&#x9;&#x9;IF (prevResourcePath IS NOT NULL AND r.resourcePath &lt;&gt; prevResourcePath) THEN
&#x9;&#x9;&#x9;&#x9;SET numRows = numRows + 1;
&#x9;&#x9;&#x9;&#x9;-- Create published database paths if needed
&#x9;&#x9;&#x9;&#x9;IF (rec.RESOURCE_TYPE = &apos;LINK&apos; AND INSTR(rec.RESOURCE_PATH, &apos;/services/databases/&apos;) = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(rec.RESOURCE_PATH, &apos;/&apos;, -1, 1);
&#x9;&#x9;&#x9;&#x9;&#x9;SET parentPath = SUBSTRING(rec.RESOURCE_PATH, 1, pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(publishedResourceExistList) &gt; 0 AND INSTR(publishedResourceExistList, parentPath||&apos;\\&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET resExists = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;-------- found: resExists=&apos;||CAST(resExists AS VARCHAR)||&apos;  parentPath=&apos;||NVL(parentPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If true then this is a DATA_SOURCE else it is a CONTAINER
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(REPLACE(parentPath, &apos;/services/databases/&apos; ,&apos;&apos;), &apos;/&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(parentPath, &apos;DATA_SOURCE&apos;, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/ResourceExists(parentPath, &apos;CONTAINER&apos;, null, resExists);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET publishedResourceExistList = publishedResourceExistList || parentPath || &apos;\\&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;-------- check: resExists=&apos;||CAST(resExists AS VARCHAR)||&apos;  parentPath=&apos;||NVL(parentPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Create the parent paths if they do not exist.
&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT resExists) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--call print(&apos;-------- create: resExists=&apos;||CAST(resExists AS VARCHAR)||&apos;  parentPath=&apos;||NVL(parentPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createAllFoldersPrivileges(parentPath, 1, 1, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Insert the record into the database
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;INSERT INTO &apos;||tablePath||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;(PK_ID, EXTERNAL_ID, ARCHIVE_FILE_NAME, ARCHIVE_CREATION_DATE, SOURCE_SERVER_NAME, SERVER_VERSION, DEPLOYMENT_DATE, NODE_HOST, NODE_PORT, RESOURCE_NAME, RESOURCE_PATH, RESOURCE_TYPE, RESOURCE_SUBTYPE, RESOURCE_MOD_DATE, RESOURCE_MOD_USER, RESOURCE_MOD_DOMAIN, RESOURCE_MOD_USERID, COLLISION_ID, SCRIPT_TEXT) &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos; VALUES(rec)&apos;;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; :      numRows=&apos;||numRows||&apos;  resourceName=&apos;||rec.RESOURCE_NAME||&apos;  sqlStatement=&apos;||NVL(sqlStatement,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Perform the insert into the table
&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;

&#x9;&#x9;&#x9;&#x9;-- Reset the record structure
&#x9;&#x9;&#x9;&#x9;SET rec = null;
&#x9;&#x9;&#x9;&#x9;-- Reset the resource path counter
&#x9;&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;IF (i = 1) THEN
&#x9;&#x9;&#x9;&#x9;-- Get the sequence for the row
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||procedurePath||&apos;()&apos;;
&#x9;&#x9;&#x9;&#x9;SET rec.PK_ID = null;
&#x9;&#x9;&#x9;&#x9;OPEN cursSequence FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;FETCH cursSequence INTO rec.PK_ID;
&#x9;&#x9;&#x9;&#x9;CLOSE cursSequence;
&#x9;&#x9;&#x9;&#x9;IF (rec.PK_ID IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE moduleName||&apos; : Unable to generate a sequence id using SQL=&apos;||sqlStatement;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Assign the rest of the variables to the record structure.
&#x9;&#x9;&#x9;&#x9;SET rec.EXTERNAL_ID = externalID;
&#x9;&#x9;&#x9;&#x9;IF (rec.EXTERNAL_ID IS NOT NULL AND LENGTH(TRIM(rec.EXTERNAL_ID)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.EXTERNAL_ID = null;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET rec.ARCHIVE_FILE_NAME = archivePkgFileName;
&#x9;&#x9;&#x9;&#x9;IF (INSTR(LOWER(rec.ARCHIVE_FILE_NAME), &apos;.car&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.ARCHIVE_FILE_NAME = rec.ARCHIVE_FILE_NAME || &apos;.car&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET rec.ARCHIVE_CREATION_DATE = archiveCreationDate;
&#x9;&#x9;&#x9;&#x9;SET rec.SOURCE_SERVER_NAME = sourceServerName;
&#x9;&#x9;&#x9;&#x9;SET rec.SERVER_VERSION = serverVersion;
&#x9;&#x9;&#x9;&#x9;SET rec.DEPLOYMENT_DATE = deploymentDate;
&#x9;&#x9;&#x9;&#x9;SET rec.NODE_HOST = nodeHost;
&#x9;&#x9;&#x9;&#x9;SET rec.NODE_PORT = nodePort;
&#x9;&#x9;&#x9;&#x9;SET rec.RESOURCE_NAME = r.resourceName;
&#x9;&#x9;&#x9;&#x9;SET rec.RESOURCE_PATH = r.resourcePath;
&#x9;&#x9;&#x9;&#x9;SET rec.RESOURCE_TYPE = r.resourceType;
&#x9;&#x9;&#x9;&#x9;SET rec.RESOURCE_SUBTYPE = r.subtype;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;WHEN r.attrName = &apos;lastModifiedDate&apos; THEN CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/&quot;time&quot;/DateUtils/BigintToTimestamp(r.attrValue, rec.RESOURCE_MOD_DATE);
&#x9;&#x9;&#x9;&#x9;WHEN r.attrName = &apos;lastModifiedUserName&apos; THEN SET rec.RESOURCE_MOD_USER = r.attrValue;
&#x9;&#x9;&#x9;&#x9;WHEN r.attrName = &apos;lastModifiedUserDomain&apos; THEN SET rec.RESOURCE_MOD_DOMAIN = r.attrValue;
&#x9;&#x9;&#x9;&#x9;WHEN r.attrName = &apos;lastModifiedUserId&apos; THEN SET rec.RESOURCE_MOD_USERID = r.attrValue;
&#x9;&#x9;&#x9;&#x9;WHEN UPPER(r.attrName) = &apos;SQL&apos; AND rec.RESOURCE_TYPE = &apos;TABLE&apos; THEN SET rec. SCRIPT_TEXT = r.attrValue;
&#x9;&#x9;&#x9;&#x9;WHEN UPPER(r.attrName) = &apos;SCRIPT&apos; AND rec.RESOURCE_TYPE = &apos;PROCEDURE&apos; THEN SET rec. SCRIPT_TEXT = r.attrValue;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;END CASE;

&#x9;&#x9;&#x9;-- Set the previous resource path
&#x9;&#x9;&#x9;SET prevResourcePath = r.resourcePath;
&#x9;&#x9;END FOR;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET duration = CAST(CURRENT_TIMESTAMP - beginTS AS VARCHAR);
&#x9;&#x9;CALL PRINT(moduleName||&apos; : INSERT duration=&apos;||CAST(duration AS VARCHAR));
&#x9;END IF;

&#x9;-- Detect collisions in the deployment resource list
&#x9;-- A collision is one in which a resource exists in the current resource list that was previously deployed 
&#x9;--&#x9;&#x9;with a previous deployment archive date &gt; than the current archive date.
&#x9;SET sqlStatement =  &apos;SELECT dv1.PK_ID PK_ID1, dv2.PK_ID PK_ID2, &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;       dv1.EXTERNAL_ID, dv2.EXTERNAL_ID, &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;       dv1.RESOURCE_PATH, dv1.RESOURCE_TYPE, &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;       dv2.ARCHIVE_CREATION_DATE, dv2.DEPLOYMENT_DATE, &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;       CAST(dv1.SCRIPT_TEXT AS LONGVARCHAR) SCRIPT_TEXT1, &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;       CAST(dv2.SCRIPT_TEXT AS LONGVARCHAR) SCRIPT_TEXT2&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM &apos;||tablePath||&apos; dv1&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  LEFT OUTER JOIN &apos;||tablePath||&apos; dv2&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    ON  dv1.RESOURCE_NAME = dv2.RESOURCE_NAME&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    AND dv1.RESOURCE_TYPE = dv2.RESOURCE_TYPE&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    AND dv1.RESOURCE_PATH = dv2.RESOURCE_PATH&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    AND dv1.DEPLOYMENT_DATE &gt; dv2.DEPLOYMENT_DATE&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    AND dv1.ARCHIVE_CREATION_DATE &lt; dv2.ARCHIVE_CREATION_DATE&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    AND dv1.RESOURCE_MOD_DATE &lt;&gt; dv2.RESOURCE_MOD_DATE&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE dv1.DEPLOYMENT_DATE = deploymentDate&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND dv2.PK_ID IS NOT NULL&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND dv1.RESOURCE_TYPE &lt;&gt; &apos;&apos;CONTAINER&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND dv2.RESOURCE_TYPE &lt;&gt; &apos;&apos;CONTAINER&apos;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement:&apos;||CHR(10)||NVL(sqlStatement,&apos;null&apos;));
&#x9;END IF;

&#x9;-- Open the SQL Statement and execute it.
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;OPEN cursValidate FOR sqlStatement;
&#x9;&#x9;FOR r AS cursValidate DO
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : COLLISION WITH: PK_ID1=&apos;||NVL(CAST(r.PK_ID1 AS VARCHAR),&apos;null&apos;)||&apos;  PK_ID2=&apos;||NVL(CAST(r.PK_ID2 AS VARCHAR),&apos;null&apos;)||&apos;  RESOURCE_PATH=&apos;||NVL(r.RESOURCE_PATH,&apos;null&apos;)||&apos;  RESOURCE_TYPE=&apos;||NVL(r.RESOURCE_TYPE,&apos;null&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (r.SCRIPT_TEXT1 IS NOT NULL AND r.SCRIPT_TEXT2 IS NOT NULL AND r.SCRIPT_TEXT1 &lt;&gt; r.SCRIPT_TEXT2) THEN
&#x9;&#x9;&#x9;&#x9;-- A collision was encountered so count it as an exception.
&#x9;&#x9;&#x9;&#x9;SET numCollisions = numCollisions + 1;
&#x9;&#x9;&#x9;&#x9;SET collisionArchiveCreationDate = r.ARCHIVE_CREATION_DATE2;
&#x9;&#x9;&#x9;&#x9;SET collisionDeploymentDate = r.DEPLOYMENT_DATE2;
&#x9;&#x9;&#x9;&#x9;SET collisionExternalID = r.EXTERNAL_ID2;

&#x9;&#x9;&#x9;&#x9;SET sqlStatement =  &apos;UPDATE &apos;||tablePath||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;   SET COLLISION_ID = &apos;||r.PK_ID2||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE PK_ID = &apos;||r.PK_ID1;
&#x9;&#x9;&#x9;&#x9;-- Execute the update statement
&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;

&#x9;-- Raise an exception if the number of collisions &gt; 0
&#x9;IF (numCollisions &gt; 0) THEN
&#x9;&#x9;SET message = &apos;Deployment aborted due to the number of collisions=&apos;||numCollisions||&apos;.&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  CURRENT:ARCHIVE_CREATION_DATE=[&apos;||NVL(CAST(archiveCreationDate AS VARCHAR),&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  CURRENT:DEPLOYMENT_DATE=[&apos;||NVL(CAST(deploymentDate AS VARCHAR),&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  CURRENT:EXTERNAL_ID=[&apos;||NVL(CAST(externalID AS VARCHAR),&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  COLLISION:ARCHIVE_CREATION_DATE[&apos;||NVL(CAST(collisionArchiveCreationDate AS VARCHAR),&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  COLLISION:DEPLOYMENT_DATE[&apos;||NVL(CAST(collisionDeploymentDate AS VARCHAR),&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  COLLISION:EXTERNAL_ID=[&apos;||NVL(collisionExternalID,&apos;null&apos;)||&apos;]&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  Review exceptions: SELECT * FROM &apos;||tablePath||&apos; WHERE COLLISION_ID IS NOT NULL AND DEPLOYMENT_DATE = &apos;&apos;&apos;||CAST(deploymentDate AS VARCHAR)||&apos;&apos;&apos;&apos;;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : message:&apos;||CHR(10)||NVL(message,&apos;null&apos;));
&#x9;&#x9;END IF;
&#x9;&#x9;CALL LOG(message);
&#x9;&#x9;RAISE ex VALUE message;
&#x9;END IF;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET duration = CAST(CURRENT_TIMESTAMP - beginTS AS VARCHAR);
&#x9;&#x9;CALL PRINT(moduleName||&apos; : TOTAL duration=&apos;||CAST(duration AS VARCHAR));
&#x9;END IF;
&#x9;SET result = &apos;SUCCESS&apos;;
EXCEPTION
&#x9;ELSE
&#x9;&#x9;SET result = CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
END</attribute>
  <attribute name="creationDate" type="LONG">1568311804934</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/258</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/388</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/200</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/211</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/199</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/210</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/320</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/198</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/396</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/197</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/347</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/202</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/201</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/390</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/355</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/196</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1568311804934</attribute>
</metadata>