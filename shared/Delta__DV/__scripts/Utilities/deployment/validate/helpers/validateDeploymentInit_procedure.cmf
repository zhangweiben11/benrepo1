<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="validateDeploymentInit" path="/shared/Delta_DV/_scripts/Utilities/deployment/validate/helpers/validateDeploymentInit" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="destroyExistingResources" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="datasourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="catalogName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="schemaName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="resourceContainer" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/deployment/validate/helpers/validateDeploymentInit_CreateDrop" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="datasourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="datasourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="catalogName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="schemaName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="packagedQueryPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="displayDDL" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="executeDDL" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="dropIndexes" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="dropTables" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="dropSequences" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="createTables" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="createIndexes" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="createSequences" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cursCombinedResult" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="sqlScript" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createAllFoldersPrivileges" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="updatePrivilegesRecursively" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="copyPrivilegeMode" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/destroyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateExternalSqlProcedure" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="externalSqlText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="externalDatasaourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="parameterVector" direction="IN">
        <datatype type="ARRAY">
          <itemDatatype>
            <datatype name="ParameterType" type="TREE" refId="257">
              <element name="name">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="sqlType">
                <datatype name="sqlType" type="ARRAY">
                  <itemDatatype>
                    <datatype name="sqlType" type="TREE" refId="513">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
                      </element>
                      <element name="referenceTypeName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="trailingSpaces">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="xmlType">
                <datatype name="xmlType" type="ARRAY">
                  <itemDatatype>
                    <datatype name="xmlType" type="TREE" refId="769">
                      <element name="name">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="namespace">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="nativeType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="schema">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="referencePath">
                        <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
                      </element>
                      <element name="proprietaryModel">
                        <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="pseudoType">
                <datatype name="pseudoType" type="ARRAY">
                  <itemDatatype>
                    <datatype name="pseudoType" type="TREE" refId="1025">
                      <element name="definition">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="direction">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="isNullable">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attributes">
                <datatype name="attributes" type="ARRAY">
                  <itemDatatype>
                    <datatype name="AttributeCompleteType" type="TREE" refId="1281">
                      <element name="attrName">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrType">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="attrValue">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="valueList">
                        <datatype name="valueList" type="ARRAY">
                          <itemDatatype>
                            <datatype name="itemType" type="TREE" refId="1537">
                              <element name="type">
                                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                              </element>
                              <element name="value">
                                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueMap">
                        <datatype name="valueMap" type="ARRAY">
                          <itemDatatype>
                            <datatype name="entryType" type="TREE" refId="1793">
                              <element name="key">
                                <datatype name="key" type="ARRAY">
                                  <itemDatatype>
                                    <reference refId="1537"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                              <element name="value">
                                <datatype name="value" type="ARRAY">
                                  <itemDatatype>
                                    <reference refId="1537"/>
                                  </itemDatatype>
                                </datatype>
                              </element>
                            </datatype>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="valueArray">
                        <datatype name="valueArray" type="ARRAY">
                          <itemDatatype>
                            <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="unset">
                        <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="annotation">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY">
          <itemDatatype>
            <reference refId="1281"/>
          </itemDatatype>
        </datatype>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateSqlTable" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inScripttext" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;validateDeploymentInit

&#x9;This procedure is used to create and execute the DDL for the table &apos;DV_DEPLOYMENT_VALIDATION&apos; and the sequence &apos;DV_DEPLOY_SEQ&apos;.
&#x9;The user must provide a datasource that is either [oracle, sqlserver or postgres] for this operation to work successfully.
&#x9;The user must provide the full path to the datasource schema which is used to derive all necessary attributes for the generation.

&#x9;This procedure generates the necessary procedures and views to interface with the database table and sequence.  
&#x9;The following resources are generated into the DV folder container designated by &quot;resourceContainer&quot;.  
&#x9;&#x9;00_ExecuteDDL&#x9;&#x9;&#x9;&#x9;- A packaged query used to execute DDL statements.
&#x9;&#x9;00_ExecuteDMLIntResult&#x9;&#x9;- A packaged query used to execute DML statements to get the next sequence and return an integer result.
&#x9;&#x9;getSequenceNum&#x9;&#x9;&#x9;&#x9;- A procedure that invokes 00_ExecuteDMLIntResult to get the next sequence using the proper database syntax.
&#x9;&#x9;DV_DEPLOYMENT_VALIDATION&#x9;- A formatting layer view that invokes the physical datasource table.  This is the path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;that the user should provide to deployProjects.[bat|sh] for validating the deployment.

&#x9;Input:
&#x9;&#x9;destroyExistingResources&#x9;CHAR(1),&#x9;&#x9;-- Y=destroy and recreate resources.  N=do not destroy resources.
&#x9;&#x9;datasourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The path to the oracle, sqlserver or postgres datasource
&#x9;&#x9;catalogName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The catalog name if applicable otherwise null.
&#x9;&#x9;schemaName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The schema name if applicable otherwise null.
&#x9;&#x9;resourceContainer&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The resource container/folder which will contain the generated resources.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If the path does not exist, it will be created.

&#x9;Output:
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;-- SUCCESS or an exception is thrown.

&#x9;---------------------------------------------------------
&#x9;SQL Server Syntax for &quot;dbo&quot; schema:
&#x9;---------------------------------------------------------
&#x9;&#x9;IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = object_id(N&apos;&quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;&apos;, N&apos;U&apos;) AND NAME =&apos;DV_DEPLOYMENT_VALIDATION_IDX1&apos;) DROP INDEX &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot;;
&#x9;&#x9;IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = object_id(N&apos;&quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;&apos;, N&apos;U&apos;) AND NAME =&apos;DV_DEPLOYMENT_VALIDATION_IDX2&apos;) DROP INDEX &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot;;
&#x9;&#x9;IF OBJECT_ID(N&apos;&quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;&apos;, N&apos;U&apos;) IS NOT NULL DROP TABLE &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;;
&#x9;&#x9;DROP SEQUENCE &quot;dbo&quot;.&quot;DV_DEPLOY_SEQ&quot;;

&#x9;&#x9;CREATE TABLE &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (
&#x9;&#x9;&#x9;&quot;PK_ID&quot;                         NUMERIC(19,0),
&#x9;&#x9;&#x9;&quot;EXTERNAL_ID&quot;                   VARCHAR(50),
&#x9;&#x9;    &quot;ARCHIVE_FILE_NAME&quot;             VARCHAR(100),
&#x9;&#x9;    &quot;ARCHIVE_CREATION_DATE&quot;         DATETIME2(3),
&#x9;&#x9;    &quot;SOURCE_SERVER_NAME&quot;            VARCHAR(50),
&#x9;&#x9;    &quot;SERVER_VERSION&quot;                VARCHAR(20),
&#x9;&#x9;&#x9;&quot;DEPLOYMENT_DATE&quot;               DATETIME2(3),
&#x9;&#x9;&#x9;&quot;NODE_HOST&quot;                     VARCHAR(255),
&#x9;&#x9;&#x9;&quot;NODE_PORT&quot;                     INTEGER,
&#x9;&#x9;&#x9;&quot;RESOURCE_NAME&quot;                 VARCHAR(255) COLLATE Latin1_General_CS_AS,
&#x9;&#x9;&#x9;&quot;RESOURCE_PATH&quot;                 VARCHAR(4000) COLLATE Latin1_General_CS_AS,
&#x9;&#x9;&#x9;&quot;RESOURCE_TYPE&quot;                 VARCHAR(25) COLLATE Latin1_General_CS_AS,
&#x9;&#x9;&#x9;&quot;RESOURCE_SUBTYPE&quot;              VARCHAR(50) COLLATE Latin1_General_CS_AS,
&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DATE&quot;             DATETIME2(3),
&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USER&quot;             VARCHAR(100),
&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DOMAIN&quot;           VARCHAR(50),
&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USERID&quot;           NUMERIC(19,0),
&#x9;&#x9;&#x9;&quot;COLLISION_ID&quot;                  NUMERIC(19,0),
&#x9;&#x9;&#x9;&quot;SCRIPT_TEXT&quot;                   TEXT,
&#x9;&#x9;&#x9;CONSTRAINT pk_DV_DEPLOYMENT_VALIDATION PRIMARY KEY CLUSTERED (&quot;PK_ID&quot;)
&#x9;&#x9;);

&#x9;&#x9;CREATE SEQUENCE &quot;dbo&quot;.&quot;DV_DEPLOY_SEQ&quot; START WITH 1 INCREMENT BY 1 NO CYCLE CACHE;
&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot; ON &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;COLLISION_ID&quot;);
&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot; ON &quot;dbo&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;RESOURCE_NAME&quot;, &quot;RESOURCE_TYPE&quot;, &quot;ARCHIVE_CREATION_DATE&quot;, &quot;DEPLOYMENT_DATE&quot;, &quot;RESOURCE_MOD_DATE&quot;);

&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of a DV procedure to get the next SQL Server sequence number from the database
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.
&#x9;&#x9;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)
&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;-- The syntax of the SQL to get the next sequence is for SQL Server.
&#x9;&#x9;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;SELECT NEXT VALUE FOR &quot;dbo&quot;.&quot;DV_DEPLOY_SEQ&quot;&apos;;
&#x9;&#x9;&#x9;-- This is a packaged query bound to a SQL Server datasource where the sequence &quot;DV_DEPLOY_SEQ&quot; was created.  It has a single INTEGER value cursor output.
&#x9;&#x9;&#x9;FOR seq AS SELECT * FROM /shared/Common/DeploymentValidation/PackageQueries/oracle/&quot;00_ExecuteDMLIntResult&quot;(sequenceSql) DO
&#x9;&#x9;&#x9;&#x9;SET sequenceNum = seq.outputValue;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;END

&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of the packaged query &quot;00_Execute_DMLIntResult&quot;
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;&#x9;The packaged query is bound to the datasource of choice.

&#x9;&#x9;&#x9;Sql Tab:
&#x9;&#x9;&#x9;&#x9;&lt;version 2&gt;multipartseparator=;+;
&#x9;&#x9;&#x9;&#x9;{0}; ;

&#x9;&#x9;&#x9;Parameters Tab:
&#x9;&#x9;&#x9;&#x9;Input:
&#x9;&#x9;&#x9;&#x9;&#x9;inputSql &#x9;&#x9;&#x9;VARCHAR(32767) - referenced by {0}
&#x9;&#x9;&#x9;&#x9;Output:
&#x9;&#x9;&#x9;&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;CURSOR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputValue&#x9;&#x9;INTEGER


&#x9;---------------------------------------------------------
&#x9;Oracle Syntax for &quot;CIS_KPI&quot; schema:
&#x9;---------------------------------------------------------
&#x9;&#x9;&#x9;DROP INDEX &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot;;
&#x9;&#x9;&#x9;DROP INDEX &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot;;
&#x9;&#x9;&#x9;DROP TABLE &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;;
&#x9;&#x9;&#x9;DROP SEQUENCE &quot;CIS_KPI&quot;.&quot;DV_DEPLOY_SEQ&quot;;

&#x9;&#x9;&#x9;CREATE TABLE &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (
&#x9;&#x9;&#x9;&#x9;&quot;PK_ID&quot;                         NUMBER(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;EXTERNAL_ID&quot;                   VARCHAR2(50),
&#x9;&#x9;&#x9;    &quot;ARCHIVE_FILE_NAME&quot;             VARCHAR2(100),
&#x9;&#x9;&#x9;    &quot;ARCHIVE_CREATION_DATE&quot;         TIMESTAMP(9),
&#x9;&#x9;&#x9;    &quot;SOURCE_SERVER_NAME&quot;            VARCHAR2(50),
&#x9;&#x9;&#x9;    &quot;SERVER_VERSION&quot;                VARCHAR2(20),
&#x9;&#x9;&#x9;&#x9;&quot;DEPLOYMENT_DATE&quot;               TIMESTAMP(9),
&#x9;&#x9;&#x9;&#x9;&quot;NODE_HOST&quot;                     VARCHAR2(255),
&#x9;&#x9;&#x9;&#x9;&quot;NODE_PORT&quot;                     NUMBER(9),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_NAME&quot;                 VARCHAR2(255),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_PATH&quot;                 VARCHAR2(4000),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_TYPE&quot;                 VARCHAR2(25),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_SUBTYPE&quot;              VARCHAR2(50),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DATE&quot;             TIMESTAMP(9),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USER&quot;             VARCHAR2(100),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DOMAIN&quot;           VARCHAR2(50),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USERID&quot;           NUMBER(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;COLLISION_ID&quot;                  NUMBER(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;SCRIPT_TEXT&quot;                   CLOB,
&#x9;&#x9;&#x9;&#x9;CONSTRAINT pk_DV_DEPLOYMENT_VALIDATION PRIMARY KEY (&quot;PK_ID&quot;)
&#x9;&#x9;&#x9;);

&#x9;&#x9;&#x9;CREATE SEQUENCE &quot;CIS_KPI&quot;.&quot;DV_DEPLOY_SEQ&quot; START WITH 1 NOCYCLE CACHE 100 NOORDER;
&#x9;&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot; ON &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;COLLISION_ID&quot;);
&#x9;&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot; ON &quot;CIS_KPI&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;RESOURCE_NAME&quot;, &quot;RESOURCE_TYPE&quot;, &quot;ARCHIVE_CREATION_DATE&quot;, &quot;DEPLOYMENT_DATE&quot;, &quot;RESOURCE_MOD_DATE&quot;);

&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of an DV procedure to get the next Oracle sequence number from the database
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.
&#x9;&#x9;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)
&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;SELECT &quot;CIS_KPI&quot;.&quot;DV_DEPLOY_SEQ&quot;.NEXTVAL SEQID FROM DUAL&apos;;
&#x9;&#x9;&#x9;FOR seq AS SELECT * FROM /shared/Common/DeploymentValidation/PackageQueries/oracle/&quot;00_ExecuteDMLIntResult&quot;(sequenceSql) DO
&#x9;&#x9;&#x9;&#x9;SET sequenceNum = seq.outputValue;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;END

&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of the packaged query &quot;00_Execute_DMLIntResult&quot;
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;&#x9;The packaged query is bound to the datasource of choice.

&#x9;&#x9;&#x9;Sql Tab:
&#x9;&#x9;&#x9;&#x9;&lt;version 2&gt;multipartseparator=;+;
&#x9;&#x9;&#x9;&#x9;{0}; ;

&#x9;&#x9;&#x9;Parameters Tab:
&#x9;&#x9;&#x9;&#x9;Input:
&#x9;&#x9;&#x9;&#x9;&#x9;inputSql &#x9;&#x9;&#x9;VARCHAR(32767) - referenced by {0}
&#x9;&#x9;&#x9;&#x9;Output:
&#x9;&#x9;&#x9;&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;CURSOR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputValue&#x9;&#x9;INTEGER



&#x9;---------------------------------------------------------
&#x9;Postgres Syntax for &quot;tutorial&quot; schema:
&#x9;---------------------------------------------------------
&#x9;&#x9;&#x9;DROP INDEX &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot;;
&#x9;&#x9;&#x9;DROP INDEX &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot;;
&#x9;&#x9;&#x9;DROP TABLE &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot;;
&#x9;&#x9;&#x9;DROP SEQUENCE &quot;tutorial&quot;.&quot;DV_DEPLOY_SEQ&quot;;
&#x9;&#x9;&#x9;CREATE SEQUENCE &quot;tutorial&quot;.&quot;DV_DEPLOY_SEQ&quot; INCREMENT BY 1 NO CYCLE CACHE 100;

&#x9;&#x9;&#x9;CREATE TABLE &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (
&#x9;&#x9;&#x9;&#x9;&quot;PK_ID&quot;                         NUMERIC(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;EXTERNAL_ID&quot;                   VARCHAR(50),
&#x9;&#x9;&#x9;    &quot;ARCHIVE_FILE_NAME&quot;             VARCHAR(100),
 &#x9;&#x9;&#x9;    &quot;ARCHIVE_CREATION_DATE&quot;         TIMESTAMP,
&#x9;&#x9;&#x9;    &quot;SOURCE_SERVER_NAME&quot;            VARCHAR(50),
&#x9;&#x9;&#x9;    &quot;SERVER_VERSION&quot;                VARCHAR(20),
&#x9;&#x9;&#x9;&#x9;&quot;DEPLOYMENT_DATE&quot;               TIMESTAMP,
&#x9;&#x9;&#x9;&#x9;&quot;NODE_HOST&quot;                     VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&quot;NODE_PORT&quot;                     INTEGER,
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_NAME&quot;                 VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_PATH&quot;                 VARCHAR(4000),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_TYPE&quot;                 VARCHAR(25),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_SUBTYPE&quot;              VARCHAR(50),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DATE&quot;             TIMESTAMP,
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USER&quot;             VARCHAR(100),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_DOMAIN&quot;           VARCHAR(50),
&#x9;&#x9;&#x9;&#x9;&quot;RESOURCE_MOD_USERID&quot;           NUMERIC(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;COLLISION_ID&quot;                  NUMERIC(19,0),
&#x9;&#x9;&#x9;&#x9;&quot;SCRIPT_TEXT&quot;                   TEXT,
&#x9;&#x9;&#x9;&#x9;CONSTRAINT PK_DV_DEPLOYMENT_VALIDATION PRIMARY KEY (&quot;PK_ID&quot;)
&#x9;&#x9;&#x9;);

&#x9;&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX1&quot; ON &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;COLLISION_ID&quot;);
&#x9;&#x9;&#x9;CREATE INDEX &quot;DV_DEPLOYMENT_VALIDATION_IDX2&quot; ON &quot;tutorial&quot;.&quot;DV_DEPLOYMENT_VALIDATION&quot; (&quot;RESOURCE_NAME&quot;, &quot;RESOURCE_TYPE&quot;, &quot;ARCHIVE_CREATION_DATE&quot;, &quot;DEPLOYMENT_DATE&quot;, &quot;RESOURCE_MOD_DATE&quot;);

&#x9;&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of an DV procedure to get the next Postgres sequence number from the database
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.
&#x9;&#x9;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)
&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;SELECT nextval(&apos;&apos;&quot;tutorial&quot;.&quot;DV_DEPLOY_SEQ&quot;&apos;&apos;)&apos;;
&#x9;&#x9;&#x9;FOR seq AS SELECT * FROM /shared/Common/DeploymentValidation/PackageQueries/oracle/&quot;00_ExecuteDMLIntResult&quot;(sequenceSql) DO
&#x9;&#x9;&#x9;&#x9;SET sequenceNum = seq.outputValue;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;END

&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;Example of the packaged query &quot;00_Execute_DMLIntResult&quot;
&#x9;&#x9;---------------------------------------------------------
&#x9;&#x9;&#x9;The packaged query is bound to the datasource of choice.

&#x9;&#x9;&#x9;Sql Tab:
&#x9;&#x9;&#x9;&#x9;&lt;version 2&gt;multipartseparator=;+;
&#x9;&#x9;&#x9;&#x9;{0}; ;

&#x9;&#x9;&#x9;Parameters Tab:
&#x9;&#x9;&#x9;&#x9;Input:
&#x9;&#x9;&#x9;&#x9;&#x9;inputSql &#x9;&#x9;&#x9;VARCHAR(32767) - referenced by {0}
&#x9;&#x9;&#x9;&#x9;Output:
&#x9;&#x9;&#x9;&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;CURSOR
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputValue&#x9;&#x9;INTEGER



&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.400&#x9;12/31/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8 / 8.x&#x9;&#x9;Created new
&#x9;2020.201&#x9;05/19/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8 / 8.x&#x9;&#x9;Changed parameters to datasourcePath, catalogName, schemaName.  Changed order of creation to resolve issue when no catalog/schema path exists yet.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE validateDeploymentInit(
&#x9;IN destroyExistingResources&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=destroy and recreate resources.  N=do not destroy resources.
&#x9;IN datasourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The path to the oracle, sqlserver or postgres datasource
&#x9;IN catalogName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The catalog name if applicable otherwise null.
&#x9;IN schemaName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The schema name if applicable otherwise null.
&#x9;IN resourceContainer&#x9;&#x9;&#x9;VARCHAR(4000),&#x9;-- The resource container/folder which will contain the generated resources.  If the path does not exist, it will be created.
&#x9;OUT status&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR&#x9;&#x9;&#x9;-- SUCCESS or an exception is thrown.
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;validateDeploymentInit&apos;;
&#x9;DECLARE datasourcePathMod&#x9;&#x9;VARCHAR(4000) DEFAULT REPLACE(datasourcePath, &apos;&quot;&apos;, &apos;&apos;);&#x9;&#x9;-- The path to the oracle, sqlserver or postgres datasource
&#x9;DECLARE resourceContainerMod &#x9;VARCHAR(4000) DEFAULT REPLACE(resourceContainer, &apos;&quot;&apos;, &apos;&apos;);
&#x9;DECLARE DDLPackagedQueryName&#x9;VARCHAR DEFAULT &apos;00_ExecuteDDL&apos;;
&#x9;DECLARE DMLPackagedQueryName&#x9;VARCHAR DEFAULT &apos;00_ExecuteDMLIntResult&apos;;
&#x9;DECLARE tableName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;DV_DEPLOYMENT_VALIDATION&apos;;
&#x9;DECLARE seqProcedureName&#x9;&#x9;VARCHAR DEFAULT &apos;getSequenceNum&apos;;
&#x9;DECLARE datasourceSchemaPath&#x9;VARCHAR(4000);
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE DDLExists&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE DMLExists&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE seqProcExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE tableExists&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE physicalTableExists&#x9;&#x9;BOOLEAN;
&#x9;DECLARE datasourceType&#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;-- Valid datasources: oracle, sqlserver, postgres
&#x9;DECLARE tablePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE containerFound&#x9;&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE scripttext&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE externalSqlText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parameterVector&#x9;&#x9;&#x9;/shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType;
&#x9;DECLARE annotation&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT null;
&#x9;DECLARE attributeVector&#x9;&#x9;&#x9;/shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;XML;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;-- These variables are for invoking /shared/ASAssets/Utilities/validate/helpers/validateDeployment_CreateDrop
&#x9;DECLARE packagedQueryDDLPath&#x9;LONGVARCHAR;&#x9;&#x9;&#x9;-- The path to the &quot;00_ExecuteDDL&quot; packaged query
&#x9;DECLARE displayDDL&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=Display the DDL, N=Do not display the DDL. 
&#x9;DECLARE executeDDL&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=execute the DDL for creating/dropping tables and indexes.  N=Do not execute any DDL.
&#x9;DECLARE dropIndexes&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;&#x9;-- Y=drop the indexes before creating the first.  N=do not drop the indexes.
&#x9;DECLARE dropTables&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=drop the tables before creating the tables.  N=do not drop the tables.
&#x9;DECLARE dropSequences&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=drop the sequences before creating the sequences.  N=do not drop the sequences.
&#x9;DECLARE createTables&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=execute the table creation DDL, N=display the table creation DDL in the console window only.
&#x9;DECLARE createIndexes&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=execute index creation DDL. N=display the index creation DDL in the console window only.
&#x9;DECLARE createSequences&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;Y&apos;;&#x9;-- Y=execute sequence creation DDL. N=display the sequence creation DDL in the console window only.
&#x9;DECLARE result&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;&#x9;&#x9;-- PASS or FAIL.  All must pass for PASS.  If on fails then the result is FAIL.
&#x9;DECLARE cursCombinedResult&#x9;&#x9;LONGVARCHAR;&#x9;&#x9;&#x9;-- Provides a status on each sql statement executed
&#x9;DECLARE sqlScript&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&#x9;&#x9;&#x9;-- Generates an output of the entire script which can be used for external execution

&#x9;-- Validate the input
&#x9;IF (datasourcePath IS NULL OR LENGTH(TRIM(datasourcePath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input parameter &quot;datasourcePath&quot; cannot be null or empty.&apos;;
&#x9;END IF;
&#x9;IF (resourceContainer IS NULL OR LENGTH(TRIM(resourceContainer)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input parameter &quot;resourceContainer&quot; cannot be null or empty.&apos;;
&#x9;END IF;
&#x9;SET status = &apos;SUCCESS&apos;;

&#x9;-- Set the packaged query DDL path
&#x9;SET packagedQueryDDLPath = resourceContainerMod||&apos;/&apos;||DDLPackagedQueryName;

&#x9;-- Extract the various parts of the resource path
&#x9;CALL /lib/resource/ResourceExists(datasourcePathMod, &apos;DATA_SOURCE&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;datasourcePath&quot; does not exist.&apos;;
&#x9;END IF;

&#x9;-- Get the data source type
&#x9;FOR r AS SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor(datasourcePathMod, &apos;DATA_SOURCE&apos;) DO
&#x9;&#x9;IF (INSTR(LOWER(REPLACE(r.dataSourceType, &apos; &apos;, &apos;&apos;)), &apos;oracle&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET datasourceType = &apos;oracle&apos;;
&#x9;&#x9;ELSEIF (INSTR(LOWER(REPLACE(r.dataSourceType, &apos; &apos;, &apos;&apos;)), &apos;sqlserver&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET datasourceType = &apos;sqlserver&apos;;
&#x9;&#x9;ELSEIF (INSTR(LOWER(REPLACE(r.dataSourceType, &apos; &apos;, &apos;&apos;)), &apos;postgres&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET datasourceType = &apos;postgres&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The data source type is not support.  datasourceType=[&apos;||r.datasourceType||&apos;] for the datasource path=[&apos;||datasourcePathMod||&apos;]&apos;;
&#x9;&#x9;END IF;
&#x9;END FOR;

&#x9;-- Set the table path
&#x9;SET tablePath = datasourcePath;
&#x9;IF (catalogName IS NOT NULL) THEN
&#x9;&#x9;SET tablePath = tablePath||&apos;/&apos;||catalogName;
 &#x9;END IF;
&#x9;IF (schemaName IS NOT NULL) THEN
&#x9;&#x9;SET tablePath = tablePath||&apos;/&apos;||schemaName;
 &#x9;END IF;
&#x9;SET tablePath = tablePath||&apos;/&apos;||tableName;

&#x9;-- Destroy the resource if it exists and was requested to destroy
&#x9;IF (destroyExistingResources IS NOT NULL AND UPPER(destroyExistingResources) = &apos;Y&apos;) THEN
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(packagedQueryDDLPath, null, &apos;PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END;
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName, null, &apos;PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END;
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(resourceContainerMod||&apos;/&apos;||seqProcedureName, null, &apos;PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END;
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(resourceContainerMod||&apos;/&apos;||tableName, null, &apos;TABLE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END;
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/destroyResource(tablePath, null, &apos;TABLE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END;
&#x9;END IF;

&#x9;-- Test for the packaged query container path
&#x9;CALL /lib/resource/ResourceExists(resourceContainerMod, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createAllFoldersPrivileges(resourceContainerMod, 1, 1, success, faultResponse);
&#x9;&#x9;END;
&#x9;END IF;

&#x9;-- Test for the DDL packaged query
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;CALL /lib/resource/ResourceExists(packagedQueryDDLPath, &apos;PROCEDURE&apos;, null, DDLExists);
&#x9;END;

&#x9;-- Test for the DML sequence generator packaged query
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;CALL /lib/resource/ResourceExists(resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName, &apos;PROCEDURE&apos;, null, DMLExists);
&#x9;END;

&#x9;-- Test for the sequence num procedure
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;CALL /lib/resource/ResourceExists(resourceContainerMod||&apos;/&apos;||seqProcedureName, &apos;PROCEDURE&apos;, null, seqProcExists);
&#x9;END;

&#x9;-- Test for the deployment validate view
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;CALL /lib/resource/ResourceExists(resourceContainerMod||&apos;/&apos;||tableName, &apos;TABLE&apos;, null, tableExists);
&#x9;END;

&#x9;-- Test for the physical database table
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;CALL /lib/resource/ResourceExists(tablePath, &apos;TABLE&apos;, null, physicalTableExists);
&#x9;END;

&#x9;CALL PRINT(moduleName||&apos; : datasourceType=[&apos;||NVL(datasourceType,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : datasourcePath=[&apos;||NVL(datasourcePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : catalogName=[&apos;||NVL(catalogName,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : schemaName=[&apos;||NVL(schemaName,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : tablePath=[&apos;||NVL(tablePath,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : resourceContainerMod=[&apos;||NVL(resourceContainerMod,&apos;null&apos;)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : DDLPackagedQuery=[&apos;||NVL(packagedQueryDDLPath,&apos;null&apos;)||&apos;] exists=[&apos;||CAST(DDLExists AS VARCHAR)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : DMLPackagedQuery=[&apos;||NVL(resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName,&apos;null&apos;)||&apos;] exists=[&apos;||CAST(DMLExists AS VARCHAR)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : seqProcedure=[&apos;||NVL(resourceContainerMod||&apos;/&apos;||seqProcedureName,&apos;null&apos;)||&apos;] exists=[&apos;||CAST(seqProcExists AS VARCHAR)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : table view=[&apos;||NVL(resourceContainerMod||&apos;/&apos;||tableName,&apos;null&apos;)||&apos;] exists=[&apos;||CAST(tableExists AS VARCHAR)||&apos;]&apos;);
&#x9;CALL PRINT(moduleName||&apos; : physical table=[&apos;||NVL(tablePath,&apos;null&apos;)||&apos;] exists=[&apos;||CAST(physicalTableExists AS VARCHAR)||&apos;]&apos;);
&#x9;CALL PRINT(&apos;&apos;);

&#x9;/**********************************************************
&#x9; * Create and Update Packaged Query: 00_ExecuteDMLIntResult
&#x9; **********************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Create the initial packaged query if it does not exist
&#x9;&#x9;IF (NOT DDLExists) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : createResource(&apos;&apos;&apos;||packagedQueryDDLPath||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;EXTERNAL_SQL_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createResource(resourceContainerMod, DDLPackagedQueryName, &apos;PROCEDURE&apos;, &apos;EXTERNAL_SQL_PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : RESOURCE EXISTS(&apos;&apos;&apos;||packagedQueryDDLPath||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;EXTERNAL_SQL_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Update the initial packaged query if it does not exist
&#x9;&#x9;IF (NOT DDLExists) THEN
&#x9;&#x9;&#x9;IF (LOWER(datasourceType) = &apos;oracle&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET externalSqlText = &#x9;&apos;&lt;version 2&gt;multipartseparator=;+;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;{0}; ;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;commit; ;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;select 1 result from dual; ;&apos;||CHR(10);
&#x9;&#x9;&#x9;ELSEIF (LOWER(datasourceType) = &apos;sqlserver&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET externalSqlText = &#x9;&apos;&lt;version 2&gt;multipartseparator=;+;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;{0}; ;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;select 1; ;&apos;||CHR(10);
&#x9;&#x9;&#x9;ELSEIF (LOWER(datasourceType) = &apos;postgres&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET externalSqlText = &#x9;&apos;&lt;version 2&gt;multipartseparator=;+;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;{0}; ;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;select 1; ;&apos;||CHR(10);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET annotation = LOWER(datasourceType)||&apos; packaged query to execute DDL statements such as create table &quot;schema&quot;.&quot;table&quot;(...)&apos;;

&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;parameterVector&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- any name
&#x9;&#x9;&#x9;&#x9;sqlType&#x9;&#x9;&#x9;&#x9;VECTOR(sqlType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;definition&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeType&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencePath&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referenceTypeName&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proprietaryModel&#x9;VARBINARY,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trailingSpaces&#x9;&#x9;BIT&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;xmlType&#x9;&#x9;&#x9;&#x9;VECTOR(xmlType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;pseudoType&#x9;&#x9;&#x9;VECTOR(pseudoType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;direction&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- IN, OUT, INOUT
&#x9;&#x9;&#x9;&#x9;isNullable&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- IS_NULLABLE or IS_NOT_NULLABLE
&#x9;&#x9;&#x9;&#x9;attributes&#x9;&#x9;&#x9;VECTOR(AttributeCompleteType),
&#x9;&#x9;&#x9;&#x9;annotation&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;&#x9;-- any text
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;SET parameterVector = VECTOR[
&#x9;&#x9;&#x9;&#x9;(&#x9;&apos;inputSQL&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR[(&apos;VARCHAR(2147483647)&apos;,&apos;LONGVARCHAR&apos;,null,null,null,null,null)],
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IN&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IS_NULLABLE&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;),
&#x9;&#x9;&#x9;&#x9;(&#x9;&apos;result&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR[(&apos;CURSOR (outputValue INTEGER)&apos;,&apos;CURSOR&apos;,null,null,null,null,null)],
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;OUT&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IS_NULLABLE&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;];
&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;attributeVector&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
&#x9;&#x9;&#x9;&#x9;attrName&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- mandatory
&#x9;&#x9;&#x9;&#x9;attrType&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- mandatory
&#x9;&#x9;&#x9;&#x9;attrValue&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;&#x9;-- optional (1 of attrValue, valueList, valueMap or valueArray must be supplied)
&#x9;&#x9;&#x9;&#x9;valueList&#x9;&#x9;&#x9;VECTOR(itemType),&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;valueMap&#x9;&#x9;&#x9;VECTOR(entryType),&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;valueArray&#x9;&#x9;&#x9;VECTOR(LONGVARCHAR),&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;unset&#x9;&#x9;&#x9;&#x9;BIT&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;SET attributeVector = null;

&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateExternalSqlProcedure(&apos;&apos;&apos;||packagedQueryDDLPath||&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateExternalSqlProcedure(packagedQueryDDLPath, externalSqlText, datasourcePath, parameterVector, annotation, attributeVector, success);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;

&#x9;/**********************************************************
&#x9; * Create and Update Packaged Query: 00_ExecuteDDL
&#x9; **********************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Create the initial packaged query if it does not exist
&#x9;&#x9;IF (NOT DDLExists) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : createResource(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;EXTERNAL_SQL_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createResource(resourceContainerMod, DMLPackagedQueryName, &apos;PROCEDURE&apos;, &apos;EXTERNAL_SQL_PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : RESOURCE EXISTS(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;EXTERNAL_SQL_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Update the initial packaged query if it does not exist
&#x9;&#x9;IF (NOT DDLExists) THEN
&#x9;&#x9;&#x9;SET externalSqlText = &#x9;&apos;&lt;version 2&gt;multipartseparator=;+;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;{0}; ;&apos;||CHR(10);
&#x9;&#x9;&#x9;SET annotation = LOWER(datasourceType)||&apos; packaged query to execute DML statements such as SELECT NEXT VALUE FOR &quot;&apos;||schemaName||&apos;&quot;.&quot;DV_DEPLOY_SEQ&quot;&apos;;

&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;parameterVector&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- any name
&#x9;&#x9;&#x9;&#x9;sqlType&#x9;&#x9;&#x9;&#x9;VECTOR(sqlType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;definition&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;nativeType&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referencePath&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;referenceTypeName&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;proprietaryModel&#x9;VARBINARY,
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;name&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;trailingSpaces&#x9;&#x9;BIT&#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;xmlType&#x9;&#x9;&#x9;&#x9;VECTOR(xmlType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;pseudoType&#x9;&#x9;&#x9;VECTOR(pseudoType),&#x9;&#x9;-- 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;&#x9;direction&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- IN, OUT, INOUT
&#x9;&#x9;&#x9;&#x9;isNullable&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- IS_NULLABLE or IS_NOT_NULLABLE
&#x9;&#x9;&#x9;&#x9;attributes&#x9;&#x9;&#x9;VECTOR(AttributeCompleteType),
&#x9;&#x9;&#x9;&#x9;annotation&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;&#x9;&#x9;-- any text
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;SET parameterVector = VECTOR[
&#x9;&#x9;&#x9;&#x9;(&#x9;&apos;inputSQL&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR[(&apos;VARCHAR(2147483647)&apos;,&apos;LONGVARCHAR&apos;,null,null,null,null,null)],
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IN&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IS_NULLABLE&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;),
&#x9;&#x9;&#x9;&#x9;(&#x9;&apos;result&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;VECTOR[(&apos;CURSOR (outputValue INTEGER)&apos;,&apos;CURSOR&apos;,null,null,null,null,null)],
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;OUT&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;IS_NULLABLE&apos;,
&#x9;&#x9;&#x9;&#x9;&#x9;null,
&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;];
&#x9;&#x9;&#x9;/*
&#x9;&#x9;&#x9;attributeVector&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/repository/definitions/RepositoryDefinitions.AttributeCompleteVectorType,
&#x9;&#x9;&#x9;&#x9;attrName&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- mandatory
&#x9;&#x9;&#x9;&#x9;attrType&#x9;&#x9;&#x9;VARCHAR(255),&#x9;&#x9;&#x9;-- mandatory
&#x9;&#x9;&#x9;&#x9;attrValue&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;&#x9;-- optional (1 of attrValue, valueList, valueMap or valueArray must be supplied)
&#x9;&#x9;&#x9;&#x9;valueList&#x9;&#x9;&#x9;VECTOR(itemType),&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;valueMap&#x9;&#x9;&#x9;VECTOR(entryType),&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;valueArray&#x9;&#x9;&#x9;VECTOR(LONGVARCHAR),&#x9;-- optional
&#x9;&#x9;&#x9;&#x9;unset&#x9;&#x9;&#x9;&#x9;BIT&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- optional
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;SET attributeVector = null;

&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateExternalSqlProcedure(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName||&apos;&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateExternalSqlProcedure(resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName, externalSqlText, datasourcePath, parameterVector, annotation, attributeVector, success);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;


&#x9;/**********************************************************
&#x9; * Create the procedure &quot;getSequenceNum&quot;
&#x9; **********************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Create the &quot;getSequenceNum&quot; procedure if it does not exist
&#x9;&#x9;IF (NOT seqProcExists) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : createResource(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||seqProcedureName||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;SQL_SCRIPT_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createResource(resourceContainerMod, seqProcedureName, &apos;PROCEDURE&apos;, &apos;SQL_SCRIPT_PROCEDURE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : RESOURCE EXISTS(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||seqProcedureName||&apos;&apos;&apos;, &apos;&apos;PROCEDURE&apos;&apos;, &apos;&apos;SQL_SCRIPT_PROCEDURE&apos;&apos;)&apos;);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Update the squence procedure if it was newly created.
&#x9;&#x9;IF (NOT seqProcExists) THEN
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(resourceContainerMod||&apos;/&apos;||DMLPackagedQueryName, null, resourcePath);
&#x9;&#x9;&#x9;IF (LOWER(datasourceType) = &apos;oracle&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET scripttext = &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;BEGIN&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;&apos;SELECT &quot;&apos;||schemaName||&apos;&quot;.&quot;DV_DEPLOY_SEQ&quot;.NEXTVAL SEQID FROM DUAL&apos;&apos;;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;FOR seq AS SELECT * FROM &apos;||resourcePath||&apos;(sequenceSql) DO&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;SET sequenceNum = seq.outputValue;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;END FOR;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;END&apos;||CHR(10);
&#x9;&#x9;&#x9;ELSEIF (LOWER(datasourceType) = &apos;sqlserver&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET scripttext = &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;BEGIN&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;&apos;SELECT NEXT VALUE FOR &quot;&apos;||schemaName||&apos;&quot;.&quot;DV_DEPLOY_SEQ&quot;&apos;&apos;;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;FOR seq AS SELECT * FROM &apos;||resourcePath||&apos;(sequenceSql) DO&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;SET sequenceNum = seq.outputValue;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;END FOR;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;END&apos;||CHR(10);
&#x9;&#x9;&#x9;ELSEIF (LOWER(datasourceType) = &apos;postgres&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET scripttext = &#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;--&#x9;getSequenceNum:  This procedure is used to return a sequence number for /shared/ASAssets/Utilities/validate/validateDeployment.&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;PROCEDURE getSequenceNum(OUT sequenceNum INTEGER)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;BEGIN&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;DECLARE sequenceSql VARCHAR DEFAULT &apos;&apos;SELECT nextval(&apos;&apos;&apos;&apos;&quot;&apos;||schemaName||&apos;&quot;.&quot;DV_DEPLOY_SEQ&quot;&apos;&apos;&apos;&apos;)&apos;&apos;;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;FOR seq AS SELECT * FROM &apos;||resourcePath||&apos;(sequenceSql) DO&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;&#x9;SET sequenceNum = seq.outputValue;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&#x9;END FOR;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;END&apos;||CHR(10);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateSqlScript(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||seqProcedureName||&apos;&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateSqlScript(resourceContainerMod||&apos;/&apos;||seqProcedureName, scripttext, success, createResponse, faultResponse);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;


&#x9;/**********************************************************
&#x9; * Create the database resources
&#x9; **********************************************************/
&#x9;IF (NOT physicalTableExists) THEN
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos; : Introspect the datasource: &apos;||datasourcePath);
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(packagedQueryDDLPath, null, packagedQueryDDLPath);

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/deployment/validate/helpers/validateDeploymentInit_CreateDrop(
&#x9;&#x9;&#x9;&#x9;datasourceType,&#x9;&#x9;-- Valid datasources: oracle, sqlserver, postgres
&#x9;&#x9;&#x9;&#x9;datasourcePath,&#x9;&#x9;-- The datasource path
&#x9;&#x9;&#x9;&#x9;catalogName,&#x9;&#x9;-- The name of the catalog if applicable otherwise null.
&#x9;&#x9;&#x9;&#x9;schemaName,&#x9;&#x9;&#x9;-- The name of the schema if applicable otherwise null.
&#x9;&#x9;&#x9;&#x9;packagedQueryDDLPath,-- The path to the &quot;00_ExecuteDDL&quot; packaged query
&#x9;&#x9;&#x9;&#x9;displayDDL,&#x9;&#x9;&#x9;-- Y=Display the DDL, N=Do not display the DDL. 
&#x9;&#x9;&#x9;&#x9;executeDDL,&#x9;&#x9;&#x9;-- Y=execute the DDL for creating/dropping tables and indexes.  N=Do not execute any DDL.
&#x9;&#x9;&#x9;&#x9;dropIndexes,&#x9;&#x9;-- Y=drop the indexes before creating the first.  N=do not drop the indexes.
&#x9;&#x9;&#x9;&#x9;dropTables,&#x9;&#x9;&#x9;-- Y=drop the tables before creating the tables.  N=do not drop the tables.
&#x9;&#x9;&#x9;&#x9;dropSequences,&#x9;&#x9;-- Y=drop the sequences before creating the sequences.  N=do not drop the sequences.
&#x9;&#x9;&#x9;&#x9;createTables,&#x9;&#x9;-- Y=execute the table creation DDL, N=display the table creation DDL in the console window only.
&#x9;&#x9;&#x9;&#x9;createIndexes,&#x9;&#x9;-- Y=execute index creation DDL. N=display the index creation DDL in the console window only.
&#x9;&#x9;&#x9;&#x9;createSequences,&#x9;-- Y=execute sequence creation DDL. N=display the sequence creation DDL in the console window only.
&#x9;&#x9;&#x9;&#x9;result,&#x9;&#x9;&#x9;&#x9;-- PASS or FAIL.  All must pass for PASS.  If on fails then the result is FAIL.
&#x9;&#x9;&#x9;&#x9;cursCombinedResult,&#x9;-- Provides a status on each sql statement executed
&#x9;&#x9;&#x9;&#x9;sqlScript&#x9;&#x9;&#x9;-- Generates an output of the entire script which can be used for external execution
&#x9;&#x9;&#x9;);
&#x9;&#x9;SET status = result;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;END;
&#x9;ELSE
&#x9;&#x9;CALL PRINT(moduleName||&apos; : RESOURCE EXISTS(&apos;&apos;&apos;||tablePath||&apos;&apos;&apos;, &apos;&apos;TABLE&apos;&apos;, &apos;&apos;SQL_TABLE&apos;&apos;)&apos;);
&#x9;END IF;

&#x9;/**********************************************************
&#x9; * Create the table &quot;DV_DEPLOYMENT_VALIDATION&quot;
&#x9; **********************************************************/
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Create the &quot;DV_DEPLOYMENT_VALIDATION&quot; table if it does not exist
&#x9;&#x9;IF (NOT tableExists) THEN
&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : createResource(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||tableName||&apos;&apos;&apos;, &apos;&apos;TABLE&apos;&apos;, &apos;&apos;SQL_TABLE&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createResource(resourceContainerMod, tableName, &apos;TABLE&apos;, &apos;SQL_TABLE&apos;, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : RESOURCE EXISTS(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||tableName||&apos;&apos;&apos;, &apos;&apos;TABLE&apos;&apos;, &apos;&apos;SQL_TABLE&apos;&apos;)&apos;);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;
&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;-- Update the &quot;DV_DEPLOYMNET_VALIDATION&quot; table if it was newly created.
&#x9;&#x9;IF (NOT tableExists) THEN
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(tablePath, null, resourcePath);
&#x9;&#x9;&#x9;SET scripttext = &apos;SELECT * FROM &apos;||resourcePath||CHR(10);

&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : updateSqlScript(&apos;&apos;&apos;||resourceContainerMod||&apos;/&apos;||tableName||&apos;&apos;&apos;)&apos;);
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateSqlTable(resourceContainerMod||&apos;/&apos;||tableName, scripttext, success, createResponse, faultResponse);
&#x9;&#x9;END IF;
&#x9;EXCEPTION
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;RAISE;
&#x9;END;
END</attribute>
  <attribute name="creationDate" type="LONG">1574171156009</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">7/401</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/400</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/403</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/402</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/498</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/696</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/596</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/695</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/644</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/702</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/602</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/581</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/399</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/423</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/398</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/658</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/657</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/686</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/409</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/408</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/512</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/405</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/404</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/417</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/714</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/407</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">7/406</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/518</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1574171156009</attribute>
</metadata>