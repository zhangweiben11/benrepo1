<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="importResourceOwnership" path="/shared/Delta_DV/_scripts/Utilities/deployment/privileges/importResourceOwnership" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[importResourceOwnership:

&#x9;This procedure is typically invoked by the deployment script via the published datasource ASAssets to apply resource ownership 
&#x9;&#x9;from the previously saved resource_ownership.txt file that lives on the TDV server.
&#x9;&#x9;A deployment shell script may execute the following
&#x9;&#x9;&#x9;$DIRNAME/JdbcSample.sh $DATABASE $HOST $DBPORT $USER $PASSWORD $DOMAIN &quot;SELECT * FROM Utilities.deployment.importResourceOwnership(&apos;N&apos;, &apos;$RESOWNERFILE&apos;)&quot;

&#x9;Input:
&#x9;&#x9;debug &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Y=debug on,  N=debug off.  Debug writes to CONSOLE and LOG.
 &#x9;&#x9;resourceOwnershipFileName &#x9;- The full TDV server file path to put the resource ownership into.
&#x9;Output:
&#x9;&#x9;result &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- SUCCESS otherwise an exception is thrown.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;10/16/2014      Jeremy Akers        6.2.6           Created new
&#x9;2019.200&#x9;05/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="resourceOwnershipFileName" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="invalidPathList" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/deployment/privileges/helpers/splitResourceType" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="ownerPathList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outPipe" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="rPath">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="rType">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/file/FileProcessingCJP/getFileContentsAscii" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="filePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="fileContent" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/changeResourceOwner" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="recurseChildren" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="newOwner" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="newOwnerDomain" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;importResourceOwnership:

&#x9;This procedure is typically invoked by the deployment script via the published datasource ASAssets to apply resource ownership 
&#x9;&#x9;from the previously saved resource_ownership.txt file that lives on the TDV server.
&#x9;&#x9;A deployment shell script may execute the following
&#x9;&#x9;&#x9;$DIRNAME/JdbcSample.[sh|bat] $DATABASE $HOST $DBPORT $USER $PASSWORD $DOMAIN &quot;SELECT * FROM Utilities.deployment.importResourceOwnership(&apos;N&apos;, &apos;$RESOWNERFILE&apos;)&quot;

&#x9;Input:
&#x9;&#x9;debug &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- Y=debug on,  N=debug off.  Debug writes to CONSOLE and LOG.
 &#x9;&#x9;resourceOwnershipFileName &#x9;- The full TDV server file path to put the resource ownership into.
&#x9;Output:
&#x9;&#x9;result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;- SUCCESS if no invalid paths, WARNING if invalid path list otherwise an exception is thrown.
&#x9;&#x9;invalidPathList&#x9;&#x9;&#x9;&#x9;- If not null, then a comma-separated list of paths [path:type] that are invalid as they do not exist and no ownership was applied.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;10/16/2014      Jeremy Akers        6.2.6           Created new
&#x9;2019.200&#x9;05/30/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified
 
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE importResourceOwnership(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=debug on,  N=debug off.  Debug writes to CONSOLE and LOG.
&#x9;IN resourceOwnershipFileName&#x9;&#x9;LONGVARCHAR,&#x9;-- The full TDV server file path to put the resource ownership into.
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- SUCCESS if no invalid paths, WARNING if invalid path list otherwise an exception is thrown.
&#x9;OUT invalidPathList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- If not null, then a comma-separated list of paths [path:type] that are invalid as they do not exist and no ownership was applied.
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;importResourceOwnership&apos;;
&#x9;DECLARE ownershipEntries &#x9;LONGVARCHAR;
&#x9;DECLARE recurseChildren&#x9;&#x9;BIT DEFAULT 1;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resExists&#x9;&#x9;&#x9;BOOLEAN;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET message = moduleName||&#x9;&apos; :: BEGIN execute.&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    INPUT: &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;      resourceOwnershipFileName=&apos;||NVL(CAST(resourceOwnershipFileName AS VARCHAR),&apos;null&apos;)||CHR(10);
&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;CALL LOG(message);
&#x9;END IF;

&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/file/FileProcessingCJP/getFileContentsAscii(resourceOwnershipFileName, ownershipEntries);

&#x9;-- Remove the linefeed character
&#x9;set ownershipEntries = REPLACE(ownershipEntries, CHR(10), &apos;&apos;);

&#x9;-- Set the resource ownership for each resource path and type
&#x9;for r as select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/deployment/&quot;privileges&quot;/helpers/splitResourceType(ownershipEntries) do
&#x9;&#x9;if (r.rPath is not null and length(trim(r.rPath)) &gt; 0 and r.rType is not null and length(trim(r.rType)) &gt; 0) then
&#x9;&#x9;&#x9;-- Apply ownership if ownerName is not a real null and the value is not &apos;null&apos;
&#x9;&#x9;&#x9;if (r.ownerName is not null and r.ownerName &lt;&gt; &apos;null&apos; and r.ownerDomain is not null and r.ownerDomain &lt;&gt; &apos;null&apos;) then
&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(r.rPath, r.rType, null, resExists);
&#x9;&#x9;&#x9;&#x9;if (resExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = moduleName||&apos; : Setting resource ownership for:  owner=&apos;||NVL(r.ownerName,&apos;null&apos;)||&apos;  domain=&apos;||NVL(r.ownerDomain,&apos;null&apos;)||&apos;  path=&apos;||NVL(r.rPath,&apos;null&apos;)||&apos;  type=&apos;||NVL(r.rType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call log(message);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/changeResourceOwner(recurseChildren, r.rPath, r.rType, r.ownerName, r.ownerDomain);
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set message = moduleName||&apos; : Skipping resource ownership [path/type does not exist] for:  owner=&apos;||NVL(r.ownerName,&apos;null&apos;)||&apos;  domain=&apos;||NVL(r.ownerDomain,&apos;null&apos;)||&apos;  path=&apos;||NVL(r.rPath,&apos;null&apos;)||&apos;  type=&apos;||NVL(r.rType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call log(message);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (invalidPathList is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set invalidPathList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (LENGTH(invalidPathList) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set invalidPathList = invalidPathList || &apos;,&apos;||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set invalidPathList = invalidPathList || NVL(r.rPath,&apos;null&apos;)||&apos;:&apos;||NVL(r.rType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;set message = moduleName||&apos; : Skipping resource ownership [owner or domain is null] for:  owner=&apos;||NVL(r.ownerName,&apos;null&apos;)||&apos;  domain=&apos;||NVL(r.ownerDomain,&apos;null&apos;)||&apos;  path=&apos;||NVL(r.rPath,&apos;null&apos;)||&apos;  type=&apos;||NVL(r.rType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;call print(message);
&#x9;&#x9;&#x9;&#x9;&#x9;call log(message);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;else
&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;set message = moduleName||&apos; : Skipping resource ownership [path or type is null] for:  owner=&apos;||NVL(r.ownerName,&apos;null&apos;)||&apos;  domain=&apos;||NVL(r.ownerDomain,&apos;null&apos;)||&apos;  path=&apos;||NVL(r.rPath,&apos;null&apos;)||&apos;  type=&apos;||NVL(r.rType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;call print(message);
&#x9;&#x9;&#x9;&#x9;call log(message);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end for;

&#x9;IF (invalidPathList IS NOT NULL) THEN
&#x9;&#x9;SET message = moduleName||&#x9;&apos; :: END WARNING: invalid path list=&apos;||invalidPathList;
&#x9;&#x9;SET result = &apos;WARNING&apos;;
&#x9;ELSE
&#x9;&#x9;SET message = moduleName||&#x9;&apos; :: END sucessfully executed.&apos;;
&#x9;&#x9;SET result = &apos;SUCCESS&apos;;
&#x9;END IF;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;CALL LOG(message);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1381455664206</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">12/72</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/93</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/73</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/94</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/116</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/101</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/115</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/100</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/79</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/54</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/55</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/80</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
  </attribute>
</metadata>