<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="copyResources" path="/shared/Delta_DV/_scripts/Utilities/repository/copyResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[copyResources:
&#x9;-- CIS Repository Helper Procedure --
&#x9;This is a procedure is used to copy all of the CIS resources from a source folder to a target folder.
&#x9;If the target folder does not exist, this procedure will create it and then copy the source folder resources.
 
&#x9;Input:
&#x9;&#x9;sourceFolderPath - CIS source folder path.  Folder must exist.
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities
&#x9;&#x9;targetFolderPath - CIS target folder path.  Gets created if it does not exist
&#x9;&#x9;&#x9;Values: e.g. /shared/tmp
&#x9;Output:
&#x9;&#x9;success&#x9;- true(1) or false(0)
&#x9;&#x9;faultResponse - null if succesful otherwise contains a fault resposne.
&#x9;&#x9;&#x9;Values: Fault Resposne XML value
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;2012.4&#x9;&#x9;10/25/2012&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated to pass resource type to getResourceListRecursive
&#x9;2013.3&#x9;&#x9;08/01/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Updated resourceList to use RepositoryDefinitionsRecursive.resourceTreeType
&#x9;2018.100&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="sourceFolderPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="targetFolderPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/copyResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="copyResource" direction="IN">
        <datatype name="copyResource" extendedName="{http://www.compositesw.com/services/system/admin/resource}copyResource" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}copyResource" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}copyResource">
          <schemaDatatype>
            <datatype name="copyResource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="copyResourceRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="257">
              <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="targetContainerPath" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="newName" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="copyMode" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="copyMode" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="copyResourceResponse" direction="OUT">
        <datatype name="copyResourceResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}copyResourceResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}copyResourceResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}copyResourceResponse">
          <schemaDatatype>
            <datatype name="copyResourceResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="copyResourceResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="513"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="769">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1025">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createAllFolders" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/createFolder" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="sourceFolderPath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* copyResources:
&#x9;-- CIS Repository Helper Procedure --
&#x9;This is a procedure is used to copy all of the CIS resources from a source folder to a target folder.
&#x9;If the target folder does not exist, this procedure will create it and then copy the source folder resources.
 
&#x9;Input:
&#x9;&#x9;sourceFolderPath - CIS source folder path.  Folder must exist.
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities
&#x9;&#x9;targetFolderPath - CIS target folder path.  Gets created if it does not exist
&#x9;&#x9;&#x9;Values: e.g. /shared/tmp
&#x9;Output:
&#x9;&#x9;success&#x9;- true(1) or false(0)
&#x9;&#x9;faultResponse - null if succesful otherwise contains a fault resposne.
&#x9;&#x9;&#x9;Values: Fault Resposne XML value
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;2012.4&#x9;&#x9;10/25/2012&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Updated to pass resource type to getResourceListRecursive
&#x9;2013.3&#x9;&#x9;08/01/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Updated resourceList to use RepositoryDefinitionsRecursive.resourceTreeType
&#x9;2018.100&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2020.201&#x9;05/18/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed call to getResourceListRecursive since it had additional result columns added to it.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE copyResources(
&#x9;IN sourceFolderPath &#x9;VARCHAR(4096),
&#x9;IN targetFolderPath&#x9;&#x9;VARCHAR,
&#x9;OUT success&#x9;&#x9;&#x9;&#x9;BIT, -- true(1) or false(0)
&#x9;OUT faultResponse &#x9;&#x9;XML
)
BEGIN
    DECLARE moduleName          CONSTANT VARCHAR DEFAULT &apos;repository/copyResources&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/&quot;_debug&quot;.debug;
&#x9;DECLARE resourceName &#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceFolderPath&#x9;VARCHAR(4096);
&#x9;DECLARE resourcePath&#x9;&#x9;VARCHAR;
&#x9;DECLARE createInput &#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createResponse &#x9;&#x9;XML;
&#x9;DECLARE childResourceList&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE resourceExists&#x9;&#x9;BOOLEAN;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

    set success = 1;
    -- If the source folders exists then start copying
&#x9;call /lib/resource/ResourceExists(sourceFolderPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;if (resourceExists) then

 &#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : ----------------------------------------------------&apos;);
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : Target Folder Path: &apos;||targetFolderPath);
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : ----------------------------------------------------&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- Insure that the base target folder has been created
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createAllFolders(targetFolderPath, success, faultResponse);

&#x9;&#x9;&#x9;-- Next get a list of Folder Resources in the &apos;Source&apos; directory structure
&#x9;&#x9;&#x9;-- Traverse the source structure and duplicate that structure in the &apos;Target&apos; folder
&#x9;&#x9;&#x9;for resource as 
&#x9;&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListRecursive(sourceFolderPath, &apos;CONTAINER&apos;)
&#x9;&#x9;&#x9;&#x9;where subType = &apos;FOLDER_CONTAINER&apos;
&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : FOLDER SOURCE: &apos;||resource.resPath);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set resourceFolderPath = REPLACE(resource.resPath, sourceFolderPath, targetFolderPath);
&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : FOLDER TARGET: &apos;||resourceFolderPath);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (resource.subType = &apos;FOLDER_CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- If the target folder does not exist then create else
&#x9;&#x9;&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(resourceFolderPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;&#x9;&#x9;&#x9;if (NOT resourceExists) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : CREATE FOLDER: &apos;||resourceFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/createFolder(resourceFolderPath, success, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;-- Then copy the resources
&#x9;&#x9;&#x9;set resourcePath = null;

&#x9;&#x9;&#x9;myloop:
&#x9;&#x9;&#x9;for resource as 
&#x9;&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListRecursive(sourceFolderPath, &apos;CONTAINER&apos;)
&#x9;&#x9;&#x9;&#x9;where subType &lt;&gt; &apos;FOLDER_CONTAINER&apos;
&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;-- If the resource is a Data Source then it is not permitted to copy its children.
&#x9;&#x9;&#x9;&#x9;-- Get the list of all the children to verify against.
&#x9;&#x9;&#x9;&#x9;if (resource.resType = &apos;DATA_SOURCE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;set childResourceList = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;for r as select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListRecursive(resource.resPath, &apos;DATA_SOURCE&apos;) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childResourceList = childResourceList || r.resPath||&apos;;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;
&#x9;&#x9;&#x9;&#x9;-- Check the current resource path against the last known data source child resource list.
&#x9;&#x9;&#x9;&#x9;-- If the resource is in the data source child list then skip copying it by iterating back to the top of the loop.
&#x9;&#x9;&#x9;&#x9;set resourcePath = resource.resPath ||&apos;;&apos;;
&#x9;&#x9;&#x9;&#x9;if (POSITION(resourcePath IN childResourceList) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;iterate myloop;
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- The resource is not a child of a data source so go ahead and copy it to the target path.
&#x9;&#x9;&#x9;&#x9;set resourceFolderPath = REPLACE(resource.resPath, sourceFolderPath, targetFolderPath);
&#x9;&#x9;&#x9;&#x9;if (resource.subType &lt;&gt; &apos;FOLDER_CONTAINER&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/returnFolderNameAndFolderPath(resourceFolderPath, &apos;E&apos;, resourceName, resourceFolderPath);
&#x9;&#x9;&#x9;&#x9;&#x9;set createInput = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;resource:copyResource xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot;&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:path&gt;&apos; || CAST(XMLTEXT(resource.resPath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:type&gt;&apos; || CAST(XMLTEXT(resource.resType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:targetContainerPath&gt;&apos; || CAST(XMLTEXT(resourceFolderPath) AS LONGVARCHAR) || &apos;&lt;/resource:targetContainerPath&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:newName&gt;&apos; || CAST(XMLTEXT(resourceName) AS LONGVARCHAR) || &apos;&lt;/resource:newName&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;    &lt;resource:copyMode&gt;OVERWRITE_REPLACE_IF_EXISTS&lt;/resource:copyMode&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&lt;/resource:copyResource&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : ******************************************&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : SOURCE RES TYPE: &apos;||resource.resType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : SOURCE SUB TYPE: &apos;||resource.subType);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :     COPY SOURCE: &apos;||resource.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :     COPY TARGET: &apos;||resourceFolderPath || &apos;/&apos;|| resourceName);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : &#x9;&#x9;&#x9;&#x9;createInput=&apos;||CHR(10) || createInput);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Invoke the copyResource API
&#x9;&#x9;&#x9;&#x9;&#x9;Call /services/webservices/system/admin/resource/operations/copyResource(createInput, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;if (faultResponse is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set success = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : faultResponse=&apos;||NVL(CAST(faultResponse AS LONGVARCHAR),&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : ******************************************&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE raise ex value moduleName||&apos;:  &apos;||cast(CURRENT_EXCEPTION.TRACE as longvarchar);
&#x9;&#x9;END;
    else
&#x9;&#x9;if (upper(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName||&apos; : Source folder does not exist:  &apos;||sourceFolderPath);
&#x9;&#x9;end if;
&#x9;&#x9;set success = 0;
    end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/81</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/165</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/85</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/92</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/145</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/156</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/146</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/144</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/155</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/67</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/69</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/68</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>