<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="assignParameters" path="/shared/Delta_DV/_scripts/Utilities/repository/rebind/assignParameters" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[assignParameters:

&#x9;This procedure takes in a parameter vector and produces an XML parameter output which is used to create a request for
&#x9;a Composite web service API that requires a parameter.

&#x9;Input:
&#x9;&#x9;parameterVector - the parameters to wrap in XML.  
&#x9;&#x9;&#x9;Values: A vector of parameters and values


&#x9;Output:
&#x9;&#x9;annotationInput - the resulting XML
&#x9;&#x9;&#x9;Values: XML value


&#x9;Exceptions:  none


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.2&#x9;&#x9;04/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;created new for assigning parameters to an XML parameter node.
&#x9;2015.2&#x9;&#x9;04/02/2015&#x9;&#x9;Calvin Goodrich&#x9;&#x9;7.0.1&#x9;&#x9;&#x9;updated to COALESCE input values to prevent NULL request envelopes.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/31/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Consolidated code and removed assignAnnotation.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="parameterVector" direction="IN" nullable="true">
      <datatype name="ParameterVectorType" referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/definitions/RepositoryDefinitions" referenceType="ParameterVectorType" type="ARRAY">
        <itemDatatype>
          <datatype name="ParameterType" type="TREE" refId="257">
            <element name="name">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="sqlType">
              <datatype name="sqlType" type="ARRAY">
                <itemDatatype>
                  <datatype name="sqlType" type="TREE" refId="513">
                    <element name="definition">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="nativeType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="referencePath">
                      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
                    </element>
                    <element name="referenceTypeName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="proprietaryModel">
                      <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                    </element>
                    <element name="name">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="trailingSpaces">
                      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="xmlType">
              <datatype name="xmlType" type="ARRAY">
                <itemDatatype>
                  <datatype name="xmlType" type="TREE" refId="769">
                    <element name="name">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="namespace">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="nativeType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="schema">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="referencePath">
                      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
                    </element>
                    <element name="proprietaryModel">
                      <datatype name="VARBINARY" type="BINARY" maxLength="1024"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="pseudoType">
              <datatype name="pseudoType" type="ARRAY">
                <itemDatatype>
                  <datatype name="pseudoType" type="TREE" refId="1025">
                    <element name="definition">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="direction">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="isNullable">
              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
            </element>
            <element name="attributes">
              <datatype name="attributes" type="ARRAY">
                <itemDatatype>
                  <datatype name="AttributeCompleteType" type="TREE" refId="1281">
                    <element name="attrName">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="attrType">
                      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                    </element>
                    <element name="attrValue">
                      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                    </element>
                    <element name="valueList">
                      <datatype name="valueList" type="ARRAY">
                        <itemDatatype>
                          <datatype name="itemType" type="TREE" refId="1537">
                            <element name="type">
                              <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                            </element>
                            <element name="value">
                              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                            </element>
                          </datatype>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="valueMap">
                      <datatype name="valueMap" type="ARRAY">
                        <itemDatatype>
                          <datatype name="entryType" type="TREE" refId="1793">
                            <element name="key">
                              <datatype name="key" type="ARRAY">
                                <itemDatatype>
                                  <reference refId="1537"/>
                                </itemDatatype>
                              </datatype>
                            </element>
                            <element name="value">
                              <datatype name="value" type="ARRAY">
                                <itemDatatype>
                                  <reference refId="1537"/>
                                </itemDatatype>
                              </datatype>
                            </element>
                          </datatype>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="valueArray">
                      <datatype name="valueArray" type="ARRAY">
                        <itemDatatype>
                          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                        </itemDatatype>
                      </datatype>
                    </element>
                    <element name="unset">
                      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
                    </element>
                  </datatype>
                </itemDatatype>
              </datatype>
            </element>
            <element name="annotation">
              <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
            </element>
          </datatype>
        </itemDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="parameterInput" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/definitions/RepositoryDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/rebind/assignAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="attributeVector" direction="IN">
        <datatype type="ARRAY">
          <itemDatatype>
            <datatype name="AttributeCompleteType" type="TREE" refId="257">
              <element name="attrName">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrType">
                <datatype name="VARCHAR" type="STRING" maxLength="255"/>
              </element>
              <element name="attrValue">
                <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="valueList">
                <datatype name="valueList" type="ARRAY">
                  <itemDatatype>
                    <datatype name="itemType" type="TREE" refId="513">
                      <element name="type">
                        <datatype name="VARCHAR" type="STRING" maxLength="255"/>
                      </element>
                      <element name="value">
                        <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueMap">
                <datatype name="valueMap" type="ARRAY">
                  <itemDatatype>
                    <datatype name="entryType" type="TREE" refId="769">
                      <element name="key">
                        <datatype name="key" type="ARRAY">
                          <itemDatatype>
                            <reference refId="513"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                      <element name="value">
                        <datatype name="value" type="ARRAY">
                          <itemDatatype>
                            <reference refId="513"/>
                          </itemDatatype>
                        </datatype>
                      </element>
                    </datatype>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="valueArray">
                <datatype name="valueArray" type="ARRAY">
                  <itemDatatype>
                    <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
                  </itemDatatype>
                </datatype>
              </element>
              <element name="unset">
                <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
              </element>
            </datatype>
          </itemDatatype>
        </datatype>
      </element>
      <element name="attributeInput" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    assignParameters:

&#x9;This procedure takes in a parameter vector and produces an XML parameter output which is used to create a request for
&#x9;a Composite web service API that requires a parameter.

&#x9;Input:
&#x9;&#x9;parameterVector - the parameters to wrap in XML.  
&#x9;&#x9;&#x9;Values: A vector of parameters and values

&#x9;Output:
&#x9;&#x9;annotationInput - the resulting XML
&#x9;&#x9;&#x9;Values: XML value

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.2&#x9;&#x9;04/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;created new for assigning parameters to an XML parameter node.
&#x9;2015.2&#x9;&#x9;04/02/2015&#x9;&#x9;Calvin Goodrich&#x9;&#x9;7.0.1&#x9;&#x9;&#x9;updated to COALESCE input values to prevent NULL request envelopes.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/31/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Consolidated code and removed assignAnnotation.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE assignParameters(
&#x9;IN parameterVector&#x9;&#x9;&#x9;/shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/definitions/RepositoryDefinitions.ParameterVectorType,
&#x9;OUT parameterInput&#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;assignParameters&apos;;
&#x9;DECLARE i,j&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE attributeInput&#x9;LONGVARCHAR;
&#x9;DECLARE valueFound&#x9;&#x9;BOOLEAN DEFAULT FALSE;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE annotation&#x9;&#x9;LONGVARCHAR;

&#x9;set parameterInput = &apos;&apos;;
&#x9;if (parameterVector IS NOT NULL) then
&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;          &lt;resource:parameters&gt;&apos;;
&#x9;&#x9;set i = 1;
&#x9;&#x9;while (i &lt;= CARDINALITY(parameterVector)) do&#x9;

&#x9;&#x9;&#x9;if (parameterVector[i].name IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].name||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;name&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;-- &quot;name&quot; - parameter name
&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;            &lt;resource:parameter&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:name&gt;&apos;||CAST(XMLTEXT(parameterVector[i].name) AS LONGVARCHAR)||&apos;&lt;/resource:name&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:dataType&gt;&apos;;

&#x9;&#x9;&#x9;-- &quot;sqlType&quot; - choice of 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;if (NOT valueFound AND parameterVector[i].sqlType IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].definition IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].sqlType[1].definition||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  sqlType &quot;definition&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:sqlType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:definition&gt;&apos;||CAST(XMLTEXT(parameterVector[i].sqlType[1].definition) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].nativeType IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:nativeType&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].nativeType) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:nativeType&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].referencePath IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referencePath&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].referencePath) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referencePath&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].referenceTypeName IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referenceTypeName&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].referenceTypeName) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referenceTypeName&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].proprietaryModel IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:proprietaryModel&gt;&apos;||COALESCE(CAST(parameterVector[i].sqlType[1].proprietaryModel AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:proprietaryModel&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].name IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:name&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].name) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:name&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].sqlType[1].trailingSpaces IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:trailingSpaces&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].sqlType[1].trailingSpaces) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:trailingSpaces&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;/common:sqlType&gt;&apos;;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- &quot;xmlType&quot; - choice of 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;if (NOT valueFound AND parameterVector[i].xmlType IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].xmlType[1].name IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].xmlType[1].name||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  xmlType &quot;name&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].xmlType[1].namespace IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].xmlType[1].namespace||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  xmlType &quot;namespace&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:xmlType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:name&gt;&apos;||CAST(XMLTEXT(parameterVector[i].xmlType[1].name) AS LONGVARCHAR)||&apos;&lt;/common:name&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:namespace&gt;&apos;||CAST(XMLTEXT(parameterVector[i].xmlType[1].namespace) AS LONGVARCHAR)||&apos;&lt;/common:namespace&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].xmlType[1].&quot;schema&quot; IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:schema&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].xmlType[1].&quot;schema&quot;) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:schema&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].xmlType[1].referencePath IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:referencePath&gt;&apos;||COALESCE(CAST(XMLTEXT(parameterVector[i].xmlType[1].referencePath) AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:referencePath&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].xmlType[1].proprietaryModel IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                  &lt;common:proprietaryModel&gt;&apos;||COALESCE(CAST(parameterVector[i].xmlType[1].proprietaryModel AS LONGVARCHAR), &apos;&apos;)||&apos;&lt;/common:proprietaryModel&gt;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;/common:xmlType&gt;&apos;;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- &quot;pseudoType&quot; - choice of 1 of sqlType, xmlType or pseudoType
&#x9;&#x9;&#x9;if (NOT valueFound AND parameterVector[i].pseudoType IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;if (parameterVector[i].pseudoType[1].definition IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].pseudoType[1].definition||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  pseudoType &quot;definition&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;                &lt;common:pseudoType&gt;&apos;||CHR(10)||
    &apos;                  &lt;common:definition&gt;&apos;||CAST(XMLTEXT(parameterVector[i].pseudoType[1].definition) AS LONGVARCHAR)||&apos;&lt;/common:definition&gt;&apos;||CHR(10)||
    &apos;                &lt;/common:pseudoType&gt;&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;              &lt;/resource:dataType&gt;&apos;;

&#x9;&#x9;&#x9;-- &quot;direction&quot; - IN,OUT,INOUT
&#x9;&#x9;&#x9;-- &quot;isNullable&quot; - IS_NULLABLE or IS_NOT_NULLABLE
&#x9;&#x9;&#x9;if (parameterVector[i].direction IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].direction||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;direction&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (parameterVector[i].isNullable IS NULL OR LENGTH(&apos;|&apos;||parameterVector[i].isNullable||&apos;|&apos;) = 2) then
&#x9;&#x9;&#x9;&#x9;raise ex value moduleName||&apos;::  Parameter &apos;||i||&apos;  &quot;isNullable&quot; may not be null or blank.&apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;              &lt;resource:direction&gt;&apos;||CAST(XMLTEXT(parameterVector[i].direction) AS LONGVARCHAR)||&apos;&lt;/resource:direction&gt;&apos;||CHR(10)||
    &apos;              &lt;resource:isNullable&gt;&apos;||CAST(XMLTEXT(parameterVector[i].isNullable) AS LONGVARCHAR)||&apos;&lt;/resource:isNullable&gt;&apos;;

&#x9;&#x9;&#x9;if (parameterVector[i].attributes IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/rebind/assignAttributes(parameterVector[i].attributes, attributeInput);
&#x9;&#x9;&#x9;&#x9;set parameterInput = parameterInput || attributeInput;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- &quot;annotation&quot; - parameter annotation
&#x9;&#x9;&#x9;set annotation = &apos;&apos;;
&#x9;&#x9;&#x9;if (parameterVector[i].annotation IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;set annotation = CHR(10)||&apos;    &lt;resource:annotation&gt;&apos; || COALESCE(CAST(XMLTEXT(parameterVector[i].annotation) AS LONGVARCHAR), &apos;&apos;) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set parameterInput = parameterInput || annotation;

&#x9;&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;            &lt;/resource:parameter&gt;&apos;;
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;end while;
&#x9;&#x9;set parameterInput = parameterInput || CHR(10)||
    &apos;          &lt;/resource:parameters&gt;&apos; || CHR(10);
&#x9;end if;

END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>