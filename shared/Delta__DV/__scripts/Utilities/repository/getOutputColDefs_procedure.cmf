<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="getOutputColDefs" path="/shared/Delta_DV/_scripts/Utilities/repository/getOutputColDefs" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[getOutputColDefs

    
    This procedure is used to generate a string containing the output columns returned by a view or procedure for
&#x9;easy definition of a custom row type.  The procedure returns the full list of output columns for a table or view
&#x9;and the full list of out and inout columns for a procedure.  The procedure can strip out the column definitions of any
&#x9;output cursors and include them in the list of returned columns.

    Input:
&#x9;&#x9;fullResourcePath&#x9;&#x9;- The path to the resource to retrieve column definitions from.  This must be a valid, fully quantified path.

&#x9;&#x9;resourceType &#x9;&#x9;&#x9;- The type of the resource to retrieve column definitions from.  Valid values are TABLE for views and tables
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  or PROCEDURE for SQL script procedures, transformations, parameterized queries and packaged queries.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  All other values will cause an exception to be thrown

&#x9;&#x9;convertCursorsToCols &#x9;- controls whether an output CURSOR should be included as a single entry or if the output
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;  columns of the cursor should be stripped out and included in the list of output columns.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;      This is useful when working with procedures such as XSLT transforms, packaged queries and 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  parameterized queries that return a single output cursor.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Setting a value of 1 for a procedure that returns both scalars and cursors or multiple cursors
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  will return a single string containing all of the scalar parameters and cursor output columns

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Values - 0 to output the entire cursor, 1 to output only the cursor&apos;s columns

    Output:
        rowDef &#x9;&#x9;&#x9;&#x9;&#x9;- A string containing the output column definition for the named resource.
            

    Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.4&#x9;&#x9;8/23/2012&#x9;&#x9;Matthew Lee&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Created new

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="convertCursorsToCols" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="rowDef" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="100000"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/ExceptionDefinitions" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_PROCEDURE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="resourceCursor" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="parameterName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="parameterType">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="parameterDirection">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceId">
            <datatype type="INTEGER"/>
          </element>
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="changeId">
            <datatype type="INTEGER"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/lowerLevelProcedures/getCursorColDefs" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="cursorStr" direction="IN">
        <datatype type="STRING" maxLength="100000"/>
      </element>
      <element name="cols" direction="OUT">
        <datatype type="STRING" maxLength="100000"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/findString" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="searchString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="stringToSearch" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="direction" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="pos" direction="OUT">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getOutputColDefs

    
    This procedure is used to generate a string containing the output columns returned by a view or procedure for
&#x9;easy definition of a custom row type.  The procedure returns the full list of output columns for a table or view
&#x9;and the full list of out and inout columns for a procedure.  The procedure can strip out the column definitions of any
&#x9;output cursors and include them in the list of returned columns.

    Input:
&#x9;&#x9;fullResourcePath&#x9;&#x9;- The path to the resource to retrieve column definitions from.  This must be a valid, fully quantified path.

&#x9;&#x9;resourceType &#x9;&#x9;&#x9;- The type of the resource to retrieve column definitions from.  Valid values are TABLE for views and tables
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  or PROCEDURE for SQL script procedures, transformations, parameterized queries and packaged queries.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  All other values will cause an exception to be thrown

&#x9;&#x9;convertCursorsToCols &#x9;- controls whether an output CURSOR should be included as a single entry or if the output
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;  columns of the cursor should be stripped out and included in the list of output columns.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;      This is useful when working with procedures such as XSLT transforms, packaged queries and 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  parameterized queries that return a single output cursor.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Setting a value of 1 for a procedure that returns both scalars and cursors or multiple cursors
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  will return a single string containing all of the scalar parameters and cursor output columns

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Values - 0 to output the entire cursor, 1 to output only the cursor&apos;s columns

    Output:
        rowDef &#x9;&#x9;&#x9;&#x9;&#x9;- A string containing the output column definition for the named resource.
            

    Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.4&#x9;&#x9;8/23/2012&#x9;&#x9;Matthew Lee&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getOutputColDefs(
&#x9;IN fullResourcePath &#x9;VARCHAR(4096),  
&#x9;IN resourceType &#x9;&#x9;VARCHAR,
&#x9;IN convertCursorsToCols BIT,
&#x9;OUT rowDef VARCHAR(100000)
)
BEGIN
&#x9;DECLARE colInfo VARCHAR(100000);
&#x9;DECLARE custRow VARCHAR(100000) DEFAULT &apos;&apos;;
&#x9;DECLARE curPos INTEGER;
&#x9;DECLARE cursorStr VARCHAR(100000);

&#x9;DECLARE cols CURSOR ( columnName VARCHAR, columnType VARCHAR(100000));

&#x9;--Retrieve the column definitions for a table or view
&#x9;IF resourceType = &apos;TABLE&apos; THEN
&#x9;&#x9;OPEN cols FOR
&#x9;&#x9;-- Query for retrieving info for Views
&#x9;&#x9;SELECT columnName, columnType
&#x9;&#x9;FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE(fullResourcePath, resourceType)
&#x9;&#x9;WHERE columnName IS NOT NULL;
&#x9;--Retrieve the out and inout parameters for procedures
&#x9;ELSEIF resourceType = &apos;PROCEDURE&apos; THEN
&#x9;&#x9;OPEN cols FOR
&#x9;&#x9;SELECT parameterName columnName, parameterType columnType
&#x9;&#x9;FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_PROCEDURE(fullResourcePath, resourceType)
&#x9;&#x9;WHERE parameterDirection IN ( &apos;OUT&apos;, &apos;INOUT&apos;);&#x9;&#x9;
&#x9;--Throw an exception in any other case
&#x9;ELSE
&#x9;&#x9;RAISE /shared/Delta_DV/&quot;_scripts&quot;/Utilities/ExceptionDefinitions.InvalidParameterException VALUE &apos;Illegal value found in parameter resourceType.  Valid values are TABLE or PROCEDURE&apos;;
&#x9;END IF; 

&#x9;FOR r AS cols DO
&#x9;&#x9;IF NOT custRow = &apos;&apos; THEN
&#x9;&#x9;&#x9;SET&#x9;custRow = custRow || &apos;, &apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;--If the target resource is a procedure and the caller elected to convert output cursors to columns
&#x9;&#x9;--Then do the conversion
&#x9;&#x9;IF resourceType = &apos;PROCEDURE&apos; AND convertCursorsToCols = 1 THEN
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/findString(&apos;CURSOR&apos;, r.columnType, &apos;F&apos;, curPos);
&#x9;&#x9;END IF;
&#x9;&#x9;
&#x9;&#x9;--If a CURSOR parameter was found and needs to be included in the column definitions, then strip out the columns from the cursor
&#x9;&#x9;IF curPos &gt; 0 THEN
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/lowerLevelProcedures/getCursorColDefs(r.columnType, cursorStr);
&#x9;&#x9;&#x9;SET custRow = custRow || cursorStr;
&#x9;&#x9;&#x9;--reset to make sure that nothing gets discarded accidentally
&#x9;&#x9;&#x9;SET curPos = 0;
&#x9;&#x9;--Otherwise just add the column / procedure entry as a column, even if it is a cursor
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET custRow = custRow || r.columnName || &apos; &apos; || r.columnType;
&#x9;&#x9;END IF;
&#x9;END FOR;

&#x9;SET rowDef = custRow;
END</attribute>
  <attribute name="creationDate" type="LONG">1369417729294</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>