<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="searchResources" path="/shared/Delta_DV/_scripts/Utilities/repository/searchResources" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[searchResources:

&#x9;This procedure searches for keywords within the script text of a resource or attributes of a data source.
&#x9;It returns a cursor of resource paths, types and subtypes for resources that contain the keywords.
&#x9;It also returns the text position of the occurrence of any keyword matches and which keyword was matched.
&#x9;It will not search a resource that is impacted.  The impactLevel may be &apos;NONE&apos; or &apos;SYNTAX_ERROR&apos;.  It will skip starting 
&#x9;resource paths that do not exist.  

 &#x9;The following resource types and sub-types are supported:
&#x9;&#x9;resourceType = &apos;PROCEDURE&apos;
&#x9;&#x9;&#x9;subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
&#x9;&#x9;&#x9;subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
&#x9;&#x9;&#x9;subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
&#x9;&#x9;&#x9;subtype = &apos;XQUERY_TRANSFORM_PROCEDURE&apos; -- Get XQuery Transformation text

&#x9;&#x9;resourceType = &apos;TABLE&apos;
&#x9;&#x9;&#x9;subtype = &apos;SQL_TABLE&apos; -- Get Regular View

&#x9;&#x9;resourceType = &apos;DATA_SOURCE&apos;
&#x9;&#x9;&#x9;subtype = all sub types -- Get data source attributes

&#x9;This procedure uses RegexPosition which has the following rules:
&#x9;-------------------------------------------------------
&#x9;Finds an occurrence of a regular expression match in a VARCHAR and returns the position
&#x9;of the match (similar to the SQL POSITION function, positions start at 1 with 0 indicating
&#x9;a match was not found.) The value of the occurrence input value determines which 
&#x9;occurrence to return (numbered starting at 1 from left to right. Use negative values to 
&#x9;number occurrences from right to left.) If a NULL value is passed in as the value of 
&#x9;any of the inputs, a NULL is returned. Zero may not be used as a value for an 
&#x9;occurrence.

&#x9;The regular expression language used is what is supported by the JDK used by CIS 
&#x9;(currently 1.5 in CIS 4.0.1) See the javadoc for java.util.regex.Pattern for 
&#x9;details on what is supported.


&#x9;Input:

&#x9;&#x9;startingFolders - Comma separated list of starting folders to search within 
&#x9;&#x9;&#x9;Values: /shared/Examples,/shared/test

&#x9;&#x9;keywordList - Comma separated list of keyword strings to search for. If the string 
                      contains a comma then it must be enclosed in double quotes like 
                      &quot;a,b&quot;,c,&quot;d,&quot;. The keyword list may also contain regular expressions.  
                      For example to search for the data type &apos;Integer&apos; or &apos;integer&apos; but not 
                      &apos;INTEGER&apos; use the regular expression [Ii]nteger in the keyword list.
&#x9;&#x9;&#x9;Values: products.ProductName,&quot;CustomerName,&quot;,[Ii]nteger

&#x9;&#x9;keywordOccurrence - comma separated list of keyword occurrences which exactly match 
                            the number of keywords. If this entry is left null then it is 
                            assumed that the occurrence for each keyword is 1. The value of 
                            the occurrence input value determines which occurrence to return 
&#x9;&#x9;&#x9;                (numbered starting at 1 from left to right. Use negative values 
                            to number occurrences from right to left.)

        force - Indicates whether to examine impacted resources or not
            Values: 0=(default) do not force search on impacted resources.  1=force the search 
                    even when resources are impacted.
            

&#x9;Output:
&#x9;&#x9;OUT result PIPE (
&#x9;&#x9;&#x9;startOrder&#x9;&#x9;INTEGER,&#x9;&#x9;-- The starting path execution order
&#x9;&#x9;&#x9;startPath&#x9;&#x9;VARCHAR(1024), &#x9;-- The starting path
&#x9;&#x9;&#x9;resourcePath &#x9;VARCHAR(1024), &#x9;-- The full path to the resource
&#x9;&#x9;&#x9;resourceType &#x9;VARCHAR(255),&#x9;-- The type of resource
&#x9;&#x9;&#x9;subtype &#x9;&#x9;VARCHAR(255),&#x9;-- The sub-type of the resource
&#x9;&#x9;&#x9;impactLevel&#x9;&#x9;VARCHAR(255),&#x9;-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
&#x9;&#x9;&#x9;pos&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The position of the first occurrence of any of the keywords
&#x9;&#x9;&#x9;keyword&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The keyword that was found from the keyword list
&#x9;&#x9;&#x9;keywordNum&#x9;&#x9;INTEGER,&#x9;&#x9;-- The keyword position number within the keyword list
&#x9;&#x9;&#x9;occurrence&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- The occurrence of the keyword
&#x9;&#x9;)


&#x9;Exceptions:  none


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.1&#x9;&#x9;01/21/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;2013.301&#x9;08/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Required for Best Practices 7.3: Return impactLevel in result and allow impactLevel=SYNTAX_ERROR.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Invoking programs can filter on impactLevel=NONE to search for resources with no errors or impact being reported.
&#x9;2014.1&#x9;&#x9;12/17/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added &quot;force&quot; to allow the search to be forced when resources are impacted.  Added &quot;resourceText&quot; to the output cursor.
&#x9;2018.100&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;06/17/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed the implementation to use /services/databases/system/ALL_RESOURCES instead of getResourceListRecursive.


    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="startingFolders" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="keywordList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="keywordOccurrence" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="force" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="startOrder">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="startPath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="1024"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactLevel">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="pos">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="keyword">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="keywordNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="occurrence">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="resourceText">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getDataSourceAttributes" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="dataSourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="attrName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="attrValue">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inputString" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="delimiter" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseInputText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="reverseOutput" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="trimText" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="includeDelimiter" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="object">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* searchResources:

&#x9;This procedure searches for keywords within the script text of a resource or attributes of a data source.
&#x9;It returns a cursor of resource paths, types and subtypes for resources that contain the keywords.
&#x9;It also returns the text position of the occurrence of any keyword matches and which keyword was matched.
&#x9;It will not search a resource that is impacted.  The impactLevel may be &apos;NONE&apos; or &apos;SYNTAX_ERROR&apos;.  It will skip starting 
&#x9;resource paths that do not exist.  

 &#x9;The following resource types and sub-types are supported:
&#x9;&#x9;resourceType = &apos;PROCEDURE&apos;
&#x9;&#x9;&#x9;subtype = &apos;SQL_SCRIPT_PROCEDURE&apos; -- Get Regular Procedure
&#x9;&#x9;&#x9;subtype = &apos;EXTERNAL_SQL_PROCEDURE&apos; -- Get Packaged Query Procedure
&#x9;&#x9;&#x9;subtype = &apos;XSLT_TRANSFORM_PROCEDURE&apos; -- Get XSLT Transformation text
&#x9;&#x9;&#x9;subtype = &apos;XQUERY_TRANSFORM_PROCEDURE&apos; -- Get XQuery Transformation text

&#x9;&#x9;resourceType = &apos;TABLE&apos;
&#x9;&#x9;&#x9;subtype = &apos;SQL_TABLE&apos; -- Get Regular View

&#x9;&#x9;resourceType = &apos;DATA_SOURCE&apos;
&#x9;&#x9;&#x9;subtype = all sub types -- Get data source attributes

&#x9;This procedure uses RegexPosition which has the following rules:
&#x9;-------------------------------------------------------
&#x9;Finds an occurrence of a regular expression match in a VARCHAR and returns the position
&#x9;of the match (similar to the SQL POSITION function, positions start at 1 with 0 indicating
&#x9;a match was not found.) The value of the occurrence input value determines which 
&#x9;occurrence to return (numbered starting at 1 from left to right. Use negative values to 
&#x9;number occurrences from right to left.) If a NULL value is passed in as the value of 
&#x9;any of the inputs, a NULL is returned. Zero may not be used as a value for an 
&#x9;occurrence.

&#x9;The regular expression language used is what is supported by the JDK used by CIS 
&#x9;(currently 1.5 in CIS 4.0.1) See the javadoc for java.util.regex.Pattern for 
&#x9;details on what is supported.


&#x9;Input:

&#x9;&#x9;startingFolders - Comma separated list of starting folders to search within 
&#x9;&#x9;&#x9;Values: /shared/Examples,/shared/test

&#x9;&#x9;keywordList - Comma separated list of keyword strings to search for. If the string 
                      contains a comma then it must be enclosed in double quotes like 
                      &quot;a,b&quot;,c,&quot;d,&quot;. The keyword list may also contain regular expressions.  
                      For example to search for the data type &apos;Integer&apos; or &apos;integer&apos; but not 
                      &apos;INTEGER&apos; use the regular expression [Ii]nteger in the keyword list.
&#x9;&#x9;&#x9;Values: products.ProductName,&quot;CustomerName,&quot;,[Ii]nteger

&#x9;&#x9;keywordOccurrence - comma separated list of keyword occurrences which exactly match 
                            the number of keywords. If this entry is left null then it is 
                            assumed that the occurrence for each keyword is 1. The value of 
                            the occurrence input value determines which occurrence to return 
&#x9;&#x9;&#x9;                (numbered starting at 1 from left to right. Use negative values 
                            to number occurrences from right to left.)

        force - Indicates whether to examine impacted resources or not
            Values: 0=(default) do not force search on impacted resources.  1=force the search 
                    even when resources are impacted.
            

&#x9;Output:
&#x9;&#x9;OUT result PIPE (
&#x9;&#x9;&#x9;startOrder&#x9;&#x9;INTEGER,&#x9;&#x9;-- The starting path execution order
&#x9;&#x9;&#x9;startPath&#x9;&#x9;VARCHAR(1024), &#x9;-- The starting path
&#x9;&#x9;&#x9;resourcePath &#x9;VARCHAR(1024), &#x9;-- The full path to the resource
&#x9;&#x9;&#x9;resourceType &#x9;VARCHAR(255),&#x9;-- The type of resource
&#x9;&#x9;&#x9;subtype &#x9;&#x9;VARCHAR(255),&#x9;-- The sub-type of the resource
&#x9;&#x9;&#x9;impactLevel&#x9;&#x9;VARCHAR(255),&#x9;-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
&#x9;&#x9;&#x9;pos&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The position of the first occurrence of any of the keywords
&#x9;&#x9;&#x9;keyword&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The keyword that was found from the keyword list
&#x9;&#x9;&#x9;keywordNum&#x9;&#x9;INTEGER,&#x9;&#x9;-- The keyword position number within the keyword list
&#x9;&#x9;&#x9;occurrence&#x9;&#x9;INTEGER&#x9;&#x9;&#x9;-- The occurrence of the keyword
&#x9;&#x9;)


&#x9;Exceptions:  none


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.1&#x9;&#x9;01/21/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;2013.301&#x9;08/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Required for Best Practices 7.3: Return impactLevel in result and allow impactLevel=SYNTAX_ERROR.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Invoking programs can filter on impactLevel=NONE to search for resources with no errors or impact being reported.
&#x9;2014.1&#x9;&#x9;12/17/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added &quot;force&quot; to allow the search to be forced when resources are impacted.  Added &quot;resourceText&quot; to the output cursor.
&#x9;2018.100&#x9;03/01/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced /shared/ASAssets/Utilities/repository/resourceExists with /lib/resource/ResourceExists
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;06/17/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed the implementation to use /services/databases/system/ALL_RESOURCES instead of getResourceListRecursive.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE searchResources(
&#x9;IN startingFolders &#x9;&#x9;LONGVARCHAR, -- comma separated list of starting folder to begin searching
&#x9;IN keywordList&#x9;&#x9;&#x9;LONGVARCHAR, -- comma separated list of keyword strings to search for. 
&#x9;IN keywordOccurrence&#x9;LONGVARCHAR, -- comma separated list of keyword occurrences or null to default to 1.
&#x9;IN force&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9; -- 0=(default) do not force search on impacted resources.  1=force the search even when resources are impacted.
&#x9;OUT result PIPE (
&#x9;&#x9;startOrder&#x9;&#x9;INTEGER,&#x9;&#x9;-- The start path execution order
&#x9;&#x9;startPath&#x9;&#x9;VARCHAR(1024), &#x9;-- The start path extracted from the comma separated startingFolders
&#x9;&#x9;resourcePath &#x9;VARCHAR(1024), &#x9;-- The full path to the resource
&#x9;&#x9;resourceType &#x9;VARCHAR(255),&#x9;-- The type of resource
&#x9;&#x9;subtype &#x9;&#x9;VARCHAR(255),&#x9;-- The sub-type of the resource
&#x9;&#x9;impactLevel&#x9;&#x9;VARCHAR(255),&#x9;-- The impact level of the resource NONE and SYNTAX_ERROR are permitted.
&#x9;&#x9;pos&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- The position of the first occurrence of any of the keywords
&#x9;&#x9;keyword&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- The keyword that was found from the keyword list
&#x9;&#x9;keywordNum&#x9;&#x9;INTEGER,&#x9;&#x9;-- The keyword position number within the keyword list
&#x9;&#x9;occurrence&#x9;&#x9;INTEGER,&#x9;&#x9;-- The occurrence of the keyword
&#x9;&#x9;resourceText&#x9;LONGVARCHAR&#x9;&#x9;-- The resource text that where the keywordList was found
&#x9;)
)
BEGIN
&#x9;DEClARE moduleName&#x9;&#x9;&#x9;VARCHAR(255) DEFAULT &apos;searchResources&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/&quot;_debug&quot;.debug;
&#x9;DECLARE startPath&#x9;&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE startOrder&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE resourcePath&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE resourceType&#x9;&#x9;VARCHAR;
&#x9;DECLARE resourceExists &#x9;&#x9;BOOLEAN;
&#x9;DECLARE subtype&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE scriptText&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE nextpos&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE keyword&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE keywordNum, i&#x9;&#x9;INTEGER;
&#x9;DECLARE num&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE occurrenceStr&#x9;&#x9;VARCHAR;
&#x9;DECLARE occurrence&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE numOccurrences&#x9;&#x9;INTEGER;
&#x9;DECLARE impactLevel&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE whereClause&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE whereClauseSearch&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE ex_invalid_occurrence&#x9;EXCEPTION;
&#x9;DECLARE resCur CURSOR (
&#x9;&#x9;resPath &#x9;&#x9;VARCHAR(4000), 
&#x9;&#x9;resType&#x9; &#x9;&#x9;VARCHAR, 
&#x9;&#x9;subtype &#x9;&#x9;VARCHAR, 
&#x9;&#x9;definition &#x9;&#x9;LONGVARCHAR
&#x9;);

&#x9;-- Continue if not empty
&#x9;if (keywordList IS NOT NULL AND LENGTH(&apos;|&apos;||keywordList||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;for s as select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractDelimitedText(startingFolders,&apos;,&apos;,0,0,0,1,0) do
&#x9;&#x9;&#x9;set startPath = s.object;
&#x9;&#x9;&#x9;set startOrder = startOrder + 1;

&#x9;&#x9;&#x9;call /lib/resource/ResourceExists(startPath, &apos;CONTAINER&apos;, null, resourceExists);
&#x9;&#x9;&#x9;if (resourceExists) then
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;Path exists for searching: &apos;||NVL(startPath,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;if (length(whereClause) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos;   OR &apos;;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set whereClause = whereClause || &apos;PARENT_PATH LIKE &apos;&apos;&apos; || startPath || &apos;%&apos;&apos;&apos; || CHR(10);
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;Path does not exist: &apos;||NVL(startPath,&apos;null&apos;));
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end for;

&#x9;&#x9;-- Extract keyword list
&#x9;&#x9;for k as 
&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(keywordList, &apos;,&apos;, 1, 0, 0, 0, 1) 
&#x9;&#x9;&#x9;where textExpression is not null and length(trim(textExpression)) &gt; 0
&#x9;&#x9;do
&#x9;&#x9;&#x9;set keyword = k.textExpression;
&#x9;&#x9;&#x9;-- escape any single quotes
&#x9;&#x9;&#x9;if (INSTR(keyword, &apos;&apos;&apos;&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set keyword = REPLACE(keyword, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (length(whereClauseSearch) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;set whereClauseSearch = whereClauseSearch || &apos;   OR &apos;;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;set whereClauseSearch = whereClauseSearch || &apos;LOWER(DEFINITION) LIKE &apos;&apos;%&apos; || LOWER(keyword) || &apos;%&apos;&apos;&apos;||CHR(10);
&#x9;&#x9;end for;

&#x9;&#x9;if (LENGTH(whereClause) = 0) then
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;No paths were provided to search:&apos;);
&#x9;&#x9;else
&#x9;&#x9;&#x9;SET sqlStatement = 
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT * FROM (&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  PARENT_PATH || &apos;&apos;/&apos;&apos; || RESOURCE_NAME resourcePath,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  CASE RESOURCE_TYPE &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;     WHEN &apos;&apos;DATASOURCE&apos;&apos; THEN &apos;&apos;DATA_SOURCE&apos;&apos; &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;     ELSE RESOURCE_TYPE &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  END resourceType,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  RESOURCE_SUBTYPE subType,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  DEFINITION definition&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM /services/databases/system/ALL_RESOURCES&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE RESOURCE_TYPE IN (&apos;&apos;TABLE&apos;&apos;,&apos;&apos;PROCEDURE&apos;&apos;)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND (&apos;||TRIM(whereClause)||&apos;)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND (&apos;||TRIM(whereClauseSearch)||&apos;)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;UNION&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;SELECT &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  PARENT_PATH || &apos;&apos;/&apos;&apos; || RESOURCE_NAME resourcePath,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  CASE RESOURCE_TYPE &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;     WHEN &apos;&apos;DATASOURCE&apos;&apos; THEN &apos;&apos;DATA_SOURCE&apos;&apos; &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;     ELSE RESOURCE_TYPE &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  END resourceType,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  RESOURCE_SUBTYPE subType,&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  DEFINITION definition&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;FROM /services/databases/system/ALL_RESOURCES&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;WHERE RESOURCE_TYPE = &apos;&apos;DATASOURCE&apos;&apos;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  AND (&apos;||TRIM(whereClause)||&apos;)&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;) a &apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ORDER BY a.resourcePath&apos;;

&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : sqlStatement=&apos;||sqlStatement);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;OPEN resCur for sqlStatement;
&#x9;&#x9;&#x9;FOR list AS resCur DO
&#x9;&#x9;&#x9;&#x9;set resourcePath = list.resPath;
&#x9;&#x9;&#x9;&#x9;set resourceType = list.resType;
&#x9;&#x9;&#x9;&#x9;set subtype = list.subtype;
&#x9;&#x9;&#x9;&#x9;set scriptText = list.definition;

&#x9;&#x9;&#x9;&#x9;-- Determine the impact level of the resource
&#x9;&#x9;&#x9;&#x9;set impactLevel = null;
&#x9;&#x9;&#x9;&#x9;for r as select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor(resourcePath, resourceType) do
&#x9;&#x9;&#x9;&#x9;&#x9;set impactLevel = r.impactLevel;
&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;-- Proceed only if there is no impact on the resource
&#x9;&#x9;&#x9;&#x9;if (impactLevel = &apos;NONE&apos; or impactLevel = &apos;SYNTAX_ERROR&apos; or (force is not null and force = 1)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;PROCEED: resourcePath=&apos;||resourcePath||&apos; resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos; subtype=&apos;||NVL(subtype,&apos;null&apos;)||&apos;   ImpactLevel=&apos;||NVL(impactLevel,&apos;null&apos;));

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This is a best effort at retrieving the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Only use getScriptText if the definition from ALL_RESOURCES was null.  Probably would never be null.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (scriptText is null and (resourceType = &apos;PROCEDURE&apos; or resourceType = &apos;TABLE&apos;)) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the script text for the resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getScriptText(resourcePath, resourceType, subtype, scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get a concatenated list of attribures from the datasource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (resourceType = &apos;DATA_SOURCE&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ds as select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getDataSourceAttributes(resourcePath) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = scriptText || ds.attrName||&apos;=&apos;||NVL(ds.attrValue,&apos;null&apos;)||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Search this resource for all the keywords in the list
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set keywordNum = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;keywordLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for k as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(keywordList, &apos;,&apos;, 1, 0, 0, 0, 1) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where textExpression is not null and length(trim(textExpression)) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set keyword = k.textExpression;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set keywordNum = keywordNum + 1;&#x9;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the keyword occurrence for the respective keyword being searched and default to one to start out.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set occurrence = 1; -- default occurrence
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;occurrenceLoop:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for o as 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(keywordOccurrence, &apos;,&apos;, 0, 0, 0, 0, 1) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;where textExpression is not null and length(trim(textExpression)) &gt; 0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set occurrenceStr = o.textExpression;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (i = keywordNum) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (occurrenceStr IS NOT NULL AND LENGTH(&apos;|&apos;||occurrenceStr||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;begin
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (cast(occurrenceStr as integer) &lt;= 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex_invalid_occurrence value &apos;The occurrence string [&apos;||occurrenceStr||&apos;] must be a positive integer value.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exception
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;raise ex_invalid_occurrence value &apos;The occurrence string [&apos;||occurrenceStr||&apos;] must be a positive integer value.&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set occurrence = occurrenceStr;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave occurrenceLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Search for the position of the regular expression in the script text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptText = LOWER(scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set keyword = LOWER(keyword);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numOccurrences = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (keyword is not null and scriptText is not null) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set nextpos = INSTR(scriptText, keyword);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (nextpos is not null and nextpos &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set numOccurrences = numOccurrences + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (occurrence = numOccurrences) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos = nextpos;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set nextpos = INSTR(scriptText, keyword, nextpos+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;numOccurrences=&apos;||numOccurrences||&apos;  occurrence=&apos;||occurrence||&apos;  pos=&apos;||pos||&apos;  keyword=&apos;||keyword);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (occurrence &lt;= numOccurrences) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insert into result values (startOrder, startPath, resourcePath, resourceType, subtype, impactLevel, pos, keyword, keywordNum, occurrence, scriptText);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave keywordLoop;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end for;
&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName, debug, &apos;SKIP: resourcePath=&apos;||resourcePath||&apos; resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos; subtype=&apos;||NVL(subtype,&apos;null&apos;)||&apos;   ImpactLevel=&apos;||NVL(impactLevel,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end for;
&#x9;&#x9;end if;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/222</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>