<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="getBasicResourceCursor_PROCEDURE_CURSOR" path="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_PROCEDURE_CURSOR" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[getBasicResourceCursor_PROCEDURE_CURSOR:
&#x9;-- CIS Repository Helper Procedure --
&#x9;This procedure retrieves the resource metadata for a given resource that is a procedure object providing both input and output parameters.  
&#x9;A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
&#x9;&#x9;getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
&#x9;&#x9;getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
&#x9;&#x9;&#x9;and turns it into a cursor which is more usable by other CIS procedures.
&#x9;It should be noted that Procedures may return more than one output cursor.  
&#x9;The field &quot;sqlText&quot; will contain the actual CURSOR (...) definition and will be not null for each cursor output parameter.
&#x9;This may be true for SQL Procedures or Parameterized queries.  
&#x9;Generally speaking, for XSLT Procedures, there will only be one output cursor.

&#x9;mtinus: 10/24/2013
&#x9;Support case: 19620 - Composite does not support typed xml data types in a view variable declaration.  Only the generic &quot;XML&quot; is supported.
&#x9;&#x9;When generating views, the user of this procedure should use the columnBaseType when the dataType is xmlType otherwise use the columnType for defining
&#x9;&#x9;IN parameter declarations for VIEWS.

&#x9;Input:
&#x9;&#x9;fullResourcePath - Full resource path which includes the path and the resource name  
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities/repository/examples/source/PRODUCT_VIEW
&#x9;&#x9;resourceType - Type of CIS resource to be created
&#x9;&#x9;&#x9;Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
&#x9;&#x9;cursorNum - For multiple output cursors in a procedure, this provides a way to identify which cursor
&#x9;&#x9;&#x9;the user would like to select.  If null or less than zero, then 0 is the default which returns all cursors.
&#x9;Output:
&#x9;&#x9;resourceCursor - XML response containing the resource metadata
&#x9;&#x9;&#x9;CURSOR (
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(1024), &#x9;&#x9;The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;Provides the annotation for the resource
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;VARCHAR(32768), &#x9;The sqlText for a cursor
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(1024),&#x9;&#x9;The actual column type. e.g. CURSOR, XML, VARCHAR(255), DECIMAL(32,2), BIGINT, NUMERIC(2147483647,0), and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;The base column type.  e.g. CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(255),&#x9;&#x9;The native base type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(255)&#x9;&#x9;The native column type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;04/27/2012&#x9;&#x9;Mike Tinius        &#x9;5.2.0&#x9;&#x9;&#x9;Created new.
&#x9;2013.2&#x9;&#x9;03/19/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added annotation to result cursor
&#x9;2013.3&#x9;&#x9;06/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified to not output any cursor for stored procedure with no output cursor
&#x9;2013.4&#x9;&#x9;09/12/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Modified if/then to if/then/else because it was not correctly parsing the CURSOR () output.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.0: Modified to check for generic soap &quot;Envelope&quot; type and set to generic XML when dataType=&apos;xmlType&apos;.
&#x9;2014.2&#x9;&#x9;03/30/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.1.1: Fixed issue where the columnType had 2 parenthesis VARCHAR(255)) for the last column in the list.  Addressed issue with embedded spaces and commas in column names.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText.  Increased size of resourcePath to VARCHAR(4096) and columnType to VARCHAR(4096).
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Replaced call to findString with INSTR which is more efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.



&#x9;TYPES / SUBTYPES:
&#x9;=================
&#x9;The following resource types/subtypes are supported by this operation.  Resources
&#x9;cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
&#x9;within a physical data source.  

&#x9;* LINK / unknown at this time

&#x9;(CIS procedures)
&#x9;* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
&#x9;(Custom procedures)
&#x9;* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
&#x9;(Database procedures)
&#x9;* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
&#x9;* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
&#x9;(XML procedures)
&#x9;* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
&#x9;(Misc procedures)
&#x9;* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.]]></annotation>
  <parameters>
    <parameter name="fullResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="cursorNum" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="resourceId">
          <datatype name="BIGINT" type="INTEGER"/>
        </element>
        <element name="resourceName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="resourcePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="resourceType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="subtype">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="changeId">
          <datatype name="BIGINT" type="INTEGER"/>
        </element>
        <element name="ownerName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="ownerDomain">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="impactLevel">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="enabled">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="annotation">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="explicitlyDesigned">
          <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
        </element>
        <element name="tableType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="sqlText">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="proprietaryModel">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
        <element name="columnNum">
          <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
        </element>
        <element name="columnName">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="columnType">
          <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
        </element>
        <element name="columnBaseType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="dataType">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="paramDirection">
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </element>
        <element name="nativeBaseType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
        <element name="nativeType">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/webservices/system/admin/resource/operations/getResource" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="getResource" direction="IN">
        <datatype name="getResource" extendedName="{http://www.compositesw.com/services/system/admin/resource}getResource" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}getResource" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}getResource">
          <schemaDatatype>
            <datatype name="getResource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="getResourceRequest" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="257">
              <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
              <element name="detail" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="detailLevel" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="getResourceResponse" direction="OUT">
        <datatype name="getResourceResponse" extendedName="{http://www.compositesw.com/services/system/admin/resource}getResourceResponse" namespace="http://www.compositesw.com/services/system/admin/resource" referenceDefinitionSet="/services/webservices/system/admin/resource/operations/ResourceSchema" referenceType="{http://www.compositesw.com/services/system/admin/resource}getResourceResponse" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/admin/resource}getResourceResponse">
          <schemaDatatype>
            <datatype name="getResourceResponse" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="getResourceResponse" superTypeNamespace="http://www.compositesw.com/services/system/admin/resource" subType="ELEMENT_DECL" type="TREE" refId="513">
              <element name="resources" namespace="http://www.compositesw.com/services/system/admin/resource">
                <datatype name="resourceList" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="769">
                  <element name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                    <datatype name="resource" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1025">
                      <element name="name" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="path" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="type" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="subtype" namespace="http://www.compositesw.com/services/system/admin/resource">
                        <datatype name="resourceSubType" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="id" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="changeId" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="int" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="long" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
                      </element>
                      <element name="version" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="introspectState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerDomain" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="ownerName" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="impactLevel" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="impactMessage" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="enabled" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                      </element>
                      <element name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="lockState" namespace="http://www.compositesw.com/services/system/admin/resource" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1281">
                          <element name="lockOwnerDomain" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockOwnerName" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                          <element name="lockCreateTime" namespace="http://www.compositesw.com/services/system/admin/resource">
                            <datatype name="dateTime" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="DATETIME"/>
                          </element>
                          <element name="lockParentPath" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                            <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                          </element>
                        </datatype>
                      </element>
                      <element name="hints" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1537">
                          <element name="hint" namespace="http://www.compositesw.com/services/system/admin/resource" maxOccurs="2147483647" minOccurs="0">
                            <datatype name="attribute" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="1793">
                              <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                              </element>
                              <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="attributeTypeValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="2049">
                                  <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                    <datatype name="attributeTypeValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2305">
                                      <element name="type" namespace="http://www.compositesw.com/services/system/util/common">
                                        <datatype name="attributeType" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="value" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                      </element>
                                      <element name="valueList" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <reference refId="2049"/>
                                      </element>
                                      <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeTypeValueMap" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="2561">
                                          <element name="entry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="2817">
                                              <element name="key" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="2305"/>
                                              </element>
                                              <element name="value" namespace="http://www.compositesw.com/services/system/util/common">
                                                <reference refId="2305"/>
                                              </element>
                                            </datatype>
                                          </element>
                                        </datatype>
                                      </element>
                                      <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                        <datatype name="attributeSimpleValueList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="attributeComplexValue" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="COMPLEX_TYPE" type="TREE" refId="3073">
                                          <element name="item" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                                            <datatype name="attributeSimpleValue" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                                          </element>
                                        </datatype>
                                      </element>
                                    </datatype>
                                  </element>
                                </datatype>
                              </element>
                              <element name="valueMap" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="2561"/>
                              </element>
                              <element name="valueArray" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <reference refId="3073"/>
                              </element>
                              <element name="unset" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                                <datatype name="boolean" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="INTEGER" minValue="0" maxValue="1"/>
                              </element>
                            </datatype>
                          </element>
                        </datatype>
                      </element>
                      <element name="annotation" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                      </element>
                      <element name="attributes" namespace="http://www.compositesw.com/services/system/admin/resource" minOccurs="0">
                        <datatype name="attributeList" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3329">
                          <element name="attribute" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                            <reference refId="1793"/>
                          </element>
                        </datatype>
                      </element>
                    </datatype>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="fault" direction="OUT">
        <datatype name="fault" extendedName="{http://www.compositesw.com/services/system/util/common}fault" namespace="http://www.compositesw.com/services/system/util/common" referenceDefinitionSet="/services/webservices/system/util/common/operations/CommonSchema" referenceType="{http://www.compositesw.com/services/system/util/common}fault" subType="ELEMENT_DECL" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="ELEMENT" componentName="{http://www.compositesw.com/services/system/util/common}fault">
          <schemaDatatype>
            <datatype name="fault" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="fault" superTypeNamespace="http://www.compositesw.com/services/system/util/common" subType="ELEMENT_DECL" type="TREE" refId="3585">
              <element name="errorEntry" namespace="http://www.compositesw.com/services/system/util/common" maxOccurs="2147483647" minOccurs="0">
                <datatype name="messageEntry" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="anyType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="COMPLEX_TYPE" type="TREE" refId="3841">
                  <element name="code" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="name" namespace="http://www.compositesw.com/services/system/util/common">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="message" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="detail" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="string" namespace="http://www.w3.org/2001/XMLSchema" superTypeName="anySimpleType" superTypeNamespace="http://www.w3.org/2001/XMLSchema" type="STRING" maxLength="2147483647"/>
                  </element>
                  <element name="severity" namespace="http://www.compositesw.com/services/system/util/common" minOccurs="0">
                    <datatype name="messageSeverity" namespace="http://www.compositesw.com/services/system/util/common" superTypeName="string" superTypeNamespace="http://www.w3.org/2001/XMLSchema" subType="SIMPLE_TYPE" type="STRING" maxLength="2147483647"/>
                  </element>
                </datatype>
              </element>
            </datatype>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getBasicResourceCursor_PROCEDURE_CURSOR:
&#x9;-- CIS Repository Helper Procedure --

&#x9;This procedure retrieves the resource metadata for a given resource that is a procedure object providing both input and output parameters.  
&#x9;A cursor of metadata is returned. This procedure invokes 2 lower level API procedures:
&#x9;&#x9;getBasicResourceXML - this performs the actual invocation to the CIS repository API and returns XML
&#x9;&#x9;getBasicResourceXSLT_PROCEDURE - this procedure takes the XML response from getBasicResourceXML 
&#x9;&#x9;&#x9;and turns it into a cursor which is more usable by other CIS procedures.
&#x9;It should be noted that Procedures may return more than one output cursor.  
&#x9;The field &quot;sqlText&quot; will contain the actual CURSOR (...) definition and will be not null for each cursor output parameter.
&#x9;This may be true for SQL Procedures or Parameterized queries.  
&#x9;Generally speaking, for XSLT Procedures, there will only be one output cursor.

&#x9;General usage guidelines:
&#x9;&#x9;This procedure may generate 1 or more rows where columnNum=0.
&#x9;&#x9;&#x9;Use case 1: The very first row generated where columnNum=0 and columnName=null serves the purpose of providing general information
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;about the procedure such as annotation, sqlText, proprietaryModel.
&#x9;&#x9;&#x9;Use case 2: This row may be a CURSOR where the columnName=&lt;cursor name&gt; and columnType=CURSOR.  This row servers the purpose of
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;defining when the CURSOR columns begin.  The paramDirection=OUT for each column.  Any rows previous to this row
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;would have paramDirection=IN for input columns.  The sqlText column will hold the entire CURSOR definition.
&#x9;&#x9;&#x9;If only columns are desired and not cursor then use where columnNum &gt; 0 when invoking the procedure.

&#x9;&#x9;The paramDirection [IN|OUT|INOUT] may be null for first row, IN for input columns, OUT for output columns and INOUT for input/output columns.

&#x9;mtinus: 10/24/2013
&#x9;Support case: 19620 - Composite does not support typed xml data types in a view variable declaration.  Only the generic &quot;XML&quot; is supported.
&#x9;&#x9;When generating views, the user of this procedure should use the columnBaseType when the dataType is xmlType otherwise use the columnType for defining
&#x9;&#x9;IN parameter declarations for VIEWS.

&#x9;Input:
&#x9;&#x9;fullResourcePath - Full resource path which includes the path and the resource name  
&#x9;&#x9;&#x9;Values: e.g. /shared/Utilities/repository/examples/source/PRODUCT_VIEW
&#x9;&#x9;resourceType - Type of CIS resource to be created
&#x9;&#x9;&#x9;Values: see &quot;TYPES / SUBTYPES&quot; listing below.  e.g. TABLE
&#x9;&#x9;cursorNum - For multiple output cursors in a procedure, this provides a way to identify which cursor
&#x9;&#x9;&#x9;the user would like to select.  If null or less than zero, then 0 is the default which returns all cursors.
&#x9;Output:
&#x9;&#x9;result - XML response containing the resource metadata
&#x9;&#x9;&#x9;CURSOR (
&#x9;&#x9;&#x9;&#x9;resourceId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;The resource id.
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(4096), &#x9;&#x9;The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;&#x9;&#x9;changeId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;The change id.
    &#x9;&#x9;    ownerName&#x9;&#x9;VARCHAR(255), &#x9;&#x9;The owner name
&#x9;&#x9;&#x9;&#x9;ownerDomain&#x9;&#x9;VARCHAR(255), &#x9;&#x9;The owner domain.
    &#x9;&#x9;    impactLevel&#x9;&#x9;VARCHAR(255), &#x9;&#x9;The impact level - NONE for no impact.
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;Provides the annotation for the resource
&#x9;&#x9;&#x9;&#x9;explicitlyDesigned &#x9;BIT, &#x9;&#x9;&#x9;Determines whether the model was explicitly designed or no
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;LONGVARCHAR, &#x9;&#x9;The scriptText for a cursor
&#x9;&#x9;&#x9;&#x9;proprietaryModel LONGVARCHAR, &#x9;&#x9;The proprietary model
&#x9;&#x9;&#x9;&#x9;columnNum &#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;The ordinal value of the column (column number or column order)
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(4096),&#x9;&#x9;The base column type.  e.g. VECTOR ROW, CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC, and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;The base column type.  e.g. CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(32768),&#x9;&#x9;The native base type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(32768)&#x9;&#x9;The native column type.  Currently defaulted to null. Future expansion.
&#x9;&#x9;&#x9;&#x9;)

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;04/27/2012&#x9;&#x9;Mike Tinius        &#x9;5.2.0&#x9;&#x9;&#x9;Created new.
&#x9;2013.2&#x9;&#x9;03/19/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Added annotation to result cursor
&#x9;2013.3&#x9;&#x9;06/27/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Modified to not output any cursor for stored procedure with no output cursor
&#x9;2013.4&#x9;&#x9;09/12/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.1.0&#x9;&#x9;&#x9;Modified if/then to if/then/else because it was not correctly parsing the CURSOR () output.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.0: Modified to check for generic soap &quot;Envelope&quot; type and set to generic XML when dataType=&apos;xmlType&apos;.
&#x9;2014.2&#x9;&#x9;03/30/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;B.P. 8.1.1: Fixed issue where the columnType had 2 parenthesis VARCHAR(255)) for the last column in the list.  Addressed issue with embedded spaces and commas in column names.
&#x9;2018.100&#x9;03/02/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Replaced RegexSplit with extractDelimitedText.  Increased size of resourcePath to VARCHAR(4096) and columnType to VARCHAR(4096).
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Replaced call to findString with INSTR which is more efficient.
&#x9;2020.200&#x9;03/02/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added columnNum, resourceId, changeId, ownerName, ownerDomain, impactLevel and proprietaryModel to the output.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Performance tuning - Invoke TDV getResource API directly with no other intermediate calls except RegexReplace. (code to the bare metal)
&#x9;2020.400&#x9;10/15/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added XML unescape characters for all attributes.  Fixed issue with not getting last parameter in cursor.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.


&#x9;TYPES / SUBTYPES:
&#x9;=================
&#x9;The following resource types/subtypes are supported by this operation.  Resources
&#x9;cannot be created under &quot;/services&quot; unless otherwise noted, and cannot be created
&#x9;within a physical data source.  

&#x9;* LINK / unknown at this time

&#x9;(CIS procedures)
&#x9;* PROCEDURE / SQL_SCRIPT_PROCEDURE - A Composite SQL Procedure.  Created with a simple default script body that is runnable.
&#x9;(Custom procedures)
&#x9;* PROCEDURE / JAVA_PROCEDURE - A Composite java data source procedure.  Created from a java data source (jar file).
&#x9;(Database procedures)
&#x9;* PROCEDURE / EXTERNAL_SQL_PROCEDURE - A Composite Packaged Query.  Created with no SQL text, so it is not runnable.  
&#x9;* PROCEDURE / DATABASE_PROCEDURE - A database stored procedure.
&#x9;(XML procedures)
&#x9;* PROCEDURE / BASIC_TRANSFORM_PROCEDURE - A Composite Basic XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XSLT_TRANSFORM_PROCEDURE - A Composite XSLT Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / STREAM_TRANSFORM_PROCEDURE - A Composite XSLT Streaming Transformation procedure.  Created with no target procedure and no output columns, so it is not runnable.
&#x9;* PROCEDURE / XQUERY_TRANSFORM_PROCEDURE - A Composite XQUERY Transformation Procedure.  Created with no target schema and no model, so it is not runnable.
&#x9;(Misc procedures)
&#x9;* PROCEDURE / OPERATION_PROCEDURE - A Composite web service or HTTP procedure operation.
*/
PROCEDURE getBasicResourceCursor_PROCEDURE_CURSOR(
    IN fullResourcePath &#x9;LONGVARCHAR,  
    IN resourceType &#x9;&#x9;VARCHAR, 
&#x9;IN cursorNum&#x9;&#x9;&#x9;INTEGER,
    OUT result&#x9;&#x9;&#x9;&#x9; PIPE (
&#x9;&#x9;&#x9;&#x9;resourceId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;--The resource id.
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;--The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(4096), &#x9;&#x9;--The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;--The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;&#x9;&#x9;changeId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;--The change id.
    &#x9;&#x9;    ownerName&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The owner name
&#x9;&#x9;&#x9;&#x9;ownerDomain&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The owner domain.
    &#x9;&#x9;    impactLevel&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The impact level - NONE for no impact.
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;--Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;--Provides the annotation for the resource
&#x9;&#x9;&#x9;&#x9;explicitlyDesigned &#x9;BIT, &#x9;&#x9;&#x9;--Determines whether the model was explicitly designed or no
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;LONGVARCHAR, &#x9;&#x9;--The scriptText for a cursor
&#x9;&#x9;&#x9;&#x9;proprietaryModel LONGVARCHAR, &#x9;&#x9;--The proprietary model
&#x9;&#x9;&#x9;&#x9;columnNum &#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;--The ordinal value of the column (column number or column order)
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(4096),&#x9;&#x9;--The actual column type. e.g. CURSOR, XML, VARCHAR(255), DECIMAL(32,2), BIGINT, NUMERIC(2147483647,0), and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;--The base column type.  e.g. VECTOR, CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC, and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;--1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;--The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(32768),&#x9;&#x9;--The native base type.  Currently defaulted to null.  Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(32768)&#x9;&#x9;--The native column type.  Currently defaulted to null. Future expansion.
        )
    )
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getBasicResourceCursor_PROCEDURE_CURSOR&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE debugPrintSize&#x9;&#x9;&#x9;INTEGER DEFAULT 63900;
&#x9;DECLARE cursorNum_&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT cursorNum;
&#x9;DECLARE parseAttributeNameList&#x9;LONGVARCHAR DEFAULT &apos;id,name,path,type,subtype,changeId,ownerName,ownerDomain,impactLevel,enabled,annotation,tableType,explicitlyDesigned,scriptText,proprietaryModel,&apos;;
&#x9;DECLARE parseColumnNameList&#x9;&#x9;LONGVARCHAR DEFAULT &apos;name,annotation,direction,&apos;;
&#x9;DECLARE parseColumnTypeList&#x9;&#x9;LONGVARCHAR DEFAULT &apos;definition,name,nativeType,namespace,referencePath,proprietaryModel,&apos;;
&#x9;DECLARE type recType&#x9;&#x9;&#x9;ROW(
&#x9;&#x9;&#x9;&#x9;resourceId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;--The resource id.
&#x9;&#x9;        resourceName &#x9;VARCHAR(255), &#x9;&#x9;--The name of the resource.
&#x9;&#x9;        resourcePath &#x9;VARCHAR(4096), &#x9;&#x9;--The full resource path.
        &#x9;&#x9;resourceType &#x9;VARCHAR(255), &#x9;&#x9;--The resource type: PROCEDURE
&#x9;&#x9;        subtype &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The resource sub type. e.g. SQL_SCRIPT_PROCEDURE, XSLT_TRANSFORM_PROCEDURE
&#x9;&#x9;&#x9;&#x9;changeId&#x9;&#x9;BIGINT,&#x9;&#x9;&#x9;&#x9;--The change id.
    &#x9;&#x9;    ownerName&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The owner name
&#x9;&#x9;&#x9;&#x9;ownerDomain&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The owner domain.
    &#x9;&#x9;    impactLevel&#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The impact level - NONE for no impact.
&#x9;&#x9;        enabled &#x9;&#x9;BIT, &#x9;&#x9;&#x9;&#x9;--Indicates whether the resource is enabled (1) or not (0)
&#x9;&#x9;&#x9;&#x9;annotation &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;--Provides the annotation for the resource
&#x9;&#x9;&#x9;&#x9;explicitlyDesigned &#x9;BIT, &#x9;&#x9;&#x9;--Determines whether the model was explicitly designed or no
&#x9;&#x9;        tableType &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--Provides the tableType which is null for procedures.  This column is here for consistency with getBasicResourceCursor_SQL_TABLE.
&#x9;&#x9;        sqlText &#x9;&#x9;LONGVARCHAR, &#x9;&#x9;--The scriptText for a cursor
&#x9;&#x9;&#x9;&#x9;proprietaryModel LONGVARCHAR, &#x9;&#x9;--The proprietary model
&#x9;&#x9;&#x9;&#x9;columnNum &#x9;&#x9;INTEGER,&#x9;&#x9;&#x9;--The ordinal value of the column (column number or column order)
&#x9;&#x9;&#x9;&#x9;columnName &#x9;&#x9;VARCHAR(255), &#x9;&#x9;--The name of the column.
&#x9;&#x9;&#x9;&#x9;columnType &#x9;&#x9;VARCHAR(4096),&#x9;&#x9;--The actual column type. e.g. CURSOR, XML, VARCHAR(255), DECIMAL(32,2), BIGINT, NUMERIC(2147483647,0), and etc.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--or a specific typed XML: /shared/BestPracticesTest/Application/DefinitionSets/OrderTransactionsWSDL.&quot;{http://www.compositesw.com/example/transaction/orders/v1.0}OrdersRequest&quot;
&#x9;&#x9;&#x9;&#x9;columnBaseType&#x9;VARCHAR(255),&#x9;&#x9;--The base column type.  e.g. VECTOR ROW, CURSOR, XML, BIGINT, INTEGER, DECIMAL, VARCHAR, NUMERIC, and etc.
&#x9;&#x9;&#x9;&#x9;dataType&#x9;&#x9;VARCHAR(255),&#x9;&#x9;--1 of [sqlType, xmlType, cursorType, cursorColumn]
&#x9;&#x9;&#x9;&#x9;paramDirection&#x9;VARCHAR(255),&#x9;&#x9;--The direction of the parameter. e.g. 1 of [IN,OUT,INOUT]
&#x9;&#x9;&#x9;&#x9;nativeBaseType &#x9;VARCHAR(32768),&#x9;&#x9;--The native base type.  Currently defaulted to null.  Future expansion.
&#x9;&#x9;&#x9;&#x9;nativeType &#x9;&#x9;VARCHAR(32768)&#x9;&#x9;--The native column type.  Currently defaulted to null. Future expansion.
&#x9;);
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;recType;
&#x9;DECLARE request&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE createResponseXML&#x9;&#x9;XML;
&#x9;DECLARE faultResponseXML&#x9;&#x9;XML;
&#x9;DECLARE createResponseStr&#x9;&#x9;LONGVARCHAR;
&#x9;-- XML processing variables
&#x9;DECLARE resourceEntry&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE xmlEntry&#x9;&#x9;&#x9;&#x9;LONGVARCHAR; 
&#x9;DECLARE pos1, pos2&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos3, pos4, pos5&#x9;&#x9;INTEGER;
&#x9;DECLARE i, pbeg, pend, len&#x9;&#x9;INTEGER;
&#x9;DECLARE name&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR; 
&#x9;DECLARE nameValue&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE namespaceTag&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;DECLARE cursorDefinition&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE columnDefinition&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE numOutCursors&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE nativeBaseType&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE nativeType&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parameterType&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parameterTypeReferencePath LONGVARCHAR;
&#x9;DECLARE parameterTypeName&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE parameterTypeNamespace&#x9;LONGVARCHAR;
&#x9;-- Regex pattern for encoding values in double quotes
&#x9;DECLARE regexSize&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 200000;
&#x9;DECLARE regexReplacePatternDoubleQuote &#x9;VARCHAR DEFAULT &apos;(?=[^&quot;]{0,&apos;||regexSize||&apos;}&quot;(?:[^&quot;\r\n]{0,&apos;||regexSize||&apos;}&quot;[^&quot;]{0,&apos;||regexSize||&apos;}&quot;){0,&apos;||regexSize||&apos;}[^&quot;\r\n]{0,&apos;||regexSize||&apos;}$)&apos;;
&#x9;DECLARE regexReplacePatternParentheses&#x9;VARCHAR DEFAULT &apos;(?=[^()]{0,&apos;||regexSize||&apos;}\))&apos;;

&#x9;-- 0 means get all input/output cursors
&#x9;if (cursorNum_ is null or cursorNum_ &lt; 0) then
&#x9;&#x9;set cursorNum_ = 0;
&#x9;end if;

&#x9;-- Invoke the TDV API to getResource attributes
&#x9;SET request = 
&#x9;&#x9;&apos;&lt;resource:getResource xmlns:resource=&quot;http://www.compositesw.com/services/system/admin/resource&quot; xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;resource:path&gt;&apos; || CAST(XMLTEXT(fullResourcePath) AS LONGVARCHAR) || &apos;&lt;/resource:path&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;resource:type&gt;&apos; || CAST(XMLTEXT(resourceType) AS LONGVARCHAR) || &apos;&lt;/resource:type&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;  &lt;resource:detail&gt;FULL&lt;/resource:detail&gt;&apos;||CHR(10)||
&#x9;&#x9;&apos;&lt;/resource:getResource&gt;&apos;;

&#x9;-----------------------------
&#x9;-- Invoke Web Service API
&#x9;-----------------------------
&#x9;CALL /services/webservices/system/admin/resource/operations/getResource(request, createResponseXML, faultResponseXML);
&#x9;IF (faultResponseXML IS NOT NULL) THEN
&#x9;&#x9;RAISE ex VALUE CAST(faultResponseXML AS LONGVARCHAR);
&#x9;END IF;

&#x9;-- Get the namespace tag=ns1 from [&lt;ns1: and &lt;/ns1:] and replace it with [&lt;resource: and &lt;/resource:]
&#x9;SET createResponseStr = CAST(createResponseXML AS LONGVARCHAR);
&#x9;IF (createResponseStr IS NOT NULL AND LENGTH(createResponseStr) &gt; 0) THEN
&#x9;&#x9;SET pos1 = INSTR(createResponseStr, &apos;&lt;&apos;);
&#x9;&#x9;SET pos2 = INSTR(createResponseStr, &apos;:&apos;);
&#x9;&#x9;IF (pos1 &gt; 0 AND pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;SET namespaceTag = SUBSTRING(createResponseStr, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;IF (namespaceTag &lt;&gt; &apos;resource&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET createResponseStr = REPLACE(createResponseStr, &apos;&lt;&apos;||namespaceTag||&apos;:&apos;, &apos;&lt;resource:&apos;);
&#x9;&#x9;&#x9;&#x9;SET createResponseStr = REPLACE(createResponseStr, &apos;&lt;/&apos;||namespaceTag||&apos;:&apos;, &apos;&lt;/resource:&apos;);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     createResponseStr=&apos;||NVL(createResponseStr,&apos;null&apos;),1,debugPrintSize));
&#x9;END IF;

&#x9;-- Extract resource:resource
&#x9;SET pos1 = INSTR(createResponseStr, &apos;&lt;resource:resource&apos;);
&#x9;SET pos2 = INSTR(createResponseStr, &apos;&lt;/resource:resource&gt;&apos;);
&#x9;SET len = LENGTH(&apos;&lt;resource:resource&gt;&apos;);
&#x9;SET resourceEntry = TRIM(SUBSTRING(createResponseStr, pos1, pos2-pos1+len+1));
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     resource:resource[1]:&apos;||NVL(resourceEntry,&apos;null&apos;),1,debugPrintSize));
&#x9;END IF;

&#x9;-- Initialize resource record structure
&#x9;SET rec = null;
&#x9;SET rec.columnNum = 0;

&#x9;-- Extract all top level resource attributes
&#x9;-- &apos;id,name,path,type,subtype,changeId,ownerName,ownerDomain,impactLevel,enabled,annotation,tableType,explicitlyDesigned,scriptText,proprietaryModel,&apos;
&#x9;SET pbeg = 1;
&#x9;SET pend = INSTR(parseAttributeNameList, &apos;,&apos;);
&#x9;WHILE (pend &gt; 0) DO
&#x9;&#x9;SET name = SUBSTRING(parseAttributeNameList, pbeg, pend-pbeg);

&#x9;&#x9;-- Extract the name value
&#x9;&#x9;SET nameValue = null;
&#x9;&#x9;SET pos3 = INSTR(resourceEntry, &apos;&lt;resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;SET pos4 = INSTR(resourceEntry, &apos;&lt;/resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;IF (pos3 &gt; 0 or pos4 &gt; 0) THEN
&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;SET nameValue = TRIM(SUBSTRING(resourceEntry, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;END IF;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     name=&apos;||NVL(name,&apos;null&apos;)||&apos;  value=&apos;||NVL(nameValue,&apos;[NULL]&apos;),1,debugPrintSize));
&#x9;&#x9;END IF;

/*
&#x9;The Escape Characters: &#x9;When unescaping parsed data from XML: 
&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&amp;quot; 
&#x9;apostrophe &#x9;&#x9;(&apos;)&#x9;&#x9;&#x9;&amp;apos; 
&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;amp;
&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&amp;lt; 
&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&amp;gt; 
*/
&#x9;&#x9;IF (INSTR(nameValue, &apos;&amp;&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET nameValue = REPLACE(nameValue, &apos;&amp;lt;&apos;, &apos;&lt;&apos;);
&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;gt;&apos;, &apos;&gt;&apos;);
&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;apos;&apos;, &apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;quot;&apos;, &apos;&quot;&apos;);
&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;amp;&apos;, &apos;&amp;&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Assign the resource value to output record structure variables
&#x9;&#x9;CASE
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;id&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET rec.resourceId = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;name&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET rec.resourceName = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;path&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET rec.resourcePath = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;type&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET rec.resourceType = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;subtype&apos;) THEN &#x9;&#x9;&#x9;SET rec.subtype = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;changeId&apos;) THEN &#x9;&#x9;&#x9;SET rec.changeId = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;ownerName&apos;) THEN &#x9;&#x9;&#x9;SET rec.ownerName = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;ownerDomain&apos;) THEN &#x9;&#x9;SET rec.ownerDomain = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;impactLevel&apos;) THEN &#x9;&#x9;SET rec.impactLevel = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;enabled&apos;) THEN &#x9;&#x9;&#x9;SET rec.enabled = CASE WHEN LOWER(nameValue) = &apos;true&apos; THEN 1 ELSE 0 END;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;annotation&apos;) THEN &#x9;&#x9;SET rec.annotation = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;explicitlyDesigned&apos;) THEN SET rec.explicitlyDesigned = CASE WHEN LOWER(nameValue) = &apos;true&apos; THEN 1 ELSE 0 END;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;tableType&apos;) THEN &#x9;&#x9;&#x9;SET rec.tableType = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;scriptText&apos;) THEN &#x9;&#x9;SET rec.sqlText = nameValue;
&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;proprietaryModel&apos;) THEN &#x9;SET rec.proprietaryModel = nameValue;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;END CASE;
&#x9;&#x9;SET pbeg = pend+1;
&#x9;&#x9;SET pend = INSTR(parseAttributeNameList, &apos;,&apos;,pbeg);
&#x9;END WHILE;

&#x9;-- Insert the resource table row into the PIPE cursor
&#x9;INSERT INTO result VALUES(rec);

&#x9;-- Extract resource:columns
&#x9;SET pos1 = INSTR(resourceEntry, &apos;&lt;resource:parameters&gt;&apos;);
&#x9;SET pos2 = INSTR(resourceEntry, &apos;&lt;/resource:parameters&gt;&apos;);
&#x9;SET len = LENGTH(&apos;&lt;resource:parameters&gt;&apos;);
&#x9;SET resourceEntry = TRIM(SUBSTRING(resourceEntry, pos1, pos2-pos1+len+1));
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     resource:parameters[1]:&apos;||NVL(resourceEntry,&apos;null&apos;),1,debugPrintSize));
&#x9;END IF;

&#x9;SET pos1 = INSTR(resourceEntry, &apos;&lt;resource:parameter&gt;&apos;);
&#x9;SET pos2 = INSTR(resourceEntry, &apos;&lt;/resource:parameter&gt;&apos;);
&#x9;WHILE (pos1 &gt; 0 and pos2 &gt; 0) DO
&#x9;&#x9;SET rec.columnNum = rec.columnNum + 1;
&#x9;&#x9;SET len = LENGTH(&apos;&lt;resource:parameter&gt;&apos;);
&#x9;&#x9;SET xmlEntry = TRIM(SUBSTRING(resourceEntry, pos1, pos2-pos1+len+1));
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     resource:parameter[&apos;||rec.columnNum||&apos;]:&apos;||NVL(xmlEntry,&apos;null&apos;),1,debugPrintSize));
&#x9;&#x9;END IF;

&#x9;&#x9;-- Initialize
&#x9;&#x9;SET parameterType = null;
&#x9;&#x9;SET parameterTypeName = null;
&#x9;&#x9;SET parameterTypeReferencePath = null;
&#x9;&#x9;SET parameterTypeNamespace = null;
&#x9;&#x9;SET rec.sqlText = null;
&#x9;&#x9;SET rec.proprietaryModel = null;
&#x9;&#x9;SET rec.annotation = null;
&#x9;&#x9;SET rec.columnName = null;
&#x9;&#x9;SET rec.columnType = null;
&#x9;&#x9;SET rec.columnBaseType = null;
&#x9;&#x9;SET rec.paramDirection = null;
&#x9;&#x9;SET rec.nativeBaseType = null;
&#x9;&#x9;SET rec.nativeType = null;
&#x9;&#x9;SET rec.dataType = &apos;sqlType&apos;;
&#x9;&#x9;IF (INSTR(LOWER(xmlEntry), &apos;&lt;common:xmltype&gt;&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET rec.dataType = &apos;xmlType&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Extract column name, annotation and direction
&#x9;&#x9;-- &apos;name,annotation,direction,&apos;
&#x9;&#x9;SET pbeg = 1;
&#x9;&#x9;SET pend = INSTR(parseColumnNameList, &apos;,&apos;);
&#x9;&#x9;WHILE (pend &gt; 0) DO
&#x9;&#x9;&#x9;SET name = SUBSTRING(parseColumnNameList, pbeg, pend-pbeg);

&#x9;&#x9;&#x9;-- Extract the name value
&#x9;&#x9;&#x9;SET nameValue = null;
&#x9;&#x9;&#x9;SET pos3 = INSTR(xmlEntry, &apos;&lt;resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;SET pos4 = INSTR(xmlEntry, &apos;&lt;/resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;IF (pos3 &gt; 0 or pos4 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;resource:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET nameValue = TRIM(SUBSTRING(xmlEntry, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     name=&apos;||NVL(name,&apos;null&apos;)||&apos;  value=&apos;||NVL(nameValue,&apos;[NULL]&apos;),1,debugPrintSize));
&#x9;&#x9;&#x9;END IF;

/*
&#x9;The Escape Characters: &#x9;When unescaping parsed data from XML: 
&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&amp;quot; 
&#x9;apostrophe &#x9;&#x9;(&apos;)&#x9;&#x9;&#x9;&amp;apos; 
&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;amp;
&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&amp;lt; 
&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&amp;gt; 
*/
&#x9;&#x9;&#x9;IF (INSTR(nameValue, &apos;&amp;&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET nameValue = REPLACE(nameValue, &apos;&amp;lt;&apos;, &apos;&lt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;gt;&apos;, &apos;&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;apos;&apos;, &apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;quot;&apos;, &apos;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;amp;&apos;, &apos;&amp;&apos;);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Assign the column name and annotation value to output record structure variables
&#x9;&#x9;&#x9;CASE
&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;name&apos;) THEN &#x9;&#x9;&#x9;SET rec.columnName = nameValue;
&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;direction&apos;) THEN &#x9;&#x9;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.paramDirection = nameValue;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (rec.paramDirection = &apos;RETURN&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.paramDirection = &apos;OUT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;annotation&apos;) THEN &#x9;SET rec.annotation = nameValue;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;SET pbeg = pend+1;
&#x9;&#x9;&#x9;SET pend = INSTR(parseColumnNameList, &apos;,&apos;,pbeg);
&#x9;&#x9;END WHILE;

&#x9;&#x9;-- Extract column types
&#x9;&#x9;-- &apos;definition,name,nativeType,namespace,referencePath,proprietaryModel,&apos;
&#x9;&#x9;SET pbeg = 1;
&#x9;&#x9;SET pend = INSTR(parseColumnTypeList, &apos;,&apos;);
&#x9;&#x9;WHILE (pend &gt; 0) DO
&#x9;&#x9;&#x9;SET name = SUBSTRING(parseColumnTypeList, pbeg, pend-pbeg);

&#x9;&#x9;&#x9;-- Extract the name value
&#x9;&#x9;&#x9;SET nameValue = null;
&#x9;&#x9;&#x9;SET pos3 = INSTR(xmlEntry, &apos;&lt;common:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;SET pos4 = INSTR(xmlEntry, &apos;&lt;/common:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;IF (pos3 &gt; 0 or pos4 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;common:&apos;||name||&apos;&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET nameValue = TRIM(SUBSTRING(xmlEntry, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos;:     name=&apos;||NVL(name,&apos;null&apos;)||&apos;  value=&apos;||NVL(nameValue,&apos;[NULL]&apos;),1,debugPrintSize));
&#x9;&#x9;&#x9;END IF;
/*
&#x9;The Escape Characters: &#x9;When unescaping parsed data from XML: 
&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&amp;quot; 
&#x9;apostrophe &#x9;&#x9;(&apos;)&#x9;&#x9;&#x9;&amp;apos; 
&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;amp;
&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&amp;lt; 
&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&amp;gt; 
*/
&#x9;&#x9;&#x9;IF (INSTR(nameValue, &apos;&amp;&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET nameValue = REPLACE(nameValue, &apos;&amp;lt;&apos;, &apos;&lt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;gt;&apos;, &apos;&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;apos;&apos;, &apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;quot;&apos;, &apos;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;SET&#x9;nameValue = REPLACE(nameValue, &apos;&amp;amp;&apos;, &apos;&amp;&apos;);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Assign the column type values to output record structure variables
&#x9;&#x9;&#x9;IF (LOWER(rec.dataType) = &apos;xmltype&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- &lt;common:xmlType&gt;
&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;columnType and nativeBaseType are different for xmlType than sqlType
&#x9;&#x9;&#x9;&#x9;CASE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Map to:
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;referencePath&apos;) THEN &#x9;&#x9;SET parameterTypeReferencePath = nameValue;&#x9;-- 
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;name&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET parameterTypeName = nameValue;&#x9;&#x9;&#x9;-- columnType
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;namespace&apos;) THEN &#x9;&#x9;&#x9;SET parameterTypeNamespace = nameValue;&#x9;&#x9;-- 
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;proprietaryModel&apos;) THEN &#x9;SET rec.proprietaryModel = nameValue;&#x9;&#x9;-- proprietaryModel
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;-- &lt;common:sqlType&gt;
&#x9;&#x9;&#x9;&#x9;CASE&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Map to
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;definition&apos;) THEN &#x9;&#x9;SET parameterType = nameValue;&#x9;&#x9;&#x9;&#x9;-- columnType
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;name&apos;) THEN &#x9;&#x9;&#x9;&#x9;SET parameterTypeName = nameValue;&#x9;&#x9;&#x9;-- columnBaseType
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;nativeType&apos;) THEN &#x9;&#x9;SET nativeType = nameValue;&#x9;&#x9;&#x9;&#x9;&#x9;-- nativeType
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN LOWER(name) = LOWER(&apos;proprietaryModel&apos;) THEN&#x9;SET rec.proprietaryModel = nameValue;&#x9;&#x9;-- proprietaryModel
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET pbeg = pend+1;
&#x9;&#x9;&#x9;SET pend = INSTR(parseColumnTypeList, &apos;,&apos;,pbeg);
&#x9;&#x9;END WHILE;

&#x9;&#x9;-- Process the parameters
&#x9;&#x9;if (rec.paramDirection = &apos;IN&apos; OR 
&#x9;&#x9;&#x9;(rec.paramDirection = &apos;OUT&apos; AND (parameterType IS NULL OR INSTR(parameterType, &apos;CURSOR&apos;) = 0)) OR
&#x9;&#x9;&#x9;(rec.paramDirection = &apos;INOUT&apos; AND (parameterType IS NULL OR INSTR(parameterType, &apos;CURSOR&apos;) = 0))
&#x9;&#x9;&#x9;) then
&#x9;&#x9;&#x9;set rec.columnType = parameterType;
&#x9;&#x9;&#x9;if (rec.dataType = &apos;xmlType&apos;) then
&#x9;&#x9;&#x9;&#x9;set rec.columnBaseType = &apos;XML&apos;;
&#x9;&#x9;&#x9;&#x9;if (parameterTypeNamespace is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = parameterTypeName;
&#x9;&#x9;&#x9;&#x9;else
    &#x9;&#x9;&#x9;&#x9;--e.g. /shared/exampleWS/Application/DefinitionSets/CustomerWSDL.&quot;{http://www.compositesw.com/example/transaction/customer/v1.0}CustomerRequest&quot;,
&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterTypeReferencePath is not null and LENGTH(parameterTypeReferencePath) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = NVL(parameterTypeReferencePath,&apos;null&apos;)||&apos;.&quot;{&apos;||parameterTypeNamespace||&apos;}&apos;||parameterTypeName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (parameterTypeName = &apos;Envelope&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = &apos;XML&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = &apos;&quot;{&apos;||parameterTypeNamespace||&apos;}&apos;||parameterTypeName||&apos;&quot;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;if (rec.columnType is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(rec.columnType, &apos;(&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;if (pos3 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnBaseType = TRIM(SUBSTRING(rec.columnType, 1, pos3 - 1));
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnBaseType = rec.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(rec.columnBaseType, &apos;VECTOR&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnBaseType = &apos;VECTOR&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Extract the native base type
&#x9;&#x9;&#x9;&#x9;if (nativeType is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (length(nativeType) &lt; 32768) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.nativeType = nativeType;
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.nativeType = SUBSTRING(nativeType,1,32768);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(nativeType, &apos;(&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;if (pos3 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.nativeBaseType = TRIM(SUBSTRING(nativeType, 1, pos3 - 1));
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.nativeBaseType = nativeType;
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Insert the record structure
&#x9;&#x9;&#x9;INSERT INTO result VALUES(rec);
&#x9;&#x9;end if;

&#x9;&#x9;if (rec.paramDirection = &apos;OUT&apos; AND POSITION(&apos;CURSOR&apos; IN parameterType) = 1) then
&#x9;&#x9;&#x9;set numOutCursors = numOutCursors + 1;
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call PRINT(moduleName||&apos; :   parameterType=[&apos;||NVL(parameterType,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Check to see if the number of the output cursor matches the one passed in by the user
&#x9;&#x9;&#x9;if (cursorNum_ = 0 or cursorNum_ = numOutCursors) then
&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(parameterType, &apos;CURSOR (&apos;);
&#x9;&#x9;&#x9;&#x9;set pos4 = INSTR(parameterType, &apos;CURSOR(&apos;);
&#x9;&#x9;&#x9;&#x9;set pos5 = INSTR(parameterType, &apos;CURSOR&apos;);

&#x9;&#x9;&#x9;&#x9;-- Set the sqlText to the cursor definition
&#x9;&#x9;&#x9;&#x9;SET rec.sqlText = parameterType;

&#x9;&#x9;&#x9;&#x9;if (pos3 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call PRINT(moduleName||&apos; :FOUND &quot;CURSOR (&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR (&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR (&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the trailing right parenthesis &quot;)&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;if ( SUBSTRING(cursorDefinition, LENGTH(cursorDefinition), 1) = &apos;)&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = SUBSTRING(cursorDefinition, 1, LENGTH(cursorDefinition) - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;elseif (pos4 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call PRINT(moduleName||&apos; :FOUND &quot;CURSOR(&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR(&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR(&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the trailing right parenthesis &quot;)&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;if ( SUBSTRING(cursorDefinition, LENGTH(cursorDefinition), 1) = &apos;)&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = SUBSTRING(cursorDefinition, 1, LENGTH(cursorDefinition) - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;elseif (pos5 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call PRINT(moduleName||&apos; :FOUND &quot;CURSOR&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Remove the leading &quot;CURSOR&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;set cursorDefinition = TRIM(REPLACE(parameterType, &apos;CURSOR&apos;,&apos;&apos;));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Only escape text that is double-quoted otherwise skip this operation.
&#x9;&#x9;&#x9;&#x9;IF (INSTR(cursorDefinition, &apos;&quot;&apos;)  &gt;  0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode spaces in double quotes.  This is required in order to parse the CURSOR line and separate columns from column types
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexReplace(cursorDefinition, &apos;\&apos;||&apos; &apos;||regexReplacePatternDoubleQuote, &apos;_0020&apos;, 0, cursorDefinition);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Encode commas in double quotes.  This is required i norder to parse the cursor line when column names contain embedded commas.  Commas separate the column/column type pairs.
&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexReplace(cursorDefinition, &apos;\&apos;||&apos;,&apos;||regexReplacePatternDoubleQuote, &apos;_002c&apos;, 0, cursorDefinition);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Encode commas in double quotes.  This is required i norder to parse the cursor line when column names contain embedded commas.  Commas separate the column/column type pairs.
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexReplace(cursorDefinition, &apos;\&apos;||&apos;,&apos;||regexReplacePatternParentheses, &apos;_002c&apos;, 0, cursorDefinition);
&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;call PRINT(SUBSTRING(moduleName||&apos; :   Cursor Def=[&apos;||cursorDefinition||&apos;]&apos;,1,debugPrintSize));
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Only output results when the CURSOR definition is not empty
&#x9;&#x9;&#x9;&#x9;if (cursorDefinition IS NOT NULL AND LENGTH(&apos;|&apos;||cursorDefinition||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnNum = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnType  = &apos;CURSOR&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnBaseType  = &apos;CURSOR&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.dataType  = &apos;cursorType&apos;;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the record structure
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(rec);

&#x9;&#x9;&#x9;&#x9;&#x9;--CURSOR (&quot;Product ID&quot; NUMERIC(2147483647,0), &quot;Product Name&quot; VARCHAR(32768), &quot;Category,ID&quot; NUMERIC(2147483647,0), &quot;Category, Name&quot; VARCHAR(32768), ProductDescription VARCHAR(32768), SerialNumber VARCHAR(32768), UnitPrice DECIMAL(32,6), ReorderLevel NUMERIC(2147483647,0), LeadTime VARCHAR(32768))

&#x9;&#x9;&#x9;&#x9;&#x9;-- Parse the CURSOR list based on a comma space &apos;, &apos; separator.
&#x9;&#x9;&#x9;&#x9;&#x9;SET pbeg = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;SET pend = INSTR(cursorDefinition, &apos;,&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (pend &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Set the object definition
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnDefinition = TRIM(SUBSTRING(cursorDefinition, pbeg, pend-pbeg));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call PRINT(SUBSTRING(moduleName||&apos; :   Column Def: &apos;||columnDefinition,1,debugPrintSize));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnNum = rec.columnNum + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Initialize
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parameterType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parameterTypeName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parameterTypeReferencePath = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET parameterTypeNamespace = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sqlText = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.proprietaryModel = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.annotation = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnBaseType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.paramDirection = &apos;OUT&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.nativeBaseType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.nativeType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnName = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Parse the column and column type combination based on a space separator
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(columnDefinition, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos3 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnName = SUBSTRING(columnDefinition, 1, pos3-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = SUBSTRING(columnDefinition, pos3+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded space with a real space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(rec.columnName, &apos;_0020&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnName = REPLACE(rec.columnName, &apos;_0020&apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded comma with a real comma
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(rec.columnName, &apos;_002c&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnName = REPLACE(rec.columnName, &apos;_002c&apos;, &apos;,&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded space with a real space
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(rec.columnType, &apos;_0020&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = REPLACE(rec.columnType, &apos;_0020&apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Replace the encoded comma with a real comma
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (INSTR(rec.columnType, &apos;_002c&apos;) &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnType = REPLACE(rec.columnType, &apos;_002c&apos;, &apos;,&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
/*
&#x9;The Escape Characters: &#x9;When unescaping parsed data from XML: 
&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&amp;quot; 
&#x9;apostrophe &#x9;&#x9;(&apos;)&#x9;&#x9;&#x9;&amp;apos; 
&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;amp;
&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&amp;lt; 
&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&amp;gt; 
*/
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(rec.columnName, &apos;&amp;&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.columnName = REPLACE(rec.columnName, &apos;&amp;lt;&apos;, &apos;&lt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET&#x9;rec.columnName = REPLACE(rec.columnName, &apos;&amp;gt;&apos;, &apos;&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET&#x9;rec.columnName = REPLACE(rec.columnName, &apos;&amp;apos;&apos;, &apos;&apos;&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET&#x9;rec.columnName = REPLACE(rec.columnName, &apos;&amp;quot;&apos;, &apos;&quot;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET&#x9;rec.columnName = REPLACE(rec.columnName, &apos;&amp;amp;&apos;, &apos;&amp;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnBaseType = rec.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rec.columnBaseType is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set pos3 = INSTR(rec.columnType, &apos;(&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (pos3 &gt; 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set rec.columnBaseType = SUBSTRING(rec.columnBaseType, 1, pos3 - 1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (rec.columnName is not null) then
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.dataType  = &apos;cursorColumn&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET rec.sqlText = null;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Insert the record structure
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(rec);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pbeg = pend+1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pend = INSTR(cursorDefinition, &apos;,&apos;,pbeg);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pend = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF pbeg &lt;= LENGTH(cursorDefinition) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pend = LENGTH(cursorDefinition)+1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set numOutCursors = numOutCursors + 1;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;

&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos;:  CURRENT: pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;END IF;

&#x9;&#x9;-- Get the next attributes entry
&#x9;&#x9;SET pos1 = pos2;
&#x9;&#x9;SET pos1 = INSTR(resourceEntry, &apos;&lt;resource:parameter&gt;&apos;, pos1+1);
&#x9;&#x9;SET pos2 = INSTR(resourceEntry, &apos;&lt;/resource:parameter&gt;&apos;, pos1+1);
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos;:  NEXT: pos1=&apos;||pos1||&apos;  pos2=&apos;||pos2);
&#x9;&#x9;END IF;
&#x9;END WHILE;
EXCEPTION
&#x9;ELSE
&#x9;&#x9;RAISE ex VALUE &apos;EXEPTION: fullResourcePath=[&apos;||NVL(fullResourcePath,&apos;null&apos;)||&apos;]  resourceType=[&apos;||NVL(resourceType,&apos;null&apos;)||&apos;]  &apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR);
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/588</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/286</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/695</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/338</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/610</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/337</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/437</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/552</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/253</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/538</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/252</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/263</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/572</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/562</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/348</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/387</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/349</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/262</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/703</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>