<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="copyResourceAnnotations" path="/shared/Delta_DV/_scripts/Utilities/repository/copyResourceAnnotations" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[copyResourceAnnotations:

    This procedure copies the annotations from one resource to another. If both resources are of
    type &quot;TABLE&quot;, the column annotations are copied as well (where the column names are the same,
    ignoring case.) This procedure is NOT recursive when resources of type &quot;CONTAINER&quot; are
    specified as input. There are a couple of Utilities that can walk a resource or dependency
    tree and can be used in conjunction with this procedure.


    Input:
        inSourcePath - Path to the resource to get annotations from.
            Values: Any resource path

        inSourceType - The resource type of the resource to get annotations from.
            Values: Any resource type

        inDestPath - Path to the resource to get annotations from.
            Values: Any resource path

        inDestType - The resource type of the resource to get annotations from.
            Values: Any resource type


    Output:
        N/A (throws an exception if the destination resource can&apos;t be updated.)


    Exceptions:
        System.IllegalArgumentException - Thrown when inputs can&apos;t be validated.

        System.NotSupportedExceptions   - Copying annotations TO a data source table is not supported at this time.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;07/17/2012&#x9;&#x9;Calvin Goodirch&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;2018.100&#x9;01/10/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Modified so that column annotations are not modified on a published resource as this is not valid.
&#x9;2019.200&#x9;05/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified to use updateResourceAnnotationsV2 with no vector input instead of the deprecated updateResourceAnnotationsV2.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inSourcePath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inSourceType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="inDestPath" direction="IN" nullable="true">
      <datatype name="ResourcePath" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="inDestType" direction="IN" nullable="true">
      <datatype name="ResourceType" referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
    </parameter>
    <parameter name="success" direction="OUT" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="copyResponse" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="faultResponse" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceDefs" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceAnnotations" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="columnName">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceName" type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateResourceAnnotationsV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="annotation" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="inColumnAnnotations" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="updateResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
    copyResourceAnnotations:

    This procedure copies the annotations from one resource to another. If both resources are of
    type &quot;TABLE&quot;, the column annotations are copied as well (where the column names are the same,
    ignoring case.)  If the column name matches (case insensitive) and the source annotation has a value,
    set the destination annotation. otherwise destination annotation is preserved.

&#x9;This procedure is NOT recursive when resources of type &quot;CONTAINER&quot; are
    specified as input. There are a couple of Utilities that can walk a resource or dependency
    tree and can be used in conjunction with this procedure.


    Input:
        inSourcePath - Path to the resource to get annotations from.
            Values: Any resource path

        inSourceType - The resource type of the resource to get annotations from.
            Values: Any resource type

        inDestPath - Path to the resource to get annotations from.
            Values: Any resource path

        inDestType - The resource type of the resource to get annotations from.
            Values: Any resource type


    Output:
        N/A (throws an exception if the destination resource can&apos;t be updated.)


    Exceptions:
        System.NotFoundException      - Thrown when inputs can&apos;t be validated.

        System.NotSupportedExceptions - Copying annotations TO a data source table is not supported at this time.


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;07/17/2012&#x9;&#x9;Calvin Goodirch&#x9;&#x9;6.0.0&#x9;&#x9;&#x9;Created new
&#x9;2018.100&#x9;01/10/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Modified so that column annotations are not modified on a published resource as this is not valid.
&#x9;2019.200&#x9;05/15/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified to use updateResourceAnnotationsV2 with no vector input instead of the deprecated updateResourceAnnotationsV2.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE copyResourceAnnotations(
    IN inSourcePath &#x9;/lib/resource/ResourceDefs.ResourcePath,
    IN inSourceType &#x9;/lib/resource/ResourceDefs.ResourceType,
    IN inDestPath &#x9;&#x9;/lib/resource/ResourceDefs.ResourcePath,
    IN inDestType &#x9;&#x9;/lib/resource/ResourceDefs.ResourceType,
    OUT success &#x9;&#x9;BIT,
&#x9;OUT copyResponse &#x9; XML,
&#x9;OUT faultResponse    XML
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;copyResourceAnnotations&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/&quot;_debug&quot;.debug;
&#x9;DECLARE destType&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT inDestType;
    DECLARE resourceExists &#x9;&#x9;&#x9;BOOLEAN;
    DECLARE resourceAnnotation &#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
    DECLARE sourceColumns&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE destColumns &#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE columnAnnotations&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE columnEntry&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE columnName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE columnAnnotation&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pos1, pos2&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos3, pos4&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos5, pos6&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE len&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;

&#x9;-- If the destination path is within /services/databases/ or /services/webservices/ and the destType is not LINK then change it to LINK
&#x9;IF (INSTR(inDestPath, &apos;/services/databases/&apos;) = 1 OR INSTR(inDestPath, &apos;/services/webservices/&apos;) = 1 AND destType &lt;&gt; &apos;LINK&apos;) THEN
&#x9;&#x9;SET destType = &apos;LINK&apos;;
&#x9;END IF;

    -- make sure source resource exists
    --
    CALL /lib/resource/ResourceExists (inSourcePath, inSourceType, NULL, resourceExists);
    IF (NOT resourceExists) THEN
        RAISE System.NotFoundException VALUE &apos;Resource &apos; || inSourcePath || &apos; of type &apos; || inSourceType || &apos; does not exist.&apos;;
    END IF;

    -- make sure destination resource exists
    --
    CALL /lib/resource/ResourceExists (inDestPath, destType, NULL, resourceExists);
    IF (NOT resourceExists) THEN
        RAISE System.NotFoundException VALUE &apos;Resource &apos; || inDestPath || &apos; of type &apos; || destType || &apos; does not exist.&apos;;
    END IF;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL print(moduleName||&apos; : inSourcePath=&apos;||NVL(inSourcePath, &apos;null&apos;));
&#x9;&#x9;CALL print(moduleName||&apos; : inSourceType=&apos;||NVL(inSourceType, &apos;null&apos;));
&#x9;&#x9;CALL print(moduleName||&apos; :   inDestPath=&apos;||NVL(inDestPath, &apos;null&apos;));
&#x9;&#x9;CALL print(moduleName||&apos; :     destType=&apos;||NVL(destType, &apos;null&apos;));
&#x9;END IF;

    -- get the annotations from the source resource
    --
    FOR r AS
        SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceAnnotations(inSourcePath,inSourceType)
    DO
        -- if columnn name is null then we&apos;ve got the table row or the resource is not a table.
        --
        IF (r.columnName IS NULL) THEN

            -- only update the destination annotation if the source is not null
            --
            IF (r.annotation IS NOT NULL) THEN
                SET resourceAnnotation = r.annotation;
            END IF;
&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; : resourceAnnotation=&apos;||NVL(resourceAnnotation, &apos;null&apos;));
&#x9;&#x9;&#x9;END IF;

        -- otherwise we&apos;re dealing with a column and need to add it to the updateSqlTable request XML structure
        --
        ELSE
&#x9;&#x9;&#x9;-- Store the source column annotation as long as we know that the destination is not a published resource.
            IF (r.annotation IS NOT NULL AND LENGTH(r.annotation) &gt; 0 AND INSTR(inDestPath,&apos;/services/databases/&apos;) = 0 AND INSTR(inDestPath,&apos;/services/webservices/&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;SET sourceColumns = sourceColumns ||
&#x9;&#x9;&#x9;&#x9;&#x9;-- Repeat this &lt;resource:column&gt; for multiple columns
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:name&gt;&apos; || CAST(XMLTEXT(r.columnName) AS VARCHAR) || &apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:annotation&gt;&apos; || CAST(XMLTEXT(COALESCE(r.annotation, &apos;&apos;)) AS LONGVARCHAR) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

 &#x9;&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; : column=[&apos;||r.columnName||&apos;]  annotation=[&apos;||NVL(r.annotation, &apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
            END IF;
        END IF;
    END FOR;

    -- if the destination resource is a TABLE and the source resource had any column annotations defined.
    -- Do not build up a destination column list for published resources of type LINK.
    IF (destType = &apos;TABLE&apos; AND LENGTH(sourceColumns) &gt; 0) THEN
        -- build up the column definitions of the destination
        --
        FOR r AS
            SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceAnnotations(inDestPath,destType) WHERE columnName IS NOT NULL
        DO
&#x9;&#x9;&#x9;SET columnName = r.columnName;
&#x9;&#x9;&#x9;SET columnType = r.columnType;
&#x9;&#x9;&#x9;SET columnAnnotation = r.annotation;
&#x9;&#x9;&#x9;/* Example:

&#x9;&#x9;&#x9;&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:name&gt;productid&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:annotation&gt;Product identifier&lt;/resource:annotation&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;*/
&#x9;&#x9;&#x9;-- Search the input parameter for the column
&#x9;&#x9;&#x9;SET pos1 = INSTR(sourceColumns, &apos;&lt;resource:name&gt;&apos;||columnName||&apos;&lt;/resource:name&gt;&apos;);
&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(sourceColumns);
&#x9;&#x9;&#x9;&#x9;SET pos3 = INSTR(REVERSE(sourceColumns), REVERSE(&apos;&lt;resource:column&gt;&apos;), len-pos1);
&#x9;&#x9;&#x9;&#x9;SET pos4 = INSTR(sourceColumns, &apos;&lt;/resource:column&gt;&apos;, pos1);
&#x9;&#x9;&#x9;&#x9;SET pos3 = len-pos3-1;
&#x9;&#x9;&#x9;&#x9;IF (pos3 &gt; 0 AND pos4 &gt; 0 AND pos4 &gt; pos3) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;resource:column&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET columnEntry = TRIM(SUBSTRING(sourceColumns, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : columnEntry=&apos;||CHR(10)||NVL(columnEntry,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the resource annotation
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos5 = INSTR(columnEntry, &apos;&lt;resource:annotation&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos6 = INSTR(columnEntry, &apos;&lt;/resource:annotation&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET columnAnnotation = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos5 &gt; 0 AND pos6 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;resource:annotation&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET columnAnnotation = TRIM(SUBSTRING(columnEntry, pos5+len, pos6-(pos5+len)));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : columnEntry/annotation=[&apos;||NVL(columnAnnotation,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;SET destColumns = destColumns || 
&#x9;&#x9;&#x9;&#x9;&apos;        &lt;resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:name&gt;&apos; || CAST(XMLTEXT(columnName) AS VARCHAR) || &apos;&lt;/resource:name&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:dataType&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;                &lt;common:sqlType xmlns:common=&quot;http://www.compositesw.com/services/system/util/common&quot;&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;                    &lt;common:definition&gt;&apos; || CAST(XMLTEXT(columnType) AS VARCHAR) || &apos;&lt;/common:definition&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;                &lt;/common:sqlType&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;/resource:dataType&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;            &lt;resource:annotation&gt;&apos; || CAST(XMLTEXT(COALESCE(columnAnnotation, &apos;&apos;)) AS VARCHAR(2147483647)) || &apos;&lt;/resource:annotation&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;        &lt;/resource:column&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; : columnname=[&apos;||NVL(r.columnname, &apos;null&apos;)||&apos;]  annotation=[&apos;||NVL(r.annotation, &apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;END IF;
        END FOR;
    END IF;

&#x9;-- only when copying annotated columns from one table to another do we pass the destination column annotations&#x9;
&#x9;CASE 
&#x9;&#x9;WHEN (LENGTH(sourceColumns) &gt; 0 AND LENGTH(destColumns) &gt; 0) THEN 
&#x9;&#x9;&#x9;SET columnAnnotations = destColumns;
&#x9;&#x9;ELSE 
&#x9;&#x9;&#x9;SET columnAnnotations = NULL;
&#x9;END CASE;
&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL print(moduleName||&apos; : columnAnnotations=&apos;||CHR(10)||NVL(columnAnnotations, &apos;null&apos;));
&#x9;END IF;


    CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateResourceAnnotationsV2(
        inDestPath,
        destType,
        resourceAnnotation,
&#x9;&#x9;columnAnnotations,
        success,
        copyResponse,
        faultResponse
    ); 
END
</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:5:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:6:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/128</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/222</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/110</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/96</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/145</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/103</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/109</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/192</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/108</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/107</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/209</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/180</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>