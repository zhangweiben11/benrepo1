<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="cacheRefreshSynch" path="/shared/Delta_DV/_scripts/Utilities/cache/cacheRefreshSynch" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="cacheRefreshListPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
    </parameter>
    <parameter name="emailRecipients" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1000"/>
    </parameter>
    <parameter name="cachePause" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="skipAgeHours" direction="IN" nullable="true">
      <datatype name="DECIMAL" type="DECIMAL" maxDigits="6" maxFractionalDigits="2"/>
    </parameter>
    <parameter name="startAtCacheRow" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RefreshResourceCache" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RefreshResourceCacheSynchronously" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="pollingInterval" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/RefreshResourceStatistics" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="isBlocking" direction="IN">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/Pause" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="timeInMilliSeconds" direction="IN">
        <datatype type="INTEGER"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/cache/getCacheAgeHours" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="cacheResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="cacheAgeHours" direction="OUT">
        <datatype type="DECIMAL" maxDigits="6" maxFractionalDigits="2"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getDataSourceCacheConfig" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inDataSourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="StatusTablePath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="TrackingTablePath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceCacheConfigCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="inType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="configured">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="cachePolicy">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageDataSourcePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageTargetName">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storagePath">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="storageType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="refreshMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="scheduleMode">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="startTime">
            <datatype type="DATETIME"/>
          </element>
          <element name="fromTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="endTimeInADay">
            <datatype type="INTEGER"/>
          </element>
          <element name="recurringDay">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="interval">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="period">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="count">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="isCluster">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="expirationPeriod">
            <datatype type="INTEGER"/>
          </element>
          <element name="clearRule">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="allOrNothing">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="incremental">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="storageBucketMode">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketCatalog">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketSchema">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketPrefix">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="storageBucketNumBuckets">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="storageDropCreateIdx">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="firstRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="secondRefreshCallback">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/server/getServerAttribute" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="keyValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateResourceCacheEnabled" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="pathType" type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="cacheConfigured" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/*
&#x9;cacheRefreshSynch:
&#x9;&#x9;This procedure is used in lieu of the DV cache policy capability for synchronized cache refresh control.
&#x9;&#x9;Multiple views can be synchronized for caching in a single operation.  The operations can be configured
&#x9;&#x9;&#x9;to be &quot;S&quot; synchronous or &quot;P&quot; parallel.  When parallel is configured, mutliple caches will be 
&#x9;&#x9;&#x9;executed asynchronously.  A &quot;W&quot; wait command can be placed after the parallel grouping to wait
&#x9;&#x9;&#x9;for all parallel caches to complete before proceeding.

&#x9;IMPORTANT NOTE:
&#x9;&#x9;If you enable/disable the cache within CacheRefreshList, you must run this procedure manually once
&#x9;&#x9;to change the cache setting because &quot;updateResourceCacheEnabled&quot; cannot be executed in background.  It must be
&#x9;&#x9;executed by a logged in user.

&#x9;INPUT:
&#x9;&#x9;debug - Y=debug on, N=debug off
&#x9;&#x9;cacheRefreshListPath - The base path where CacheRefreshList is located.  [SELECT * FROM &lt;cacheRefreshListPath&gt;]
&#x9;&#x9;&#x9;The following columns must be exposed by the &quot;cacheRefreshListPath&quot;.  The resource may be a VIEW, PROCEDURE or table TABLE.
&#x9;&#x9;&#x9;It must have these columns in this order.
&#x9;&#x9;&#x9;&#x9;CacheType:&#x9;&#x9;Identifies the type cache refresh methodology to use
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;S=synchronous cache execution
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;P=parallel (asynchronous) cache execution
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;W=wait for parallel to finish
&#x9;&#x9;&#x9;&#x9;Enabled:&#x9;&#x9;Enable/Disable the resource cache
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1=enable the cache before starting
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0=disable the cache before starting.
&#x9;&#x9;&#x9;&#x9;GatherStats:&#x9;Gather resource stats on the cache resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1=true, gather stats
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0=false, do not gather status
&#x9;&#x9;&#x9;&#x9;ResourcePath:&#x9;The full path to the resource to be cached.
&#x9;&#x9;&#x9;&#x9;ResourceType:&#x9;The type of resource [TABLE,PROCEDURE]

&#x9;&#x9;&#x9;Example of what the resource should return:
&#x9;&#x9;&#x9;&#x9;-- The first row sets the column name and type
 &#x9;&#x9;         &#x9;&#x9;  SELECT CAST(null AS CHAR(1)) CacheType, CAST(0 AS BIT) Enabled, CAST(0 AS BIT) GatherStats, CAST(null AS VARCHAR(4000)) ResourcePath, CAST(null AS VARCHAR) ResourceType
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;S&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheProc&apos;, &apos;PROCEDURE&apos;&#x9;&#x9;&#x9;-- Synchronous cache start
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;S&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/customer_cache&apos;, &apos;TABLE&apos;&#x9;&#x9;&#x9;-- Synchronous cache - dependent on previous cache finishing
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;P&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheView1&apos;, &apos;TABLE&apos;&#x9;&#x9;&#x9;-- Parallel cache 1-3
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;P&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheView2&apos;, &apos;TABLE&apos;&#x9;&#x9;&#x9;-- Parallel cache 1-3
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;P&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheView3&apos;, &apos;TABLE&apos;&#x9;&#x9;&#x9;-- Parallel cache 1-3
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;W&apos;, 1, 0, &apos;WAIT&apos;, null&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Wait for parallel cache to finish
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;S&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheView4&apos;, &apos;TABLE&apos;&#x9;&#x9;&#x9;-- Synchronous cache - dependent on previous cache finishing
&#x9;&#x9;&#x9;&#x9;UNION ALL SELECT &apos;S&apos;, 1, 0, &apos;/shared/Common/CacheTools/ResourceCacheExample/testCacheIncremental&apos;, &apos;TABLE&apos;&#x9;&#x9;-- Synchronous incremental cache - dependent on previous cache finishing

&#x9;&#x9;emailRecipients&#x9;&#x9;&#x9;VARCHAR(1000),&#x9;-- One or more email aliases in a comma-separated list.  If null then no emails will be sent.
&#x9;&#x9;cachePause&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- Number of milliseconds to pause in between asynchronous loops to check if cache has completed.
&#x9;&#x9;skipAgeHours &#x9;&#x9;&#x9;DECIMAL(6,2),&#x9;-- Skip the cache based on age in hours.  Typically set to null.
&#x9;&#x9;startAtCacheRow&#x9;&#x9;&#x9;SMALLINT&#x9;&#x9;-- The row number to start from CacheRefreshList.  

&#x9;OUTPUT:
&#x9;&#x9;NONE

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;&#x9;&#x9;&#x9;11/14/2016&#x9;&#x9;Jeremy Akers&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new as pRefreshCache.
&#x9;&#x9;&#x9;&#x9;03/27/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Modified to allow for parallel caching.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Modified to allow enabling/disabling the cache.
&#x9;2019.400&#x9;10/10/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Added into Utilities as cacheRefreshSynch.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server OR TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE cacheRefreshSynch(
&#x9;IN debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- Y=Debug on, N=Debug off
&#x9;IN cacheRefreshListPath&#x9;&#x9;VARCHAR(4000),&#x9;-- The base path where CacheRefreshList is located.  [SELECT 
&#x9;IN emailRecipients&#x9;&#x9;&#x9;VARCHAR(1000),&#x9;-- One or more email aliases in a comma-separated list.  If null then no emails will be sent.
&#x9;IN cachePause&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- Number of milliseconds to pause in between asynchronous loops to check if cache has completed.
&#x9;IN skipAgeHours &#x9;&#x9;&#x9;DECIMAL(6,2),&#x9;-- Skip the cache based on age in hours.  Typically set to null.
&#x9;IN startAtCacheRow&#x9;&#x9;&#x9;SMALLINT&#x9;&#x9;-- The row number to start from CacheRefreshList.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;Typically set to null unless testing and you need to start caching at a particular row within CacheRefreshList_test.
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;cacheRefreshSynch&apos;;
&#x9;DECLARE exceptionMessage&#x9;LONGVARCHAR;
&#x9;DECLARE exceptionTrace&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE serverId&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE myHostname &#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE myPort &#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE subject &#x9;&#x9;&#x9;VARCHAR(1000);
&#x9;DECLARE body &#x9;&#x9;&#x9;&#x9;VARCHAR(50000);
&#x9;DECLARE cacheAgeHours &#x9;&#x9;DECIMAL(6,2);
&#x9;DECLARE crs &#x9;&#x9;&#x9;&#x9;CURSOR (CacheType CHAR(1), Enabled BIT, GatherStats BIT, ResourcePath VARCHAR(4000), ResourceType VARCHAR(255));
&#x9;DECLARE cursBucket&#x9;&#x9;&#x9;CURSOR (bucket VARCHAR(1024));
&#x9;DECLARE cursCount&#x9;&#x9;&#x9;CURSOR (rowcount INTEGER);
&#x9;DECLARE bucket&#x9;&#x9;&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE begintime1&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
&#x9;DECLARE begintime2&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE begintime3&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE beginparallel&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE endtime&#x9;&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE configured&#x9;&#x9;&#x9;SMALLINT;
&#x9;DECLARE enabled&#x9;&#x9;&#x9;&#x9;SMALLINT;
&#x9;DECLARE enableCache&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE rowsAffected&#x9;&#x9;INTEGER;
&#x9;DECLARE queryDuration&#x9;&#x9;VARCHAR;
&#x9;DECLARE sqlStatement_crs&#x9;LONGVARCHAR;
&#x9;DECLARE sqlStatement&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE cacheVect&#x9;&#x9;&#x9;VECTOR(ROW(
&#x9;&#x9;&#x9;rownum INTEGER,
&#x9;&#x9;&#x9;CacheType CHAR(1), 
&#x9;&#x9;&#x9;Enabled BIT, 
&#x9;&#x9;&#x9;ResourcePath VARCHAR(4000), 
&#x9;&#x9;&#x9;ResourceType VARCHAR(255), 
&#x9;&#x9;&#x9;CacheStarted TIMESTAMP, 
&#x9;&#x9;&#x9;CacheCompleted TIMESTAMP, 
&#x9;&#x9;&#x9;CacheMessage VARCHAR(1000),
&#x9;&#x9;&#x9;StatsStarted TIMESTAMP, 
&#x9;&#x9;&#x9;StatsCompleted TIMESTAMP,
&#x9;&#x9;&#x9;Completed BIT
&#x9;&#x9;)) DEFAULT VECTOR[];
&#x9;DECLARE cacheVectSize&#x9;&#x9;INTEGER;
&#x9;DECLARE cacheStatus&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE cacheMessage&#x9;&#x9;VARCHAR(1000);
&#x9;DECLARE i, j, k&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE cursStatus&#x9;&#x9;&#x9;CURSOR (status VARCHAR, message VARCHAR(1000));
&#x9;DECLARE cacheDSStoragePath&#x9;LONGVARCHAR;
&#x9;DECLARE&#x9;cacheStatusPath&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE cacheTrackingPath&#x9;LONGVARCHAR;
&#x9;DECLARE cacheFinished&#x9;&#x9;BOOLEAN;
&#x9;DECLARE rownum&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numCachedResources&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE numWaitResources&#x9;INTEGER DEFAULT 0;
&#x9;DECLARe numParallel&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;SMALLINT;
&#x9;DECLARE createResponse&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;XML;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/server/getServerAttribute(&apos;/server/config/info/serverId&apos;, serverId);
&#x9;CALL /lib/util/GetProperty(&apos;SERVER_HOSTNAME&apos;, myHostname);
&#x9;CALL /lib/util/GetProperty(&apos;SERVER_WEB_PORT&apos;, myPort);
&#x9;IF (serverId IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The &quot;serverId&quot; is NULL.&apos;;
&#x9;END IF;
&#x9;IF (myHostname IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The SERVER_HOSTNAME &quot;myHostname&quot; is NULL.&apos;;
&#x9;END IF;
&#x9;IF (myPort IS NULL) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The SERVER_WEB_PORT &quot;myPort&quot; is NULL.&apos;;
&#x9;END IF;

&#x9;-- Setup the cursor
&#x9;SET sqlStatement_crs = &apos;SELECT * FROM &apos;||cacheRefreshListPath;

&#x9;/*********************************
&#x9; * Enable/Disable Cache
&#x9; ********************************/
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
  &#x9;&#x9;CALL PRINT( moduleName||&apos; : &apos;||begintime1||&apos;  serverId=[&apos;||serverId||&apos;]  myHostname=[&apos;||myHostname||&apos;]  myPort=[&apos;||myPort||&apos;]  Starting enable/disable of cache using cache refresh list:  &apos;||sqlStatement_crs);
&#x9;END IF;
&#x9;-- This section looks at the &quot;Enabled&quot; flag from CacheRefreshList or CacheRefreshList_test to determine if a cache should be enabled or disabled.
&#x9;--&#x9;When a cache is disabled, the query simply passes through the view instead of retrieving data from the view cache.
&#x9;--&#x9;The entire cache refresh list must be processed in it entirety for enable/disable prior to the actual refresh processing taking place.
&#x9;--&#x9;The enable/disable is executed within a &quot;BEGIN INDEPENDENT TRANSACTION&quot; so that the most current DV metadata is affected.
&#x9;OPEN crs FOR sqlStatement_crs;
&#x9;FOR r AS crs DO
&#x9;&#x9;IF (r.ResourcePath IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET rownum = rownum + 1;
&#x9;&#x9;&#x9;IF (r.CacheType &lt;&gt; &apos;W&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- In this section perform the enable/disable of the cache resource
&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the current cache status and datasource storage path for this resource
&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT configured, enabled, storageDataSourcePath FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceCacheConfigCursor(r.ResourcePath, r.ResourceType) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET configured = c.configured;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET enabled = c.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheDSStoragePath = c.storageDataSourcePath;
&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;-- If this resource is not configured for caching then throw an exception.  The view is in the cache refrest list but not configured presents a problem.
&#x9;&#x9;&#x9;&#x9;&#x9;IF (configured = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The resource attempting to be cached is not configured.   resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- The cache is declared as 0/off/disabled in the refresh list and it is currently 1/on/enabled so turn it off and iterate the loop
&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.Enabled = 0 and enabled = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET enableCache = &apos;false&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateResourceCacheEnabled(r.ResourcePath, r.ResourceType, enableCache, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Cache is now disabled.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- The cache is declared as 0/off/disabled in the refresh list and it is currently 0/off/disabled so just iterate the loop
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (r.Enabled = 0 and enabled = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET enableCache = &apos;false&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Cache currently disabled.  resource=[&apos;||r.ResourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- The cache is declared as 1/on/enabled in the refresh list and it is currently 0/off/disabled so turn it on and proceed with caching
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (r.Enabled = 1 and enabled = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET enableCache = &apos;true&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateResourceCacheEnabled(r.ResourcePath, r.ResourceType, enableCache, success, createResponse, faultResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Cache is now enabled.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;-- The cache is declared as 1/on/enabled in the refresh list and it is currently 1/on/enabled so just iterate the loop
&#x9;&#x9;&#x9;&#x9;&#x9;ELSEIF (r.Enabled = 1 and enabled = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET enableCache = &apos;false&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Cache currently enabled.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;-- In this section, force any cache_status.status=I to F so that the parallel cache loop does not run forever.
&#x9;&#x9;&#x9;&#x9;--&#x9;This is a precautionary task.
&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the cache_status path
&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheDSStoragePath IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getDataSourceCacheConfig(cacheDSStoragePath, cacheStatusPath, cacheTrackingPath);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the cache status
&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatusPath IS NOT NULL AND myHostname IS NOT NULL AND myPort IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the cache status.   There can be multiple status rows per cache table.  A=active, I=cache in process, F=failed, D=deleting.  Only get I,A,F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT status, message FROM &apos;||cacheStatusPath||&apos; WHERE status in (&apos;&apos;I&apos;&apos;,&apos;&apos;A&apos;&apos;,&apos;&apos;F&apos;&apos;) AND serverid like &apos;&apos;&apos;||serverId||&apos;%&apos;&apos; AND resourceid = &apos;&apos;&apos;||r.ResourcePath||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursStatus FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine the status based on precedence.  I before A and A before F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;C_LOOP:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS cursStatus DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;I&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave C_LOOP;&#x9;-- I takes precedence over A AND F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;F&apos; THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus IS NULL) THEN -- A takes precedence over F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = c.message;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;A&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- If the cache_status.status = I then force it to an F for a failed cache_status entry.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus IS NOT NULL AND cacheStatus = &apos;I&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Update the cache status in the cache_status tablek and set to F. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;UPDATE &apos;||cacheStatusPath||&apos; SET status = &apos;&apos;F&apos;&apos;, message = &apos;&apos;Force FAIL by &apos;||moduleName||&apos;.  Cannot start cache while it is in progress.&apos;&apos; WHERE serverid like &apos;&apos;&apos;||serverId||&apos;%&apos;&apos; and resourceid = &apos;&apos;&apos;||r.ResourcePath||&apos;&apos;&apos; AND status = &apos;&apos;I&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;   Modified cache_status row from I to F.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;&#x9;END;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;-- Do nothing since this is a WAIT row.
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Wait on parallel.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END FOR;

&#x9;/*********************************
&#x9; * Begin Refresh Cache
&#x9; ********************************/
&#x9;SET rownum = 0;
&#x9;SET i = 0;
&#x9;SET begintime1 = CURRENT_TIMESTAMP;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
 &#x9;&#x9;CALL PRINT(CHR(10) || moduleName||&apos; : &apos;||begintime1||&apos;  Starting refresh of cache using cache refresh list:  &apos;||sqlStatement_crs);
&#x9;END IF;
&#x9;OPEN crs FOR sqlStatement_crs;
&#x9;L_loop:
&#x9;FOR r AS crs DO
&#x9;&#x9;IF (r.ResourcePath IS NOT NULL) THEN
&#x9;&#x9;&#x9;-- Initialize variables
&#x9;&#x9;&#x9;SET begintime2 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;SET rownum = rownum + 1;
&#x9;&#x9;&#x9;SET rowsAffected = 0;

&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION

&#x9;&#x9;&#x9;IF (r.CacheType = &apos;P&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (beginparallel IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET beginparallel = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET numParallel = numParallel + 1;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;IF (r.CacheType &lt;&gt; &apos;W&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET cacheDSStoragePath = null;
&#x9;&#x9;&#x9;&#x9;SET cacheStatusPath = null;
&#x9;&#x9;&#x9;&#x9;SET configured = 0;
&#x9;&#x9;&#x9;&#x9;SET enabled = 0;

&#x9;&#x9;&#x9;&#x9;-- Get the current cache status and datasource storage path for this resource
&#x9;&#x9;&#x9;&#x9;FOR c AS SELECT configured, enabled, storageDataSourcePath FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceCacheConfigCursor(r.ResourcePath, r.ResourceType) DO
&#x9;&#x9;&#x9;&#x9;&#x9;SET configured = c.configured;
&#x9;&#x9;&#x9;&#x9;&#x9;SET enabled = c.enabled;
&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheDSStoragePath = c.storageDataSourcePath;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;-- If this resource is not configured for caching then throw an exception
&#x9;&#x9;&#x9;&#x9;IF (configured = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The resource attempting to be cached is not configured.   resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- The cache is declared as 0/off/disabled in the refresh list and it is currently 0/off/disabled then iterate the loop
&#x9;&#x9;&#x9;&#x9;IF (r.Enabled = 0 AND enabled = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  !!! Skipping cache refresh.  Cache disabled.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;) || CHR(10));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ITERATE L_loop;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (r.Enabled = 0 AND enabled = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The resource attempting to be cached supposed to be disabled and it is not.   resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (skipAgeHours IS NOT NULL AND skipAgeHours &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/cache/getCacheAgeHours(r.ResourcePath, cacheAgeHours);
&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheAgeHours IS NOT NULL AND cacheAgeHours &lt; skipAgeHours) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  !!! Skipping cache refresh.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  !!! Cache age of &apos;||cacheAgeHours||&apos; is less than skipAgeHours parameter of &apos;||skipAgeHours || CHR(10));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ITERATE L_loop;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Determine if a row should be skipped or not
&#x9;&#x9;&#x9;&#x9;IF (startAtCacheRow IS NOT NULL AND startAtCacheRow &gt; 0 AND rownum &lt; startAtCacheRow) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  !!! Skipping cache refresh because rownum=[&apos;||rownum||&apos;] &lt; startAtCacheRow=[&apos;||startAtCacheRow||&apos;].  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;) || CHR(10));
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ITERATE L_loop;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Get the cache_status path
&#x9;&#x9;&#x9;&#x9;IF (cacheDSStoragePath IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getDataSourceCacheConfig(cacheDSStoragePath, cacheStatusPath, cacheTrackingPath);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (cacheStatusPath IS NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The &quot;cacheStatusPath&quot; is null for resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Begin the cache resource refresh for the current row

&#x9;&#x9;&#x9;-- Cache this row in parallel (asynchronous)
&#x9;&#x9;&#x9;IF (r.CacheType = &apos;P&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;SET cacheVect = EXTEND(cacheVect, 1);
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].rownum = rownum;
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].CacheType = r.CacheType;
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].ResourcePath = r.ResourcePath;
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].ResourceType = r.ResourceType;
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].CacheStarted = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].Completed = 0;

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Starting parallel cache refresh.  begin=[&apos;||CAST(cacheVect[i].CacheStarted AS VARCHAR)||&apos;]  resource=[&apos;||cacheVect[i].ResourcePath||&apos;]  type=&apos;||NVL(cacheVect[i].ResourceType,&apos;null&apos;) || CHR(10));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Start the cache asynchronously
&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/RefreshResourceCache(r.ResourcePath, r.ResourceType);

&#x9;&#x9;&#x9;-- Beging checking parallel status when CacheType=W
&#x9;&#x9;&#x9;ELSEIF (r.CacheType = &apos;W&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET begintime3 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT( moduleName||&apos; : row=&apos;||rownum||&apos;  Begin &quot;WAIT&quot; for parallel cache on [&apos;||numParallel||&apos;] resources.  begin=[&apos;||CAST(begintime3 AS VARCHAR)||&apos;]  resource=[&apos;||r.ResourcePath||&apos;]&apos; || CHR(10));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;SET cacheVectSize = CARDINALITY(cacheVect);
&#x9;&#x9;&#x9;&#x9;IF (cacheVectSize &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheFinished = false;
&#x9;&#x9;&#x9;&#x9;&#x9;SET j = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Keep looping until all parallel/asynchronous cache refreshes have been completed.
&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (NOT cacheFinished) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET j = j + 1; -- number of iterations through outer loop
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= cacheVectSize) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheVect[i].Completed = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the cache status.   There can be multiple status rows per cache table.  A=active, I=cache in process, F=failed, D=deleting.  Only get I,A,F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT status, message FROM &apos;||cacheStatusPath||&apos; WHERE status in (&apos;&apos;I&apos;&apos;,&apos;&apos;A&apos;&apos;,&apos;&apos;F&apos;&apos;) AND serverid like &apos;&apos;&apos;||serverId||&apos;%&apos;&apos; AND resourceid = &apos;&apos;&apos;||cacheVect[i].ResourcePath||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT( moduleName||&apos; : sqlStatement=[&apos;||sqlStatement || &apos;]&apos; || CHR(10));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursStatus FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Determine the status based on precedence.  I before A and A before F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;C_LOOP:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS cursStatus DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CASE 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;I&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;leave C_LOOP;&#x9;-- I takes precedence over A AND F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;F&apos; THEN 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus IS NULL) THEN -- A takes precedence over F
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = c.message;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHEN c.status = &apos;A&apos; THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheStatus = c.status;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheMessage = null;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This condition is unlikely but it is better safe than sorry.  This would mean there is no cache_status row for this resource after looping for 5 times.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus IS NULL AND j &gt; 5) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;No &quot;cache_status&quot; row was found for resource=[&apos;||cacheVect[i].ResourcePath||&apos;]  type=&apos;||NVL(cacheVect[i].ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus IS NOT NULL AND cacheStatus &lt;&gt; &apos;I&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Cache has completed but it has Failed [status=F] with no other Active [status=A] records found
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus = &apos;F&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The cache has failed with message=[&apos;||NVL(cacheMessage,&apos;null&apos;)||&apos;] for resource=[&apos;||cacheVect[i].ResourcePath||&apos;]  type=&apos;||NVL(cacheVect[i].ResourceType,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Cache has completed and it is Active [status=A]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheStatus = &apos;A&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].CacheCompleted = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Successfully refreshed cache.  duration=[&apos;||CAST(cacheVect[i].CacheCompleted - cacheVect[i].CacheStarted AS VARCHAR)||&apos;]  resource=[&apos;||cacheVect[i].ResourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Gather statistics on resource
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.GatherStats IS NOT NULL AND r.GatherStats = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheVect[i].ResourceType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].StatsStarted = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Starting statistics refresh.  resource=[&apos;||cacheVect[i].ResourcePath||&apos;]  type=&apos;||NVL(cacheVect[i].ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/RefreshResourceStatistics(cacheVect[i].ResourcePath, cacheVect[i].ResourceType, true);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].StatsCompleted = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Successfully refreshed statistics.  duration=[&apos;||CAST(cacheVect[i].StatsCompleted - cacheVect[i].StatsStarted AS VARCHAR)||&apos;]  resource=[&apos;||cacheVect[i].ResourcePath||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Skipping statistics for non-table.  ResourceType=&apos;||NVL(cacheVect[i].ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Skipping resource statistics. [turned off]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the number of rows cached
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET begintime3 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT bucket FROM &apos;||cacheStatusPath||&apos; WHERE serverid like &apos;&apos;&apos;||serverId||&apos;%&apos;&apos; and resourceid = &apos;&apos;&apos;||cacheVect[i].ResourcePath||&apos;&apos;&apos; AND status = &apos;&apos;A&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursBucket FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR b AS cursBucket DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET bucket = b.bucket;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Use the bucket to query the actual cache table
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheDSStoragePath IS NOT NULL AND bucket IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT COUNT(*) cnt FROM &apos;||REPLACE(cacheDSStoragePath||&apos;/&apos;||bucket, &apos;//&apos;, &apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursCount FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FETCH cursCount INTO rowsAffected;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CLOSE cursCount;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET queryDuration = CAST(endtime - begintime3 AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Successfully retrieved cache num rows.  queryDuration=[&apos;||queryDuration||&apos;]  sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||cacheVect[i].rownum||&apos;  Successfully finished.  rowsAffected=[&apos;||rowsAffected||&apos;]  total duration=[&apos;||CAST(endtime - cacheVect[i].CacheStarted AS VARCHAR)||&apos;]  resource=[&apos;||cacheVect[i].ResourcePath||&apos;]&apos;||CHR(10));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Mark this row as completed
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheVect[i].Completed = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Increment the number of resources cached
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET numCachedResources = numCachedResources + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Check the Completed status
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheFinished = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHILE (i &lt;= cacheVectSize) DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (cacheVect[i].Completed = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET cacheFinished = false;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT cacheFinished) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PAUSE(cachePause);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Print out the WAIT duration
&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Completed &quot;WAIT&quot; for parallel cache on [&apos;||numParallel||&apos;] resources.  duration=[&apos;||CAST(endtime - beginparallel AS VARCHAR)||&apos;]  end=[&apos;||CAST(endtime AS VARCHAR)||&apos;]  resource=[&apos;||NVL(r.ResourcePath,&apos;null&apos;)||&apos;]&apos; || CHR(10));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Re-iniitalize vector and counter for next group of parallel.
&#x9;&#x9;&#x9;&#x9;SET cacheVect = VECTOR[];
&#x9;&#x9;&#x9;&#x9;SET i = 0;
&#x9;&#x9;&#x9;&#x9;SET beginparallel = null;
&#x9;&#x9;&#x9;&#x9;SET numParallel = 0;
&#x9;&#x9;&#x9;&#x9;SET numWaitResources = numWaitResources + 1;

&#x9;&#x9;&#x9;-- Cache this row as synchronous.  Wait for it complete before proceeding.
&#x9;&#x9;&#x9;ELSEIF (r.CacheType = &apos;S&apos;) THEN
&#x9;&#x9;&#x9;&#x9;-- Cache synchronous
&#x9;&#x9;&#x9;&#x9;SET begintime3 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Starting cache refresh.  begin=[&apos;||CAST(begintime3 AS VARCHAR)||&apos;]  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/RefreshResourceCacheSynchronously(r.ResourcePath, r.ResourceType, 5000);
&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Successfully refreshed cache.  duration=[&apos;||CAST(endtime - begintime3 AS VARCHAR)||&apos;]  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Gather statistics on resource
&#x9;&#x9;&#x9;&#x9;IF (r.GatherStats IS NOT NULL AND r.GatherStats = 1) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (r.ResourceType = &apos;TABLE&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET begintime3 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Starting statistics refresh.  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /lib/resource/RefreshResourceStatistics(r.ResourcePath, r.ResourceType, true);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Successfully refreshed statistics.  duration=[&apos;||CAST(endtime - begintime3 AS VARCHAR)||&apos;]  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Skipping statistics for non-table.  ResourceType=&apos;||NVL(r.ResourceType,&apos;null&apos;));
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Skipping resource statistics. [turned off]&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Get the number of rows cached
&#x9;&#x9;&#x9;&#x9;SET begintime3 = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT bucket FROM &apos;||cacheStatusPath||&apos; WHERE serverid like &apos;&apos;&apos;||serverId||&apos;%&apos;&apos; and resourceid = &apos;&apos;&apos;||r.ResourcePath||&apos;&apos;&apos; AND status = &apos;&apos;A&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;OPEN cursBucket FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;FOR b AS cursBucket DO
&#x9;&#x9;&#x9;&#x9;&#x9;SET bucket = b.bucket;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;-- Use the bucket to query the actual cache table
&#x9;&#x9;&#x9;&#x9;IF (cacheDSStoragePath IS NOT NULL AND bucket IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT COUNT(*) cnt FROM &apos;||REPLACE(cacheDSStoragePath||&apos;/&apos;||bucket, &apos;//&apos;, &apos;/&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;OPEN cursCount FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;FETCH cursCount INTO rowsAffected;
&#x9;&#x9;&#x9;&#x9;&#x9;CLOSE cursCount;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;SET queryDuration = CAST(endtime - begintime3 AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Successfully retrieved cache num rows.  queryDuration=[&apos;||queryDuration||&apos;]  sqlStatement=[&apos;||sqlStatement||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Print out a final completed row
&#x9;&#x9;&#x9;&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : row=&apos;||rownum||&apos;  Successfully finished.  rowsAffected=[&apos;||rowsAffected||&apos;]  total duration=[&apos;||CAST(endtime - begintime2 AS VARCHAR)||&apos;]  resource=[&apos;||r.ResourcePath||&apos;]  type=&apos;||NVL(r.ResourceType,&apos;null&apos;)||CHR(10));
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Increment the number of resources cached
&#x9;&#x9;&#x9;&#x9;SET numCachedResources = numCachedResources + 1;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;-- Invalid CacheType
&#x9;&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The CacheType=[&apos;||NVL(r.CacheType,&apos;null&apos;)||&apos;] is invalid for &apos;||sqlStatement_crs;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;&#x9;END;
&#x9;&#x9;END IF;
&#x9;END FOR;

&#x9;SET endtime = CURRENT_TIMESTAMP;
&#x9;SET subject = &apos;DV_CACHE_REFRESH_SYNCH: Completed Refreshing Caches with duration=[&apos;||CAST(endtime - begintime1 AS VARCHAR)||&apos;] on: &apos;||myHostname||&apos;:&apos;||myPort;
&#x9;SET body =    &apos;DV_CACHE_REFRESH_SYNCH: Completed Refreshing Caches.  total records=[&apos;||rownum||&apos;]  total wait=[&apos;||numWaitResources||&apos;]  total cached=[&apos;||numCachedResources||&apos;]  total overall duration=[&apos;||CAST(endtime - begintime1 AS VARCHAR)||&apos;]&apos;;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : SEND EMAIL: recipient=&apos;||NVL(emailRecipients,&apos;null&apos;)||&apos;  &apos;||body);
&#x9;END IF;
&#x9;-- Send an email
&#x9;IF (emailRecipients IS NOT NULL) THEN
&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;CALL /lib/util/SendEMail(NULL,NULL,emailRecipients,NULL,NULL,subject,&apos;TEXT_PLAIN&apos;,body);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos; : SendEMail exception: &apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),1,63000));
&#x9;&#x9;END;
&#x9;END IF;

EXCEPTION
&#x9;ELSE
&#x9;&#x9;SET exceptionMessage = CURRENT_EXCEPTION.MESSAGE;
&#x9;&#x9;SET exceptionTrace = CURRENT_EXCEPTION.TRACE;
&#x9;&#x9;SET subject = &apos;DV_CACHE_REFRESH_SYNCH  EXCEPTION: &apos;||moduleName||&apos;() on &apos;||myHostname||&apos;:&apos;||myPort;
&#x9;&#x9;SET body =    &apos;DV_CACHE_REFRESH_SYNCH  EXCEPTION: &apos;||myHostname||&apos;:&apos;||myPort|| CHR(10) ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;Message: &apos;||COALESCE(exceptionMessage,&apos;&apos;)|| CHR(10) ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;Stack Trace: &apos;||COALESCE(exceptionTrace,&apos;&apos;);
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(&apos;DV_CACHE_REFRESH_SYNCH  EXCEPTION: SEND EMAIL: recipient=&apos;||NVL(emailRecipients,&apos;null&apos;)||&apos;  &apos;||body,1,63000));
&#x9;&#x9;&#x9;CALL PAUSE(500);
&#x9;&#x9;END IF;
&#x9;&#x9;-- Send an email
&#x9;&#x9;IF (emailRecipients IS NOT NULL) THEN
&#x9;&#x9;&#x9;BEGIN
&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail(NULL,NULL,emailRecipients,NULL,NULL,subject,&apos;TEXT_PLAIN&apos;,body);
&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(moduleName||&apos; : SendEMail exception: &apos;||CAST(CURRENT_EXCEPTION.TRACE AS LONGVARCHAR),1,63000));
&#x9;&#x9;&#x9;END;
&#x9;&#x9;END IF;

&#x9;&#x9;RAISE ex VALUE body;
END</attribute>
  <attribute name="creationDate" type="LONG">1526333752945</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/377</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/542</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/256</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/574</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">17/476</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/595</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/603</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/204</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/189</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/319</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/446</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">17/472</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/442</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/339</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">18/451</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/330</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/520</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/196</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/367</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/498</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/331</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">19/437</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">17/429</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/506</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/533</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/161</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/625</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/280</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/568</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/525</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">13/538</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/267</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/211</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/393</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/616</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/547</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/617</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>Pause</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1526333752945</attribute>
</metadata>