<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="extractBiDelimitedText" path="/shared/Delta_DV/_scripts/Utilities/string/extractBiDelimitedText" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[extractBiDelimitedText:
&#x9;Extract bi-delimited text refers to the ability to locate text based on a search term where the search term
&#x9;encloses the sought after text in a beginning and ending delimiter thus bi-delimited.  Where this can be useful
&#x9;is when you have to throw an exception and you want to embed both the custom error code and error message in the 
&#x9;exception:   raise ex VALUE &apos;Custom exception: ERROR_CODE(C1) ERROR_MESSAGE(Error is foo.)&apos;.   This allows you
&#x9;to have a generic error processing routine that can extract specific error codes and values.  Of course this is
&#x9;not limited to that.  You can be very creative in the usage of this routine.
 
&#x9;Input:
&#x9;&#x9;inText - Text to search 
&#x9;&#x9;&#x9;examples:  &#x9;ERROR_CODE(C1), ERROR_CODE((C1)) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE{C2}, ERROR_CODE{{C2}}
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE[C3], ERROR_CODE[[C3]]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE&lt;C4&gt;, ERROR_CODE&lt;&lt;C4&gt;&gt;
&#x9;&#x9;searchTerm - a word with no spaces that represents the keyword search term to locate
&#x9;&#x9;openingDelim - The beginning delimiter which directly follows the searchTerm
&#x9;&#x9;&#x9;Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
&#x9;&#x9;closingDelim - The ending delimiter which directly follows the content
&#x9;&#x9;&#x9;Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
&#x9;&#x9;inOccurrence - the occurrence of the searchTerm to return (default=1).
&#x9;&#x9;&#x9;&#x9;The value of the occurrence input value determines which 
&#x9;&#x9;&#x9;&#x9;  occurrence to return (numbered starting at 1 from left to right. Use negative values to 
&#x9;&#x9;&#x9;&#x9;  number occurrences from right to left.) If a NULL value or zero is passed in for occurrence,
&#x9;&#x9;&#x9;&#x9;  a default of 1 is used.  
&#x9;&#x9;trimText - 0=do not trim result, 1=do trim result text (default=0)
&#x9;&#x9;caseSensitive - 0=no search term case sensitivity, 1=case sensitive search term
&#x9;Output:
&#x9;&#x9;result - the result

&#x9;Exceptions:  INVALID_DELIMITER

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.2&#x9;&#x9;03/01/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;created new for Best Practices 7.0.
&#x9;2017.2&#x9;&#x9;02/15/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.4&#x9;&#x9;&#x9;Modified to remove all external functions including: isEmpty, RegexSplit and RegexPosition.
&#x9;2019.200&#x9;04/08/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inText" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="searchTerm" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="openingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="closingDelim" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOccurrence" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inTrimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inCaseSensitive" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* extractBiDelimitedText:
&#x9;Extract bi-delimited text refers to the ability to locate text based on a search term where the search term
&#x9;encloses the sought after text in a beginning and ending delimiter thus bi-delimited.  Where this can be useful
&#x9;is when you have to throw an exception and you want to embed both the custom error code and error message in the 
&#x9;exception:   raise ex VALUE &apos;Custom exception: ERROR_CODE(C1) ERROR_MESSAGE(Error is foo.)&apos;.   This allows you
&#x9;to have a generic error processing routine that can extract specific error codes and values.  Of course this is
&#x9;not limited to that.  You can be very creative in the usage of this routine.
 
&#x9;Input:
&#x9;&#x9;inText - Text to search 
&#x9;&#x9;&#x9;examples:  &#x9;ERROR_CODE(C1), ERROR_CODE((C1)) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE{C2}, ERROR_CODE{{C2}}
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE[C3], ERROR_CODE[[C3]]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ERROR_CODE&lt;C4&gt;, ERROR_CODE&lt;&lt;C4&gt;&gt;
&#x9;&#x9;searchTerm - a word with no spaces that represents the keyword search term to locate
&#x9;&#x9;openingDelim - The beginning delimiter which directly follows the searchTerm
&#x9;&#x9;&#x9;Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
&#x9;&#x9;closingDelim - The ending delimiter which directly follows the content
&#x9;&#x9;&#x9;Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
&#x9;&#x9;inOccurrence - the occurrence of the searchTerm to return (default=1).
&#x9;&#x9;&#x9;&#x9;The value of the occurrence input value determines which 
&#x9;&#x9;&#x9;&#x9;  occurrence to return (numbered starting at 1 from left to right. Use negative values to 
&#x9;&#x9;&#x9;&#x9;  number occurrences from right to left.) If a NULL value or zero is passed in for occurrence,
&#x9;&#x9;&#x9;&#x9;  a default of 1 is used.  
&#x9;&#x9;inTrimText - 0=do not trim result, 1=do trim result text (default=0)
&#x9;&#x9;inCaseSensitive - 0=no search term case sensitivity, 1=case sensitive search term
&#x9;Output:
&#x9;&#x9;result - the result.  Null if nothing found.

&#x9;Exceptions:  INVALID_DELIMITER

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2013.2&#x9;&#x9;03/01/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;created new for Best Practices 7.0.
&#x9;2017.2&#x9;&#x9;02/15/2017&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.4&#x9;&#x9;&#x9;Modified to remove all external functions including: isEmpty, RegexSplit and RegexPosition.
&#x9;2019.200&#x9;04/08/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE extractBiDelimitedText(
&#x9;IN inText&#x9;&#x9;&#x9; &#x9;LONGVARCHAR,  -- text to parse
&#x9;IN searchTerm&#x9;&#x9;&#x9;VARCHAR, -- word to search for
&#x9;IN openingDelim&#x9;&#x9;&#x9;VARCHAR, --Allowed: Single: &apos;[&apos;, &apos;(&apos;, &apos;{&apos;,  &apos;&lt;&apos;     Doubles: &apos;[[&apos;, &apos;((&apos;, &apos;{{&apos;, &apos;&lt;&lt;&apos;
&#x9;IN closingDelim&#x9;&#x9;&#x9;VARCHAR, --Allowed: Single: &apos;]&apos;, &apos;)&apos;, &apos;}&apos;, &apos;&gt;&apos;      Doubles: &apos;]]&apos;, &apos;))&apos;, &apos;}}&apos;, &apos;&gt;&gt;&apos;
&#x9;IN inOccurrence&#x9;&#x9;&#x9;INTEGER, --The occurrence of the search term
&#x9;IN inTrimText&#x9;&#x9;&#x9;INTEGER, --0 do not trim, 1=do trim
&#x9;IN inCaseSensitive&#x9;&#x9;INTEGER, --0=no, 1=yes case sensitive search term
&#x9;OUT result  &#x9;&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE len&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE ch&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE startPos &#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE endPos&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE tempText&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE delim&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE occurrence&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT inOccurrence;
&#x9;DECLARE trimText&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT inTrimText;
&#x9;DECLARE caseSensitive&#x9;&#x9;&#x9;INTEGER DEFAULT inCaseSensitive;
&#x9;DECLARE validOpeningDelimdList&#x9;VARCHAR DEFAULT &apos;(,{,[,&lt;,/,\,~,!,|,@,#,$,%,^,&amp;,*,_,.,?,+,=,;,:,`,&quot;,&apos;&apos;&apos;;
&#x9;DECLARE validClosingDelimdList&#x9;VARCHAR DEFAULT &apos;),},],&gt;,/,\,~,!,|,@,#,$,%,^,&amp;,*,_,.,?,+,=,;,:,`,&quot;,&apos;&apos;&apos;;
&#x9;DECLARE INVALID_DELIMITER&#x9;&#x9;EXCEPTION;
&#x9;DECLARE searchTermLen&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE trailingSpaceInSearchTerm BOOLEAN DEFAULT false;

&#x9;-- The space character can be a problem if it is used as a delimiter, because the
&#x9;-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected consequences with the LENGTH() function.
&#x9;-- To work around this, we always append a character to the parameter used in LENGTH().
&#x9;SET searchTermLen = length(searchTerm||&apos;*&apos;)-1;
&#x9;IF (SUBSTRING(searchTerm, searchTermLen, 1) = &apos; &apos;) THEN
&#x9;&#x9;SET trailingSpaceInSearchTerm = true;
&#x9;END IF;

&#x9;if (openingDelim is null or length(trim(openingDelim)) = 0 or closingDelim is null or length(trim(closingDelim)) = 0) then
&#x9;&#x9;raise INVALID_DELIMITER value &apos;The opening and/or closing delimiter may not be null or empty.&apos;;
&#x9;end if;
&#x9;if (openingDelim = closingDelim) then
&#x9;&#x9;raise INVALID_DELIMITER value &apos;The opening and closing delimiter may not be the same: &quot;&apos;||openingDelim||&apos;&quot;&apos;;
&#x9;end if;
&#x9;-- Determine if the opening delimiter is valid
&#x9;set i = 1;
&#x9;set len = LENGTH(openingDelim);
&#x9;while (i &lt;= len) do
&#x9;&#x9;set ch = SUBSTRING(openingDelim,i,1);
&#x9;&#x9;if (INSTR(validOpeningDelimdList, ch) = 0) then
&#x9;&#x9;&#x9;raise INVALID_DELIMITER value &apos;The opening delimiter=&quot;&apos;||openingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid opening list: &quot;&apos;||validOpeningDelimdList||&apos;&quot;&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;set i = i + 1;
&#x9;end while;
&#x9;-- Determine if the closing delimiter is valid
&#x9;set i = 1;
&#x9;set len = LENGTH(closingDelim);
&#x9;while (i &lt;= len) do
&#x9;&#x9;set ch = SUBSTRING(closingDelim,i,1);
&#x9;&#x9;if (INSTR(validClosingDelimdList, ch) = 0) then
&#x9;&#x9;&#x9;raise INVALID_DELIMITER value &apos;The closing delimiter=&quot;&apos;||closingDelim||&apos;&quot; contains 1 or more characters that are not members of the valid closing list: &quot;&apos;||validClosingDelimdList||&apos;&quot;&apos;;
&#x9;&#x9;end if;
&#x9;&#x9;set i = i + 1;
&#x9;end while;
&#x9;-- Validate occurrence
&#x9;if (occurrence is null or occurrence = 0) then
&#x9;&#x9;set occurrence = 1;
&#x9;end if;
&#x9;-- Validate trimText
&#x9;if (trimText is null) then
&#x9;&#x9;set trimText = 0;
&#x9;end if;
&#x9;-- Validate caseSensitive
&#x9;if (caseSensitive is null) then
&#x9;&#x9;set caseSensitive = 0;
&#x9;end if;
&#x9;-- Intialize result
&#x9;set result = null;

&#x9;if (caseSensitive = 0) then
&#x9;&#x9;if (trailingSpaceInSearchTerm) then
&#x9;&#x9;&#x9;select {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(UPPER(inText), UPPER(searchTerm), 1, occurrence) into startPos from /services/databases/system/DUAL;
&#x9;&#x9;else
&#x9;&#x9;&#x9;set startPos = INSTR(UPPER(inText), UPPER(searchTerm), 1, occurrence);
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;if (trailingSpaceInSearchTerm) then
&#x9;&#x9;&#x9;select {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(inText, searchTerm, 1, occurrence) into startPos from /services/databases/system/DUAL;
&#x9;&#x9;else
&#x9;&#x9;&#x9;set startPos = INSTR(inText, searchTerm, 1, occurrence);
&#x9;&#x9;end if;
&#x9;end if;
&#x9;--call print(&apos;searchTerm=[&apos;||searchTerm||&apos;] startPos=&apos;||startPos);
&#x9;if (startPos &gt; 0) then

&#x9;&#x9;set tempText = SUBSTRING(inText, startPos+searchTermLen);
&#x9;&#x9;--call print(&apos;startPos=&apos;||startPos||&apos;  tempText=&apos;||emptyStr(tempText));
&#x9;&#x9;set startPos = INSTR(tempText, openingDelim);
&#x9;&#x9;set endPos = INSTR(tempText, closingDelim);
&#x9;&#x9;if (startPos &gt; 0 and endPos &gt; 0) then
&#x9;&#x9;&#x9;set tempText = SUBSTRING(tempText, 1, endPos-1);
&#x9;&#x9;&#x9;--call print(&apos;startPos=&apos;||startPos||&apos;  endPos=&apos;||endPos||&apos;  tempText=&apos;||emptyStr(tempText));
&#x9;&#x9;&#x9;if ( LENGTH(openingDelim)+1 &lt;= LENGTH(tempText)) then
&#x9;&#x9;&#x9;&#x9;set result = SUBSTRING(tempText, LENGTH(openingDelim)+1);
&#x9;&#x9;&#x9;&#x9;if (trimText = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;set result = TRIM(result);
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609896176534</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>