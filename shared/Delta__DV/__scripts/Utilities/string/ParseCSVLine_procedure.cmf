<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="ParseCSVLine" path="/shared/Delta_DV/_scripts/Utilities/string/ParseCSVLine" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[ParseCSVLine:

&#x9;This procedure parses a single line of CSV text and returns it as a cursor of parsed 
    values. Since there&apos;s currently no way to create cursors of variable row width, this 
    proc assumes the input is a single line of CSV data (line breaks in the input will be 
    treated as any other whitespace character) and data will be returned as a single 
    column cursor of values with no indication as to where any line breaks were.


&#x9;Input:
&#x9;&#x9;csvLine - contains a line of CSV text. if the value is NULL, no rows will be
                  returned.
&#x9;&#x9;&#x9;Values: Any text value

        separator - contains the character used to separate each field. defaults to &apos;,&apos; 
                    if NULL or is empty string.
            Values: Any single character (typically &apos;,&apos;).

        qualifier - contains the character used to contain the value of each field (when 
                    the value might contain a separator character as part of the value.)
                    defaults to &apos;&quot;&apos; if NULL or is empty string.
            Values: Any single character that isn&apos;t the sep (typically &apos;&quot;&apos;)


&#x9;Output:
&#x9;&#x9;result - cursor containing the individual values
&#x9;&#x9;&#x9;Values: Any text value


&#x9;Exceptions:  
        System.IllegalArgumentException - thrown when the separator and qualifier inputs
                                          specify the same character.


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.4&#x9;&#x9;11/01/2010&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2012.4&#x9;&#x9;08/17/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Updated to properly support TAB characters as separators.
&#x9;2012.4&#x9;&#x9;08/26/2011&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Updated to deal with outlier use cases of TAB characters as separators.&#x9;
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="csvLine" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="separator" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="qualifier" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="1"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="CSValue">
          <datatype name="VARCHAR" type="STRING" maxLength="32768"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/TextUtils/RegexFind" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/TextUtils/RegexReplace" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Replacement Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
    ParseCSVLine:

&#x9;This procedure parses a single line of CSV text and returns it as a cursor of parsed 
    values. Since there&apos;s currently no way to create cursors of variable row width, this 
    proc assumes the input is a single line of CSV data (line breaks in the input will be 
    treated as any other whitespace character) and data will be returned as a single 
    column cursor of values with no indication as to where any line breaks were.

&#x9;Input:
&#x9;&#x9;csvLine - contains a line of CSV text. if the value is NULL, no rows will be
                  returned.
&#x9;&#x9;&#x9;Values: Any text value

        separator - contains the character used to separate each field. defaults to &apos;,&apos; 
                    if NULL or is empty string.
            Values: Any single character (typically &apos;,&apos;).

        qualifier - contains the character used to contain the value of each field (when 
                    the value might contain a separator character as part of the value.)
                    defaults to &apos;&quot;&apos; if NULL or is empty string.
            Values: Any single character that isn&apos;t the sep (typically &apos;&quot;&apos;)

&#x9;Output:
&#x9;&#x9;result - cursor containing the individual values
&#x9;&#x9;&#x9;Values: Any text value

&#x9;Exceptions:  
        System.IllegalArgumentException - thrown when the separator and qualifier inputs
                                          specify the same character.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.4&#x9;&#x9;11/01/2010&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2012.4&#x9;&#x9;08/17/2011&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Updated to properly support TAB characters as separators.
&#x9;2012.4&#x9;&#x9;08/26/2011&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Updated to deal with outlier use cases of TAB characters as separators.&#x9;
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/ 
PROCEDURE ParseCSVLine(
&#x9;IN csvLine LONGVARCHAR,
    IN separator VARCHAR(1),
    IN qualifier VARCHAR(1),
    OUT result PIPE (
        CSValue VARCHAR(32768)
    )
)
proc:
BEGIN
    --  test inputs
    --
    --DECLARE csvLine System.Text DEFAULT &apos;&quot;a,  &quot;&quot;1&quot;  ,  &quot;b&quot; , c,&quot;&quot;&quot;&quot;, &quot;d&quot;,,, &apos;; -- should result in 6 rows: &apos;a,  &quot;1&apos;, &apos;b&apos;, &apos;c&apos;, &apos;&quot;&apos;, &apos;d&apos;, &apos;&apos;, &apos;&apos;, and &apos;&apos;.
    --DECLARE separator VARCHAR(1) DEFAULT &apos;&apos;;
    --DECLARE qualifier VARCHAR(1) DEFAULT NULL;

    -- constants
    --
    DECLARE DEF_SEP CONSTANT CHAR(1) DEFAULT &apos;,&apos;;
    DECLARE DEF_QUAL CONSTANT CHAR(1) DEFAULT &apos;&quot;&apos;;

    DECLARE ws VARCHAR DEFAULT &apos;\s&apos;; -- how the regular expressions below will look for white space
    DECLARE findWQualRegex VARCHAR;
    DECLARE findWOQualRegex VARCHAR;
    DECLARE findEmptyRegex VARCHAR;
    DECLARE findRegex VARCHAR(1024);
    DECLARE removeSepQualRegex VARCHAR;

    -- temporary variables
    --
    DECLARE csvLineTmp System.Text DEFAULT csvLine;
    DECLARE tmp VARCHAR(32768);

    -- declare variables for the separator and qualifier inputs (providing default values when NULL or empty string.)
    --
    DECLARE sep CHAR(1);
    DECLARE qual CHAR(1) DEFAULT CASE COALESCE(qualifier, DEF_QUAL) WHEN &apos;&apos; THEN DEF_QUAL ELSE COALESCE(qualifier, DEF_QUAL) END;

&#x9;IF (separator = CHR(9)) THEN
&#x9;&#x9;set sep = separator;
        set ws = &apos;[ \n\x0B\f\r]&apos;; -- \s without the \t (tab) character
&#x9;ELSE
&#x9;&#x9;IF (COALESCE(separator, DEF_SEP) = &apos;&apos;) THEN
&#x9;&#x9;&#x9;set sep = DEF_SEP;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set sep = COALESCE(separator, DEF_SEP);
&#x9;&#x9;END IF; 
&#x9;END IF;

    -- the guts of the parsing code. the first three variables are combined to produce the final
    -- regular expression (findRegex) used for searching for CSV tokens. The last regex is used
    -- to remove the separators and qualifiers from the resulting CSV tokens.
    --
    SET findWQualRegex = &apos;\&apos; || sep || &apos;?&apos; || ws ||&apos;*\&apos; || qual || &apos;(([^&apos; || qual || &apos;])|\&apos; || qual || &apos;\&apos; || qual || &apos;)*\&apos; || qual || &apos;&apos; || ws ||&apos;*&apos;;
    SET findWOQualRegex = &apos;\&apos; || sep || &apos;?&apos; || ws ||&apos;*([^&apos; || sep || &apos;]+)&apos; || ws ||&apos;*&apos;;
    SET findEmptyRegex = &apos;\&apos; || sep || ws ||&apos;*|\&apos; || sep || ws ||&apos;*$&apos;;
    SET findRegex = findWQualRegex || &apos;|&apos; || findWOQualRegex || &apos;|&apos; || findEmptyRegex;
    SET removeSepQualRegex = &apos;\A&apos; || ws ||&apos;*\&apos; || sep || &apos;?&apos; || ws ||&apos;*\&apos; || qual || &apos;?(.*?)\&apos; || qual || &apos;?&apos; || ws ||&apos;*\z&apos;;

    IF (csvLine IS NULL) THEN
        LEAVE proc;
    END IF;

    IF (sep = qual) THEN
        RAISE System.IllegalArgumentException VALUE &apos;The separator and qualifier inputs may not be the same character: &apos; || sep;
    END IF;

    -- find the first occurrence of findRegex
    --
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexFind(csvLineTmp, findRegex, 1, tmp);

    -- loop until no more occurrences are found.
    --
    WHILE (tmp IS NOT NULL) DO

        -- trim off what we found so the next RegexFind locates the next occurrence of findRegex. this is
        -- so that subsequent searches for the next occurrence don&apos;t have to keep scanning through tokens
        -- that have already been found (meaning better performance.) the &apos;\Q&apos; and &apos;\E&apos; quote the text so 
        -- any regex special characters are not accidently interpreted.
        --
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexReplace(csvLineTmp, &apos;\Q&apos; || tmp || &apos;\E&apos;, &apos;&apos;, 1, csvLineTmp);

        -- trim off the separators and qualifiers. replace any escaped qualifiers with a single
        -- instance of the qualifier character.
        --
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexReplace (tmp, removeSepQualRegex, &apos;$1&apos;, 1, tmp);
        SET tmp = REPLACE(tmp, qual || qual, qual);

        INSERT INTO result VALUES (tmp);

        -- find the next occurrence of findRegex
        --
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexFind(csvLineTmp, findRegex, 1, tmp);
    END WHILE;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">15/119</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
    <item>
      <key type="STRING">24/85</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>util</item>
        <item>System</item>
      </value>
    </item>
  </attribute>
</metadata>