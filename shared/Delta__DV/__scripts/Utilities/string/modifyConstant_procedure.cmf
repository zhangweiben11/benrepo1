<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="modifyConstant" path="/shared/Delta_DV/_scripts/Utilities/string/modifyConstant" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[modifyConstants:

&#x9;This script is used to modify a Constants procedure and change values at the time of deployment in order to enable automation.
&#x9;This script will work with various constant procedures such as:
&#x9;&#x9;The generate views defaultValues:
&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Constants/defaultValues
&#x9;&#x9;The cache framework constants:
&#x9;&#x9;&#x9;/shared/ASAssets/CacheManagement/CacheFrameworkSample/Oracle_Application/Constants/Constants
&#x9;&#x9;The KPImetrics commonValues:
&#x9;&#x9;&#x9;/shared/ASAssets/KPImetrics/Configuration/commonValues

&#x9;The Constants file is any SQL Script procedure that contains the following formats:
&#x9;&#x9;&#x9;SET varname = value;
&#x9;&#x9;OR
&#x9;&#x9;&#x9;DECLARE PUBLIC varname&#x9;CONSTANT VARCHAR(4096) DEFAULT &apos;value&apos;;  -- Comment

&#x9;This script will search for &quot;SET varname &quot; or &quot;DECLARE PUBLIC varname &quot; in the script text in order to modify the value.  
&#x9;The new value that is passed in is used to modify the old value that occurs between the &apos;=&apos; and &apos;;&apos; or &apos;DEFAULT&apos; and &apos;;&apos;.
&#x9;If the original value has opening and closing single quotes then the new value must also have them.  The script will detect if the old value has the single quotes
&#x9;&#x9;and add them to the new value if the new value does not have them.
&#x9;For example a Constants procedure may have many variables set but we are only interested in setting one of the variables which will be uniquely defined
&#x9;within the context of the procedure.  Example:
&#x9;&#x9;&#x9;SET EnvironmentType&#x9;&#x9;&#x9;&#x9;&#x9;= &apos;DEV&apos;;
&#x9;&#x9;OR
&#x9;&#x9;&#x9;DECLARE PUBLIC EnvironmentType&#x9;CONSTANT VARCHAR(4096) DEFAULT &apos;DEV&apos;;  -- Comment

&#x9;In the above example the objective is to search for the constantsName=EnvironmentType and replace the value with constantsValue=&apos;UAT&apos;
&#x9;Notice that the value contains all necessary surrounding quotes.  The chart below shows how to escape values such as single and double quotes if necessary.

&#x9;The following values that are passed in may be escaped for the values passed in by the variable constantsValue:
&#x9;&#x9;Description&#x9;&#x9;Value&#x9;&#x9;Escaped Value
&#x9;&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&quot; 
&#x9;&#x9;apostrophe &#x9;&#x9;(&apos;) &#x9;&#x9;&apos; 
&#x9;&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;
&#x9;&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&lt; 
&#x9;&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&gt; 

&#x9;INPUT:
&#x9;&#x9;constantsPath &#x9;- Path to the application constants procedure.
&#x9;&#x9;constantsName &#x9;- The constants name of the name/value pair to modify
&#x9;&#x9;constantsValue &#x9;- The constants value of the name/value pair to modify. Values are modified between the = and ;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Values must contain all single quotes around the data values if applicable.

&#x9;OUTPUT:
&#x9;&#x9;none

&#x9;EXCEPTIONS:
&#x9;&#x9;ex - throws an exception if anything goes wrong

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;10/06/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Created new in order to support automated deployment. 
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Added ability to modify DECLARE PUBLIC statements in addition to the existing SET variable_name =  statements.
&#x9;2019.301&#x9;07/26/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified procedure to search for DECLARE PUBLIC or SET variable_name using a normalized script where spaces are reduced to insure locating the text.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="constantsPath" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="4096"/>
    </parameter>
    <parameter name="constantsName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantsValue" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getScriptText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inSubType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="scriptText" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/server/getServerAttribute" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="keyValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/updateSqlScript" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="scripttext" direction="INOUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="success" direction="OUT">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="createResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <datatype name="XML" type="TREE" refId="257"></datatype>
          </schemaDatatype>
        </datatype>
      </element>
      <element name="faultResponse" direction="OUT">
        <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
          <schemaDatatype>
            <reference refId="257"/>
          </schemaDatatype>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/xml/unescapeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* modifyConstants:

&#x9;This script is used to modify a Constants procedure and change values at the time of deployment in order to enable automation.
&#x9;This script will work with various constant procedures such as:
&#x9;&#x9;The generate views defaultValues:
&#x9;&#x9;&#x9;/shared/ASAssets/BestPractices_v81/DataAbstraction_GENERIC_Template/_scripts/Constants/defaultValues
&#x9;&#x9;The cache framework constants:
&#x9;&#x9;&#x9;/shared/ASAssets/CacheManagement/CacheFrameworkSample/Oracle_Application/Constants/Constants
&#x9;&#x9;The KPImetrics commonValues:
&#x9;&#x9;&#x9;/shared/ASAssets/KPImetrics/Configuration/commonValues

&#x9;The Constants file is any SQL Script procedure that contains the following formats:
&#x9;&#x9;&#x9;SET varname = value;
&#x9;&#x9;OR
&#x9;&#x9;&#x9;DECLARE PUBLIC varname&#x9;CONSTANT VARCHAR(4096) DEFAULT &apos;value&apos;;  -- Comment

&#x9;This script will search for &quot;SET varname &quot; or &quot;DECLARE PUBLIC varname &quot; in the script text in order to modify the value.  
&#x9;The new value that is passed in is used to modify the old value that occurs between the &apos;=&apos; and &apos;;&apos; or &apos;DEFAULT&apos; and &apos;;&apos;.
&#x9;If the original value has opening and closing single quotes then the new value must also have them.  The script will detect if the old value has the single quotes
&#x9;&#x9;and add them to the new value if the new value does not have them.
&#x9;For example a Constants procedure may have many variables set but we are only interested in setting one of the variables which will be uniquely defined
&#x9;within the context of the procedure.  Example:
&#x9;&#x9;&#x9;SET EnvironmentType&#x9;&#x9;&#x9;&#x9;&#x9;= &apos;DEV&apos;;
&#x9;&#x9;OR
&#x9;&#x9;&#x9;DECLARE PUBLIC EnvironmentType&#x9;CONSTANT VARCHAR(4096) DEFAULT &apos;DEV&apos;;  -- Comment

&#x9;In the above example the objective is to search for the constantsName=EnvironmentType and replace the value with constantsValue=&apos;UAT&apos;
&#x9;Notice that the value contains all necessary surrounding quotes.  The chart below shows how to escape values such as single and double quotes if necessary.

&#x9;The following values that are passed in may be escaped for the values passed in by the variable constantsValue:
&#x9;&#x9;Description&#x9;&#x9;Value&#x9;&#x9;Escaped Value
&#x9;&#x9;quote &#x9;&#x9;&#x9;(&quot;) &#x9;&#x9;&quot; 
&#x9;&#x9;apostrophe &#x9;&#x9;(&apos;) &#x9;&#x9;&apos; 
&#x9;&#x9;ampersand&#x9;&#x9;(&amp;)&#x9;&#x9;&#x9;&amp;
&#x9;&#x9;less than &#x9;&#x9;(&lt;) &#x9;&#x9;&lt; 
&#x9;&#x9;greater than &#x9;(&gt;) &#x9;&#x9;&gt; 

&#x9;INPUT:
&#x9;&#x9;constantsPath &#x9;- Path to the application constants procedure.
&#x9;&#x9;constantsName &#x9;- The constants name of the name/value pair to modify
&#x9;&#x9;constantsValue &#x9;- The constants value of the name/value pair to modify. Values are modified between the = and ;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  Values must contain all single quotes around the data values if applicable.

&#x9;OUTPUT:
&#x9;&#x9;none

&#x9;EXCEPTIONS:
&#x9;&#x9;ex - throws an exception if anything goes wrong

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;10/06/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Created new in order to support automated deployment. 
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Added ability to modify DECLARE PUBLIC statements in addition to the existing SET variable_name =  statements.
&#x9;2019.301&#x9;07/26/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Modified procedure to search for DECLARE PUBLIC or SET variable_name using a normalized script where spaces are reduced to insure locating the text.
&#x9;2020.200&#x9;03/03/2020&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed a bug where the constantValue=null with no single quotes but the code was putting &apos;null&apos; for the value.  Should be no single quotes unless specified.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/  
PROCEDURE modifyConstant(
&#x9;IN  constantsPath&#x9; &#x9;&#x9;VARCHAR(4096),&#x9;-- Path to the application constants procedure.
&#x9;IN  constantsName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- The constants name of the name/value pair to modify
&#x9;IN  constantsValue&#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- The constants value of the name/value pair to modify. Values are modified between the = and ;
)

BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;modifyConstant&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE scriptText&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE scriptTextMod&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE line&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE lineNormalized&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE lineNum&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE pos, pos1, pos2&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE posBeg, posBegLen&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE posEnd&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE oldValue&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE newValue&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE begLine&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE endLine&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE constantFound&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN DEFAULT FALSE;
&#x9;DECLARE igrnoreTrailingSpaces&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE igrnoreTrailingSpacesAttribute&#x9;VARCHAR DEFAULT &apos;/server/sql/language/ignoreTrailingSpaces&apos;;
&#x9;DECLARE resultAttr&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE success&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;BIT;
&#x9;DECLARE createResponse &#x9;&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE faultResponse&#x9;&#x9;&#x9;&#x9;&#x9;XML;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;

&#x9;-- Make sure the resource exists
&#x9;CALL /lib/resource/ResourceExists(constantsPath, &apos;PROCEDURE&apos;, NULL, resExists);
&#x9;IF (resExists AND constantsName IS NOT NULL AND LENGTH(&apos;|&apos;||constantsName||&apos;|&apos;) &gt; 2 AND constantsValue IS NOT NULL AND LENGTH(&apos;|&apos;||constantsValue||&apos;|&apos;) &gt; 2) THEN
&#x9;&#x9;-- Unescape any of the esaped values in constantsValue
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/&quot;xml&quot;/unescapeXML(constantsValue, newValue);
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL print(moduleName||&apos; : unescapeXML:  newValue=[&apos;||newValue||&apos;]&apos;);
&#x9;&#x9;END IF;
&#x9;&#x9;-- Get the script text
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getScriptText(constantsPath, &apos;PROCEDURE&apos;, NULL, scriptText);

&#x9;&#x9;-- Get the server attribute trailing spaces setting
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/server/getServerAttribute(igrnoreTrailingSpacesAttribute, resultAttr);
&#x9;&#x9;IF (resultAttr IS NULL) THEN
&#x9;&#x9;&#x9;SET igrnoreTrailingSpaces = true;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (LOWER(resultAttr) = &apos;true&apos; OR LOWER(resultAttr) = &apos;false&apos;) THEN
&#x9;&#x9;&#x9;SET igrnoreTrailingSpaces = CAST(resultAttr AS BOOLEAN);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET igrnoreTrailingSpaces = &apos;true&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Extract the script text procedure line by line to process it looking for constants to modify.
&#x9;&#x9;FOR r AS SELECT textExpression line FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(scriptText, CHR(10), 0,0,0,0,0) DO
&#x9;&#x9;&#x9;SET lineNum = lineNum + 1;
&#x9;&#x9;&#x9;SET line = r.line;

&#x9;&#x9;&#x9;-- Normalize the line in order to find the text without excessive white space [tabs, multiple spaces and carriage returns].
&#x9;&#x9;&#x9;SET lineNormalized = UPPER(REPLACE(REPLACE(line, CHR(9), &apos; &apos;), CHR(13), &apos;&apos;));
&#x9;&#x9;&#x9;-- Reduce the number of double spaces to a single space
&#x9;&#x9;&#x9;IF (igrnoreTrailingSpaces) THEN
&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;  &apos;) INTO pos FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;WHILE (pos &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;&#x9;SET lineNormalized = REPLACE(lineNormalized, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;  &apos;) INTO pos FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(lineNormalized, &apos;  &apos;);
&#x9;&#x9;&#x9;&#x9;WHILE (pos &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;&#x9;SET lineNormalized = REPLACE(lineNormalized, &apos;  &apos;, &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = INSTR(lineNormalized, &apos;  &apos;);
&#x9;&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Locate the constantsName within the script text.  Use upper case to avoid the &quot;DECLARE PUBLIC VARIABLE_NAME&quot; being in lower case.
&#x9;&#x9;&#x9;-- FORMAT: DECLARE PUBLIC variable_name&#x9;CONSTANT VARCHAR(4096) DEFAULT &apos;some value here&apos;;  -- Comment
&#x9;&#x9;&#x9;SET pos1 = 0;
&#x9;&#x9;&#x9;IF (INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;IF (igrnoreTrailingSpaces) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)||&apos; &apos;) INTO pos1 FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(lineNormalized, &apos;DECLARE PUBLIC &apos;||UPPER(constantsName)||&apos; &apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Locate the constantsName within the script text.  Use upper case to avoid the &quot;SET variable_name&quot; being in lower case.
&#x9;&#x9;&#x9;-- Format: SET variable_name&#x9;= &apos;x&apos;;
&#x9;&#x9;&#x9;SET pos2 = 0;
&#x9;&#x9;&#x9;IF (INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;IF (igrnoreTrailingSpaces) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)||&apos; &apos;) INTO pos2 FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(lineNormalized, &apos;SET &apos;||UPPER(constantsName)||&apos; &apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;IF (pos1 &gt; 0 OR pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;-- Get the actual position of SET or DECLARE in the original line.
&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(UPPER(line), &apos;DECLARE&apos;);
&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(UPPER(line), &apos;SET&apos;);
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; lineNum=&apos;||lineNum||&apos;  &quot;DECLARE PUBLIC &apos;||constantsName||&apos;&quot; pos1=&apos;||pos1);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; lineNum=&apos;||lineNum||&apos;  &quot;SET &apos;||constantsName||&apos;&quot; pos2=&apos;||pos2);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; original line=[&apos;||line||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- If the &quot;DECLARE PUBLIC variable_name&quot; exists then continue
&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = pos1;
&#x9;&#x9;&#x9;&#x9;&#x9;SET posBeg = INSTR(line, &apos;DEFAULT&apos;, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;SET posBegLen = LENGTH(&apos;DEFAULT&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET posEnd = INSTR(line, &apos;;&apos;, pos);

&#x9;&#x9;&#x9;&#x9;-- ELSE the &quot;SET variable_name&quot; exists then continue
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos = pos2;
&#x9;&#x9;&#x9;&#x9;&#x9;SET posBeg = INSTR(line, &apos;=&apos;, pos);
&#x9;&#x9;&#x9;&#x9;&#x9;SET posBegLen = LENGTH(&apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;SET posEnd = INSTR(line, &apos;;&apos;, pos);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Extract the beginning portion of the line.
&#x9;&#x9;&#x9;&#x9;SET begLine = SUBSTRING(line, 1, posBeg+posBegLen-1);
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; begLine=[&apos;||begLine||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Extract the end portion of the line
&#x9;&#x9;&#x9;&#x9;SET endLine = SUBSTRING(line, posEnd);
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL  print(moduleName||&apos; endLine=[&apos;||endLine||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Extract the old value from the line
&#x9;&#x9;&#x9;&#x9;SET oldValue = TRIM(SUBSTRING(line, posBeg+posBegLen, posEnd-posBeg-posBegLen));
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL  print(moduleName||&apos; oldValue=[&apos;||oldValue||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;-- Check for single quotes and add to newValue if needed
&#x9;&#x9;&#x9;&#x9;IF (LOWER(newValue) &lt;&gt; &apos;null&apos; AND SUBSTRING(oldValue,1,1) = &apos;&apos;&apos;&apos; AND SUBSTRING(oldValue,LENGTH(oldValue),1) = &apos;&apos;&apos;&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;IF (SUBSTRING(newValue,1,1) &lt;&gt; &apos;&apos;&apos;&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add single quotes to the beginning of the newValue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newValue = &apos;&apos;&apos;&apos;||newValue;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (SUBSTRING(newValue,LENGTH(newValue),1) &lt;&gt; &apos;&apos;&apos;&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Add single quotes to the end of the newValue
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET newValue = newValue||&apos;&apos;&apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; newValue=[&apos;||newValue||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;-- Rebuild the line by concatenating the beginning, new value and end script portions together.
&#x9;&#x9;&#x9;&#x9;SET line = begLine||&apos; &apos;||newValue||endLine;
&#x9;&#x9;&#x9;&#x9;SET scriptTextMod = scriptTextMod || line || CHR(10);
&#x9;&#x9;&#x9;&#x9;SET constantFound = TRUE;

&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL print(moduleName||&apos; modified line=[&apos;||line||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET scriptTextMod = scriptTextMod || line || CHR(10);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;&#x9;IF (NOT constantFound) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE &apos;The constant name &quot;&apos;||constantsName||&apos;&quot; could not be found.&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Trim any erroneous white space before and after the script.
&#x9;&#x9;SET scriptTextMod = TRIM(scriptTextMod);

&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;-- Update the original script with the changed value
&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/updateSqlScript(constantsPath, scriptTextMod, success, createResponse, faultResponse);
&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;RAISE;
&#x9;&#x9;END;
&#x9;&#x9;IF (faultResponse IS NOT NULL) THEN
&#x9;&#x9;&#x9;RAISE ex VALUE CAST(faultResponse AS LONGVARCHAR);
&#x9;&#x9;END IF;
&#x9;ELSE
&#x9;&#x9;RAISE ex VALUE &apos;The constants path procedure does not exist.  constantsPath=&apos;||NVL(constantsPath,&apos;null&apos;);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1412609625958</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/111</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/223</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/203</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/177</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/232</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/175</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/176</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/198</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/208</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>