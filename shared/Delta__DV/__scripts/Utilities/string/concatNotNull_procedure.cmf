<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="concatNotNull" path="/shared/Delta_DV/_scripts/Utilities/string/concatNotNull" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[concatNotNull:
&#x9;Concatenate the first string and the second string together according to the mode parameter:
&#x9;&#x9;0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
&#x9;&#x9;1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
&#x9;&#x9;2=return empty string when inputString2 is null.  This is a prefix example.   
&#x9;&#x9;3=return empty string when inputString1 is null.   This is a suffix example.  

&#x9;Input:
&#x9;&#x9;inputString1 - contains any string.  
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;inputString2 - contains any string to be concatened with the first string
&#x9;&#x9;mode - 
&#x9;&#x9;&#x9;0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
&#x9;&#x9;&#x9;&#x9;This emulates the native concatenation.  Any nulls result in a null.
&#x9;&#x9;&#x9;&#x9;inputString1 (part1)&#x9;inputString2 (part2)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ab&apos;
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
&#x9;&#x9;&#x9;&#x9;This provides a use case to concat two strings like the original + a new string and not worry about null values because a non-null is always returned.
&#x9;&#x9;&#x9;&#x9;inputString1 (part1)&#x9;inputString2 (part2)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ab&apos;
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;a&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;2=return empty string when inputString2 is null.  This is a prefix example.   
&#x9;&#x9;&#x9;&#x9;Only return string content when inputString2 (primary) is not null otherwise return a blank.
&#x9;&#x9;&#x9;&#x9;inputString1 (prefix)&#x9;inputString2 (primary)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;prefix_&apos;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;&apos;prefix_primary&apos;
&#x9;&#x9;&#x9;&#x9;&apos;prefix_&apos;&#x9;&#x9;&#x9;&#x9;primary&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;main&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;3=return empty string when inputString1 is null.   This is a suffix example.  
&#x9;&#x9;&#x9;&#x9;Only return string content when inputString1 (primary) is not null otherwise return a blank.
&#x9;&#x9;&#x9;&#x9;inputString1 (primary)&#x9;inputString2 (suffix)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;&apos;_suffix&apos;&#x9;&#x9;&#x9;&#x9;&apos;primary_suffix&apos;
&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;_suffix&apos;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;Output:
&#x9;&#x9;outputString - contains the results of the concatenation
&#x9;Examples:
&#x9;&#x9;1) Concatenate a message where either part of the input message may or may not be null:
&#x9;&#x9;&#x9;set part1 = &apos;Original message. &apos;
&#x9;&#x9;&#x9;set part2 = null
&#x9;&#x9;&#x9;set msg=concatNotNull(part1, part2, 1);
&#x9;&#x9;&#x9;result:  msg=&apos;Original message.&apos;

&#x9;&#x9;&#x9;set part1 = &apos;Original message. &apos;
&#x9;&#x9;&#x9;set part2 = &apos;New part of message.&apos;
&#x9;&#x9;&#x9;set msg=concatNotNull(part1, part2, 1);
&#x9;&#x9;&#x9;result:  msg=&apos;Original message. New part of message.&apos;

&#x9;&#x9;2) Build out a URL path:
&#x9;&#x9;&#x9;set catlog=null;
&#x9;&#x9;&#x9;set schema=&apos;b&apos;;
&#x9;&#x9;&#x9;set table=&apos;c&apos;;
&#x9;&#x9;&#x9;set url=concatNotNull(catlog, &apos;.&apos;, 3)||concatNotNull(schema, &apos;.&apos;, 3)||table;
&#x9;&#x9;&#x9;result:  url=b.c

&#x9;&#x9;3) Build out a CIS PATH:
&#x9;&#x9;&#x9;set catlog=&apos;a&apos;;
&#x9;&#x9;&#x9;set schema=&apos;b&apos;;
&#x9;&#x9;&#x9;set table=&apos;c&apos;;
&#x9;&#x9;&#x9;set url=concatNotNull(catlog, &apos;/&apos;, 3)||concatNotNull(schema, &apos;/&apos;, 3)||table;
&#x9;&#x9;&#x9;result:  url=a/b/c

&#x9;&#x9;4) Concatenate a prefix to a table name where the prefix may or may not be null:
&#x9;&#x9;&#x9;set prefix=&apos;STG_&apos;;
&#x9;&#x9;&#x9;set table=&apos;VIEW1&apos;;
&#x9;&#x9;&#x9;set table=concatNotNull(prefix, table, 2);
&#x9;&#x9;&#x9;result:  table=STG_VIEW1

&#x9;&#x9;&#x9;set prefix=null;
&#x9;&#x9;&#x9;set table=&apos;VIEW1&apos;;
&#x9;&#x9;&#x9;set table=concatNotNull(prefix, table, 2);
&#x9;&#x9;&#x9;result:  table=VIEW1

&#x9;&#x9;5) Concatenate a suffix to a procedure name where the suffix may or may not be null:
&#x9;&#x9;&#x9;set proc=&apos;PROC1&apos;;
&#x9;&#x9;&#x9;set suffix=&apos;_init&apos;;
&#x9;&#x9;&#x9;set proc=concatNotNull(proc, suffix, 3);
&#x9;&#x9;&#x9;result:  proc=PROC1_init

&#x9;&#x9;&#x9;set proc=&apos;PROC1&apos;;
&#x9;&#x9;&#x9;set suffix=&apos;_init&apos;;
&#x9;&#x9;&#x9;set proc=concatNotNull(proc, suffix, 3);
&#x9;&#x9;&#x9;result:  proc=PROC1

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;09/04/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Added new.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inputString1" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inputString2" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="mode" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="outputString" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <attribute name="Script" type="STRING">/* concatNotNull:
&#x9;Concatenate the first string and the second string together according to the mode parameter:
&#x9;&#x9;0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
&#x9;&#x9;1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
&#x9;&#x9;2=return empty string when inputString2 is null.  This is a prefix example.   
&#x9;&#x9;3=return empty string when inputString1 is null.   This is a suffix example.  

&#x9;Input:
&#x9;&#x9;inputString1 - contains any string.  
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;inputString2 - contains any string to be concatened with the first string
&#x9;&#x9;mode - 
&#x9;&#x9;&#x9;0/null=return null string when either inputString1 (part1) or inputString2 (part2) or both is null.  
&#x9;&#x9;&#x9;&#x9;This emulates the native concatenation.  Any nulls result in a null.
&#x9;&#x9;&#x9;&#x9;inputString1 (part1)&#x9;inputString2 (part2)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ab&apos;
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null
&#x9;&#x9;&#x9;1=replace null with blank (&apos;&apos;) in inputString1 (part1) or inputString2 (part2) so that a string is returned no matter what.
&#x9;&#x9;&#x9;&#x9;This provides a use case to concat two strings like the original + a new string and not worry about null values because a non-null is always returned.
&#x9;&#x9;&#x9;&#x9;inputString1 (part1)&#x9;inputString2 (part2)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;ab&apos;
&#x9;&#x9;&#x9;&#x9;&apos;a&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;a&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;b&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;2=return empty string when inputString2 is null.  This is a prefix example.   
&#x9;&#x9;&#x9;&#x9;Only return string content when inputString2 (primary) is not null otherwise return a blank.
&#x9;&#x9;&#x9;&#x9;inputString1 (prefix)&#x9;inputString2 (primary)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;prefix_&apos;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;&apos;prefix_primary&apos;
&#x9;&#x9;&#x9;&#x9;&apos;prefix_&apos;&#x9;&#x9;&#x9;&#x9;primary&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;main&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;3=return empty string when inputString1 is null.   This is a suffix example.  
&#x9;&#x9;&#x9;&#x9;Only return string content when inputString1 (primary) is not null otherwise return a blank.
&#x9;&#x9;&#x9;&#x9;inputString1 (primary)&#x9;inputString2 (suffix)&#x9;result
&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;&apos;_suffix&apos;&#x9;&#x9;&#x9;&#x9;&apos;primary_suffix&apos;
&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;primary&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;_suffix&apos;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;null&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;&apos;
&#x9;Output:
&#x9;&#x9;outputString - contains the results of the concatenation
&#x9;Examples:
&#x9;&#x9;1) Concatenate a message where either part of the input message may or may not be null:
&#x9;&#x9;&#x9;set part1 = &apos;Original message. &apos;
&#x9;&#x9;&#x9;set part2 = null
&#x9;&#x9;&#x9;set msg=concatNotNull(part1, part2, 1);
&#x9;&#x9;&#x9;result:  msg=&apos;Original message.&apos;

&#x9;&#x9;&#x9;set part1 = &apos;Original message. &apos;
&#x9;&#x9;&#x9;set part2 = &apos;New part of message.&apos;
&#x9;&#x9;&#x9;set msg=concatNotNull(part1, part2, 1);
&#x9;&#x9;&#x9;result:  msg=&apos;Original message. New part of message.&apos;

&#x9;&#x9;2) Build out a URL path:
&#x9;&#x9;&#x9;set catlog=null;
&#x9;&#x9;&#x9;set schema=&apos;b&apos;;
&#x9;&#x9;&#x9;set table=&apos;c&apos;;
&#x9;&#x9;&#x9;set url=concatNotNull(catlog, &apos;.&apos;, 3)||concatNotNull(schema, &apos;.&apos;, 3)||table;
&#x9;&#x9;&#x9;result:  url=b.c

&#x9;&#x9;3) Build out a CIS PATH:
&#x9;&#x9;&#x9;set catlog=&apos;a&apos;;
&#x9;&#x9;&#x9;set schema=&apos;b&apos;;
&#x9;&#x9;&#x9;set table=&apos;c&apos;;
&#x9;&#x9;&#x9;set url=concatNotNull(catlog, &apos;/&apos;, 3)||concatNotNull(schema, &apos;/&apos;, 3)||table;
&#x9;&#x9;&#x9;result:  url=a/b/c

&#x9;&#x9;4) Concatenate a prefix to a table name where the prefix may or may not be null:
&#x9;&#x9;&#x9;set prefix=&apos;STG_&apos;;
&#x9;&#x9;&#x9;set table=&apos;VIEW1&apos;;
&#x9;&#x9;&#x9;set table=concatNotNull(prefix, table, 2);
&#x9;&#x9;&#x9;result:  table=STG_VIEW1

&#x9;&#x9;&#x9;set prefix=null;
&#x9;&#x9;&#x9;set table=&apos;VIEW1&apos;;
&#x9;&#x9;&#x9;set table=concatNotNull(prefix, table, 2);
&#x9;&#x9;&#x9;result:  table=VIEW1

&#x9;&#x9;5) Concatenate a suffix to a procedure name where the suffix may or may not be null:
&#x9;&#x9;&#x9;set proc=&apos;PROC1&apos;;
&#x9;&#x9;&#x9;set suffix=&apos;_init&apos;;
&#x9;&#x9;&#x9;set proc=concatNotNull(proc, suffix, 3);
&#x9;&#x9;&#x9;result:  proc=PROC1_init

&#x9;&#x9;&#x9;set proc=&apos;PROC1&apos;;
&#x9;&#x9;&#x9;set suffix=&apos;_init&apos;;
&#x9;&#x9;&#x9;set proc=concatNotNull(proc, suffix, 3);
&#x9;&#x9;&#x9;result:  proc=PROC1

&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2014.4&#x9;&#x9;09/04/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.6&#x9;&#x9;&#x9;Added new.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE concatNotNull(
&#x9;IN  inputString1 &#x9;LONGVARCHAR,
&#x9;IN  inputString2 &#x9;LONGVARCHAR,
&#x9;IN  mode&#x9;&#x9;&#x9;SMALLINT,
&#x9;OUT outputString&#x9;LONGVARCHAR
)
BEGIN
&#x9;IF (mode IS NULL OR (mode IS NOT NULL AND mode = 0)) THEN
&#x9;&#x9;SET outputString = inputString1 || inputString2;
&#x9;END IF;
&#x9;IF (mode IS NOT NULL AND mode = 1) THEN
&#x9;&#x9;IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString1 || inputString2;
&#x9;&#x9;ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString2;
&#x9;&#x9;ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString1;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET outputString = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (mode IS NOT NULL AND mode = 2) THEN
&#x9;&#x9;IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString1 || inputString2;
&#x9;&#x9;ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString2;
&#x9;&#x9;ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
&#x9;&#x9;&#x9;SET outputString = &apos;&apos;;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET outputString = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
&#x9;IF (mode IS NOT NULL AND mode = 3) THEN
&#x9;&#x9;IF (inputString1 IS NOT NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString1 || inputString2;
&#x9;&#x9;ELSEIF (inputString1 IS NULL AND inputString2 IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET outputString = &apos;&apos;;
&#x9;&#x9;ELSEIF (inputString1 IS NOT NULL AND inputString2 IS NULL) THEN
&#x9;&#x9;&#x9;SET outputString = inputString1;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET outputString = &apos;&apos;;
&#x9;&#x9;END IF;
&#x9;END IF;
END
</attribute>
  <attribute name="creationDate" type="LONG">1409837815191</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609896176534</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>