<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="entityExtract" path="/shared/Delta_DV/_scripts/Utilities/string/entityExtract" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[entityExtract:
&#x9;This is a procedure description that describes the purpose of this procedure.
 
&#x9;Input:
&#x9;&#x9;inText - contains any text string.  
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;inDelimiter - Any single delimiting character that separates words in a text string.
&#x9;&#x9;&#x9;Values: &apos; &apos;, &apos;|&apos; or &apos;,&apos; are common separators.
&#x9;&#x9;inNumWords - Number of words to extract  
&#x9;&#x9;&#x9;Values: 0 or Null=extract all words, &gt;0 only extract to the number provided
&#x9;&#x9;random - A numerical bit (1 or 0) that defines whether to return words randomly or in sequence.  
&#x9;&#x9;&#x9; Random may be useful if you want to randomly skip over words to get a random extraction of words.
&#x9;&#x9;&#x9; Sequential will extract words in order of their appearance in the text.
&#x9;&#x9;&#x9;Values: true(1)=random-produce a list randomly from the incoming text
&#x9;&#x9;&#x9;&#x9;false(0)=sequential-produce a list sequentially from the incoming text
&#x9;&#x9;removeSymbols - A numerical bit (1 or 0) that defines whether to remove all symbols before performing the extraction.  
&#x9;&#x9;&#x9;&#x9;The list of symbols are defined in entityConstants.
&#x9;&#x9;&#x9;Values: true(1)=remove symbols and punctuation prior to extraction
&#x9;&#x9;&#x9;&#x9;false(0)=do not remove symbols and punctuation prior to extraction
&#x9;Output:
&#x9;&#x9;entityVector - A vector of varchar(255) keyword entities
&#x9;&#x9;&#x9;Values: Vector of any text value such as {keyword1,keyword2,keyword3}
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Added new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inText" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inDelimiter" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="inNumWords" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="random" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="removeSymbols" direction="IN" nullable="true">
      <datatype name="BIT" type="INTEGER" minValue="0" maxValue="1"/>
    </parameter>
    <parameter name="entityVector" direction="OUT" nullable="true">
      <datatype name="entityVector" type="ARRAY">
        <itemDatatype>
          <datatype name="VARCHAR" type="STRING" maxLength="255"/>
        </itemDatatype>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/entityConstants" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* entityExtract:
&#x9;This is a procedure description that describes the purpose of this procedure.
 
&#x9;Input:
&#x9;&#x9;inText - contains any text string.  
&#x9;&#x9;&#x9;Values: Any text value
&#x9;&#x9;inDelimiter - Any single delimiting character that separates words in a text string.
&#x9;&#x9;&#x9;Values: &apos; &apos;, &apos;|&apos; or &apos;,&apos; are common separators.
&#x9;&#x9;inNumWords - Number of words to extract  
&#x9;&#x9;&#x9;Values: 0 or Null=extract all words, &gt;0 only extract to the number provided
&#x9;&#x9;random - A numerical bit (1 or 0) that defines whether to return words randomly or in sequence.  
&#x9;&#x9;&#x9; Random may be useful if you want to randomly skip over words to get a random extraction of words.
&#x9;&#x9;&#x9; Sequential will extract words in order of their appearance in the text.
&#x9;&#x9;&#x9;Values: true(1)=random-produce a list randomly from the incoming text
&#x9;&#x9;&#x9;&#x9;false(0)=sequential-produce a list sequentially from the incoming text
&#x9;&#x9;removeSymbols - A numerical bit (1 or 0) that defines whether to remove all symbols before performing the extraction.  
&#x9;&#x9;&#x9;&#x9;The list of symbols are defined in entityConstants.
&#x9;&#x9;&#x9;Values: true(1)=remove symbols and punctuation prior to extraction
&#x9;&#x9;&#x9;&#x9;false(0)=do not remove symbols and punctuation prior to extraction
&#x9;Output:
&#x9;&#x9;entityVector - A vector of varchar(255) keyword entities
&#x9;&#x9;&#x9;Values: Vector of any text value such as {keyword1,keyword2,keyword3}
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Added new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE entityExtract(
&#x9;IN inText&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN inDelimiter&#x9;&#x9;CHAR(1),-- &apos; &apos;, &apos;|&apos; or any other single character delimiter
&#x9;IN inNumWords&#x9;&#x9;INTEGER,-- number of words to produce.  If 0 or null then produce all words
&#x9;IN random&#x9;&#x9;&#x9;BIT,&#x9;-- true(1)=random-produce a list randomly from the incoming text
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- false(0)=sequential-produce a list sequentially from the incoming text
&#x9;IN removeSymbols&#x9;BIT,&#x9;-- true(1)=remove symbols and punctuation prior to extraction
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- false(0)=do not remove symbols and punctuation prior to extraction
&#x9;OUT entityVector&#x9;VECTOR(VARCHAR)
)
BEGIN
&#x9;DECLARE inTextTemp&#x9;&#x9;LONGVARCHAR DEFAULT TRIM(inText);
&#x9;DECLARE numWords&#x9;&#x9;INTEGER DEFAULT inNumWords;
&#x9;DECLARE nonEntityVector&#x9;VECTOR(varchar) DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/entityConstants.nonEntityVector;
&#x9;DECLARE symbols1Vector &#x9;VECTOR(varchar)DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/entityConstants.symbols1Vector;
&#x9;DECLARE symbols2Vector &#x9;VECTOR(varchar)DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/entityConstants.symbols2Vector;
&#x9;DECLARE symbols3Vector &#x9;VECTOR(INTEGER)DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/entityConstants.symbols3Vector;
&#x9;DECLARE i,j&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE word&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE len, pos&#x9;&#x9;INTEGER;
&#x9;DECLARE delimiter&#x9;&#x9;CHAR(1) DEFAULT inDelimiter;
&#x9;DECLARE entityFound&#x9;&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE extractWords&#x9;BOOLEAN DEFAULT true;
&#x9;DECLARE randomNum,mod&#x9;INTEGER;

    if (numWords is null) then
&#x9;set numWords = 0; -- extract all words
    end if;
    set len = LENGTH(inTextTemp);
    if (inText is not null and len &gt; 0) then
&#x9;if (delimiter is null) then 
&#x9;&#x9;set delimiter = &apos;|&apos;;
&#x9;end if;
&#x9;--call print(&apos;inTextTemp=&apos;||inTextTemp);
&#x9;-- Remmove the symbols and punctuation
&#x9;if (removeSymbols = 1) then
&#x9;&#x9;set i=1;
&#x9;&#x9;-- remove single character symbols and punctuation like !,@,#,$ and many more.
&#x9;&#x9;WHILE (i &lt;= CARDINALITY(symbols1Vector)) DO
&#x9;&#x9;&#x9;set inTextTemp = REPLACE(inTextTemp, symbols1Vector[i], &apos;&apos;);
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;&#x9;set i=1;
&#x9;&#x9;-- remove multi-character strings like &apos; - &apos; and others
&#x9;&#x9;WHILE (i &lt;= CARDINALITY(symbols2Vector)) DO
&#x9;&#x9;&#x9;set inTextTemp = REPLACE(inTextTemp, symbols2Vector[i], &apos; &apos;);
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;&#x9;set i=1;
&#x9;&#x9;-- remove hidden characters like tabs, backspace, etc.
&#x9;&#x9;WHILE (i &lt;= CARDINALITY(symbols3Vector)) DO
&#x9;&#x9;&#x9;set inTextTemp = REPLACE(inTextTemp, CHR(symbols3Vector[i]), &apos; &apos;);
&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;END WHILE;
&#x9;end if;
&#x9;set i = 1;
&#x9;set entityVector = VECTOR[&apos;&apos;];
&#x9;--call print(&apos;inTextTemp=&apos;||inTextTemp);
&#x9;entityLoop:
&#x9;WHILE (extractWords) DO
&#x9;&#x9;-- find the next word deliminited by delimiter
&#x9;&#x9;set pos = POSITION(delimiter IN inTextTemp);
&#x9;&#x9;IF (pos = 0 and LENGTH(TRIM(inTextTemp)) = 0) THEN -- unless there is no more text left
&#x9;&#x9;&#x9;leave entityLoop;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (pos = 0 and LENGTH(TRIM(inTextTemp)) &gt; 0) THEN -- unless there is no more text left
&#x9;&#x9;&#x9;set pos = LENGTH(TRIM(inTextTemp));
&#x9;&#x9;&#x9;set word = TRIM(SUBSTRING(inTextTemp, 1, pos));
&#x9;&#x9;&#x9;set inTextTemp = &apos;&apos;;
&#x9;&#x9;&#x9;set extractWords = false; -- no more text so finish
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;set word = TRIM(SUBSTRING(inTextTemp, 1, pos-1)); -- Don&apos;t extract the space
&#x9;&#x9;&#x9;set inTextTemp = TRIM(SUBSTRING(inTextTemp, pos+1, LENGTH(inTextTemp)-pos));
&#x9;&#x9;END IF;
&#x9;&#x9;--call print(&apos;word=&apos;||word);

&#x9;&#x9;IF (word IS NOT NULL AND LENGTH(&apos;|&apos;||word||&apos;|&apos;) &gt; 2) THEN
&#x9;&#x9;&#x9;set j = 1;
&#x9;&#x9;&#x9;set entityFound = true;
&#x9;&#x9;&#x9;nonEntityLoop:
&#x9;&#x9;&#x9;WHILE (j &lt;= CARDINALITY(nonEntityVector)) DO
&#x9;&#x9;&#x9;&#x9;if ( TRIM(UPPER(word)) = TRIM(UPPER(nonEntityVector[j])) ) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;set entityFound = false;
&#x9;&#x9;&#x9;&#x9;&#x9;leave nonEntityLoop;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;set j = j + 1;
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;IF (random = 0 and i = numWords) THEN
&#x9;&#x9;&#x9;&#x9;set extractWords = false;
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (entityFound) then
&#x9;&#x9;&#x9;&#x9;--call print(&apos;i=&apos;||i||&apos;  word=&apos;||word);
&#x9;&#x9;&#x9;&#x9;set entityVector[i] = word;
&#x9;&#x9;&#x9;&#x9;set entityVector = extend(entityVector,1);
&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;END IF;
&#x9;END WHILE;
&#x9;set entityVector = truncate(entityVector,1);
    end if;
END
</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="NULL"/>
</metadata>