<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="extractDelimitedText" path="/shared/Delta_DV/_scripts/Utilities/string/extractDelimitedText" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[extractDelimitedText:
&#x9;This is a generic procedure for extracting values from a list using a single or multi-character delimiter.
&#x9;The results are returned as a cursor of objects.  This does not use the expensive REGEX function or VECTORS for
&#x9;parsing the delimited text.  It does not parse character by character.  It uses a more efficient INSTR and SUBSTRING
&#x9;to extract the results.

&#x9;Input:
&#x9;&#x9;inputString&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- A text string containing a list with delimeters to be extracted into a cursor of output.
&#x9;&#x9;delimiter&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- 1 or more characters such as single characters: space , | / or double characters such as ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;or any repeatable combination.
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
&#x9;&#x9;reverseInputText&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse input text, 1=reverse input text before parsing
&#x9;&#x9;reverseOutput&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse output text, 1=reverse output text before returning.
&#x9;&#x9;trimText&#x9;&#x9;&#x9;SMALLINT, &#x9;&#x9;&#x9;-- 0=do not trim, 1=do trim result
&#x9;&#x9;includeDelimiter &#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=exclude delimiter from output, 1=include delimiter in output

&#x9;Output:
&#x9;&#x9;result - A cursor of extracted text.  
&#x9;&#x9;&#x9;If no delimiter was found, then the original input text is returned.
&#x9;&#x9;&#x9;If the delimiter appears at the beginning of the text before any other characters, an empty row is output 
&#x9;&#x9;&#x9;&#x9;and counts as 1 occurrence.  For example:  /a/b/c/d with delimiter=/ and occurrence=2 would result in &apos;a&apos; being returned.

&#x9;Example Usage:
&#x9;&#x9;1. Extract the last object in a DV path: 
&#x9;&#x9;&#x9;inputString=/a1/b2/c3/d4
&#x9;&#x9;&#x9;delimiter=/
&#x9;&#x9;&#x9;occurrence=1
&#x9;&#x9;&#x9;reverseInputText=1
&#x9;&#x9;&#x9;reverseOutput=1
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;d4

&#x9;&#x9;2. Extract a comma-separated list
&#x9;&#x9;&#x9;inputString=a1,b2,c3,d4
&#x9;&#x9;&#x9;delimiter=,
&#x9;&#x9;&#x9;occurrence=0
&#x9;&#x9;&#x9;reverseInputText=0
&#x9;&#x9;&#x9;reverseOutput=0
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;a1
&#x9;&#x9;&#x9;&#x9;&#x9;b2
&#x9;&#x9;&#x9;&#x9;&#x9;c3
&#x9;&#x9;&#x9;&#x9;&#x9;d4

&#x9;&#x9;3. Extract the 4th object [database] in a DV path: 
&#x9;&#x9;&#x9;&#x9;object: 1       2         3  4       5      6
&#x9;&#x9;&#x9;inputString=/services/databases/db/catalog/schema
&#x9;&#x9;&#x9;delimiter=/
&#x9;&#x9;&#x9;occurrence=4
&#x9;&#x9;&#x9;reverseInputText=0
&#x9;&#x9;&#x9;reverseOutput=0
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;db


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2018.100&#x9;02/26/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/08/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inputString" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="delimiter" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="occurrence" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="reverseInputText" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="reverseOutput" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="trimText" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="includeDelimiter" direction="IN" nullable="true">
      <datatype name="SMALLINT" type="INTEGER" minValue="-32768" maxValue="32767"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="object">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/services/databases/system/DUAL" type="TABLE">
    <datatype type="TABLE" refId="256">
      <element name="DUMMY">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/_debug" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* extractDelimitedText:
&#x9;This is a generic procedure for extracting values from a list using a single or multi-character delimiter.
&#x9;The results are returned as a cursor of objects.  This does not use the expensive REGEX function or VECTORS for
&#x9;parsing the delimited text.  It does not parse character by character.  It uses a more efficient INSTR and SUBSTRING
&#x9;to extract the results.

&#x9;Input:
&#x9;&#x9;inputString&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;&#x9;-- A text string containing a list with delimeters to be extracted into a cursor of output.
&#x9;&#x9;delimiter&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- 1 or more characters such as single characters: space , | / or double characters such as ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;or any repeatable combination.
&#x9;&#x9;occurrence&#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
&#x9;&#x9;reverseInputText&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse input text, 1=reverse input text before parsing
&#x9;&#x9;reverseOutput&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse output text, 1=reverse output text before returning.
&#x9;&#x9;trimText&#x9;&#x9;&#x9;SMALLINT, &#x9;&#x9;&#x9;-- 0=do not trim, 1=do trim result
&#x9;&#x9;includeDelimiter &#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=exclude delimiter from output, 1=include delimiter in output

&#x9;Output:
&#x9;&#x9;result - A cursor of extracted text.  
&#x9;&#x9;&#x9;If no delimiter was found, then the original input text is returned.
&#x9;&#x9;&#x9;If the delimiter appears at the beginning of the text before any other characters, an empty row is output 
&#x9;&#x9;&#x9;&#x9;and counts as 1 occurrence.  For example:  /a/b/c/d with delimiter=/ and occurrence=2 would result in &apos;a&apos; being returned.

&#x9;Example Usage:
&#x9;&#x9;1. Extract the last object in a DV path: 
&#x9;&#x9;&#x9;inputString=/a1/b2/c3/d4
&#x9;&#x9;&#x9;delimiter=/
&#x9;&#x9;&#x9;occurrence=1
&#x9;&#x9;&#x9;reverseInputText=1
&#x9;&#x9;&#x9;reverseOutput=1
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;d4

&#x9;&#x9;2. Extract a comma-separated list
&#x9;&#x9;&#x9;inputString=a1,b2,c3,d4
&#x9;&#x9;&#x9;delimiter=,
&#x9;&#x9;&#x9;occurrence=0
&#x9;&#x9;&#x9;reverseInputText=0
&#x9;&#x9;&#x9;reverseOutput=0
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;a1
&#x9;&#x9;&#x9;&#x9;&#x9;b2
&#x9;&#x9;&#x9;&#x9;&#x9;c3
&#x9;&#x9;&#x9;&#x9;&#x9;d4

&#x9;&#x9;3. Extract the 4th object [database] in a DV path: 
&#x9;&#x9;&#x9;&#x9;object: 1       2         3  4       5      6
&#x9;&#x9;&#x9;inputString=/services/databases/db/catalog/schema
&#x9;&#x9;&#x9;delimiter=/
&#x9;&#x9;&#x9;occurrence=4
&#x9;&#x9;&#x9;reverseInputText=0
&#x9;&#x9;&#x9;reverseOutput=0
&#x9;&#x9;&#x9;trimText=1
&#x9;&#x9;&#x9;includeDelimiter=0
&#x9;&#x9;&#x9;result:&#x9;db


&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2018.100&#x9;02/26/2018&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.5&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/08/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Fixed bug where server is set with ignore trailing spaces=true and there is a trailing space in the delimiter.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE extractDelimitedText(
&#x9;IN  inputString&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN  delimiter&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;&#x9;-- 1 or more characters such as single characters:, | / or double characters such as ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;or any repeatable combination.
&#x9;IN&#x9;occurrence &#x9;&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=all occurrences, n&gt;0=the occurrence of delimited text or null if the occurrence requested is not applicable.
&#x9;IN  reverseInputText&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse input text, 1=reverse input text before parsing
&#x9;IN  reverseOutput&#x9;&#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=do not reverse output text, 1=reverse output text before returning.
&#x9;IN  trimText&#x9;&#x9;&#x9;SMALLINT, &#x9;&#x9;&#x9;-- 0=do not trim, 1=do trim result
&#x9;IN&#x9;includeDelimiter &#x9;SMALLINT,&#x9;&#x9;&#x9;-- 0=exclude delimiter from output, 1=include delimiter in output
&#x9;OUT result&#x9;&#x9;&#x9;&#x9;PIPE (object LONGVARCHAR)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;extractDelimitedText&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/&quot;_debug&quot;.debug;
&#x9;DECLARE j&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos1,pos2&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE trailingSpaceInDelim&#x9;BOOLEAN DEFAULT false;
&#x9;DECLARE moreToDo1&#x9;&#x9;&#x9;&#x9;BOOLEAN DEFAULT true;
&#x9;DECLARE object&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE objectList1&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE expression1&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE delimLen&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE start1&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE lastpos1&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE poslen&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE starttime&#x9;&#x9;&#x9;&#x9;TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

&#x9;-- The space character can be a problem if it is used as a delimiter, because the
&#x9;-- Query Engine&apos;s &quot;Ignore Trailing Spaces&quot; setting can cause unexpected consequences with the LENGTH() function.
&#x9;-- To work around this, we always append a character to the parameter used in LENGTH().
&#x9;SET delimLen = length(delimiter||&apos;*&apos;)-1;
&#x9;IF (SUBSTRING(delimiter, delimLen, 1) = &apos; &apos;) THEN
&#x9;&#x9;SET trailingSpaceInDelim = true;
&#x9;END IF;

&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT (moduleName||&apos; INPUT:&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    inputString=[&apos;||SUBSTRING(inputString,1,63900)||&apos;]  inputString Len=[&apos;||CAST(LENGTH(inputString||&apos;*&apos;)-1 AS VARCHAR)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    delimiter=[&apos;||NVL(delimiter,&apos;null&apos;)||&apos;]   delimLen=[&apos;||NVL(CAST(delimLen AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    occurrence=[&apos;||NVL(CAST(occurrence AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    reverseInputText=[&apos;||NVL(CAST(reverseInputText AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    reverseOutput=[&apos;||NVL(CAST(reverseOutput AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    trimText=[&apos;||NVL(CAST(trimText AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;CALL PRINT(moduleName||&apos;    includeDelimiter=[&apos;||NVL(CAST(includeDelimiter AS VARCHAR),&apos;null&apos;)||&apos;]&apos;);
&#x9;END IF;

&#x9;-- Parse value list if applicable
&#x9;IF (inputString IS NOT NULL AND LENGTH(inputString||&apos;*&apos;)-1 &gt; 0 AND delimiter IS NOT NULL AND delimLen &gt; 0) THEN
&#x9;&#x9;-- Extract the object from the input string
&#x9;&#x9;IF (reverseInputText IS NOT NULL AND reverseInputText = 1) THEN
&#x9;&#x9;&#x9;SET objectList1 = REVERSE(inputString);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;SET objectList1 = inputString;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos;    objectList1=[&apos;||SUBSTRING(objectList1,1,63900)||&apos;]  objectList1 Len=[&apos;||CAST(LENGTH(objectList1||&apos;*&apos;)-1 AS VARCHAR)||&apos;]&apos;);
&#x9;&#x9;END IF;
&#x9;&#x9;SET moreToDo1 = true;
&#x9;&#x9;SET start1 = 1;
&#x9;&#x9;SET lastpos1 = 0;
&#x9;&#x9;SET j = 0;
&#x9;&#x9;WHILE (moreToDo1) DO
&#x9;&#x9;&#x9;SET j = j + 1;
&#x9;&#x9;&#x9;SET object = null;
&#x9;&#x9;&#x9;IF (j = 1) THEN
&#x9;&#x9;&#x9;&#x9;IF (trailingSpaceInDelim) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(objectList1, delimiter, start1) INTO pos1 FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(objectList1, delimiter, start1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = pos1-1;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (poslen &lt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, 1, poslen);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(objectList1)) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET object = objectList1;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo1 = false;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET lastpos1 = pos1;
&#x9;&#x9;&#x9;&#x9;SET start1 = lastpos1+delimLen;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (trailingSpaceInDelim) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT {OPTION IGNORE_TRAILING_SPACES=&quot;FALSE&quot;} INSTR(objectList1, delimiter, start1) INTO pos2 FROM /services/databases/system/DUAL;
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(objectList1, delimiter, start1);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;IF (lastpos1 &gt; 0 and pos2 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = pos2-lastpos1-delimLen;
&#x9;&#x9;&#x9;&#x9;&#x9;IF (poslen &lt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET poslen = 0;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, lastpos1+delimLen, poslen);
&#x9;&#x9;&#x9;&#x9;ELSEIF (lastpos1 &gt; 0 and pos2 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;SET object = SUBSTRING(objectList1, lastpos1+delimLen);
&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo1 = false;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET lastpos1 = pos2;
&#x9;&#x9;&#x9;&#x9;SET start1 = lastpos1+delimLen;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (trimText IS NOT NULL AND trimText = 1) THEN
&#x9;&#x9;&#x9;&#x9;SET object = TRIM(object);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (reverseOutput IS NOT NULL AND reverseOutput = 1) THEN
&#x9;&#x9;&#x9;&#x9;SET object = REVERSE(object);
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (includeDelimiter IS NOT NULL AND includeDelimiter = 1 AND moreToDo1) THEN
&#x9;&#x9;&#x9;&#x9;SET object = object || delimiter;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;IF (object IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : object=[&apos;||object||&apos;]&apos;);
&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(moduleName||&apos; : object=[null]&apos;);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (object IS NOT NULL) then
&#x9;&#x9;&#x9;&#x9;IF (occurrence IS NULL OR occurrence = 0 or occurrence = j) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(object);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Exit the loop if the occurrence was found
&#x9;&#x9;&#x9;&#x9;&#x9;IF (occurrence = j) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET moreToDo1 = false;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END WHILE;
&#x9;END IF;
&#x9;IF (debug = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : Duration=[&apos;||CAST(CURRENT_TIMESTAMP - starttime AS VARCHAR)||&apos;]&apos;);
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1519402575519</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">8/123</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/211</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/122</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/121</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/120</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/116</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/135</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/119</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/196</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/118</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/117</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/194</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1519402575519</attribute>
</metadata>