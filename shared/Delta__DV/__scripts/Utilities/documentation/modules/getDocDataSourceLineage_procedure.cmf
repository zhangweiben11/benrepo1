<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="getDocDataSourceLineage" path="/shared/Delta_DV/_scripts/Utilities/documentation/modules/getDocDataSourceLineage" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[getDocDataSourceLineage:

&#x9;This procedure returns all the DATA_SOURCE type resources found under the starting path.  It returns the formatted
&#x9;text for two sections: &quot;Data Sources Accessed List&quot; and &quot;Data Sources Lineage&quot;.  

&#x9;The data sources accessed is a distinct list of data sources along with their type, path and whether they are enabled or not.  

&#x9;Input:
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;&#x9;&#x9;The full resource path to the CIS resource to introspect and return data source access and lineage documentation.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. /shared/examples/CompositeView
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;&#x9;&#x9;The type of resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. TABLE
&#x9;&#x9;constantPath&#x9;&#x9;&#x9;&#x9;&#x9;This is the path to the constants file
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
&#x9;&#x9;commandOptionValueDsAccessed &#x9;The result command (&apos;print_datasource_accessed&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. [0,1] - none=0, all=1
&#x9;&#x9;commandOptionValueDsLineage &#x9;The result command (&apos;print_datasource_lineage&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. [0,1] - none=0, all=1
&#x9;&#x9;childResVect&#x9;&#x9;&#x9;&#x9;&#x9;This is a complete list (vector) of data source children.  Since these routines are recursive it will be inefficient
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;to calculate this on the fly each time.  It is more efficient to get these resources once up front and simply pass
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;the entire list in.  It is used to identify the lowest level resources which is a child of a data source.
&#x9;Output:
&#x9;&#x9;formattedText&#x9;&#x9;&#x9;&#x9;&#x9;The formatted text output.

&#x9;Exceptions:  none

An example output is shown below:
&#x9;The data source accessed list provides a unique list of data sources used by the passed in resource path.

&#x9;The data source lineage provides a top to bottom lineage starting with the &quot;resources used&quot; list.  
&#x9;The format of the lineage shows indenting and a depth counter when the depth of the resource changes.
&#x9;Additionally, when a child source is found an indicator of [CS] is placed in front of the resource.
&#x9;The type of that resource is placed at the end of the child resource path in the format of [TYPE.SUBTYPE].
&#x9;The parent data source path is placed under neath the child with a [DS] indicator in front of it.

Data Source Accessed List:
---------------------------
    Datasource Name               Enabled Type        Sub Type                 Datasource Path                                     
    ----------------------------- ------- ----------- ------------------------ ---------------------------------------------------
    ds_orders                     1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_orders                          
    ds_XML                        1       DATA_SOURCE XML_FILE_DATA_SOURCE     /shared/examples/ds_XML                             
    ds_inventory                  1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_inventory                       

Data Source Lineage:
--------------------
seqnum   id     pid    depth  resource path
     1 - 20587             0  /shared/examples/CompositeView

     2 - 20658  20587      1    /shared/examples/ViewOrder
     3 - 20741  20658      2      [CS] /shared/examples/ds_orders/customers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     4 - 20679  20658      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     5 - 20711  20658      2      [CS] /shared/examples/ds_orders/orders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     6 - 20670  20711      3        /shared/examples/ds_orders
     7 - 20729  20670      4          [CS] /shared/examples/ds_orders/cache_status  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     8 - 20671  20670      4          [CS] /shared/examples/ds_orders/cache_tracking  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     9 - 20689  20711      3        [CS] /shared/examples/ds_orders/orders_cache  [TABLE.DATABASE_TABLE]
                                    [DS] /shared/examples/ds_orders

    10 - 20774  20587      1    /shared/examples/ViewSales
    11 - 20679  20774      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
    12 - 20786  20774      2      /shared/examples/productCatalog_Transformation
    13 - 20757  20786      3        [CS] /shared/examples/ds_XML/productCatalog.xml  [TREE.XML_FILE_TREE]
                                    [DS] /shared/examples/ds_XML

    14 - 20763  20587      1    /shared/examples/ViewSupplier
    15 - 20606  20763      2      [CS] /shared/examples/ds_inventory/inventorytransactions  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    16 - 20619  20763      2      [CS] /shared/examples/ds_inventory/purchaseorders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    17 - 20644  20763      2      [CS] /shared/examples/ds_inventory/suppliers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;07/25/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;2012.401&#x9;11/12/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Completely overhauled inputs and logic to use getResourceLineageRecursive.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Updated for /shared/PSAssets structure
&#x9;2014.2&#x9;&#x9;03/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter to getResourceListRecursive to support recursion detection.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Removed the use of VECTOR as it is not efficient.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="resourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="resourceType" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="constantPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="commandOptionValueDsAccessed" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="commandOptionValueDsLineage" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="formattedText" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/definitions/RepositoryDefinitionsRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceLineageRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/getConstantV2" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="constantsPath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="constantsName" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="optionReturn" direction="IN">
        <datatype type="INTEGER" minValue="-32768" maxValue="32767"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* &#x9;getDocDataSourceLineage:

&#x9;This procedure returns all the DATA_SOURCE type resources found under the starting path.  It returns the formatted
&#x9;text for two sections: &quot;Data Sources Accessed List&quot; and &quot;Data Sources Lineage&quot;.  

&#x9;The data sources accessed is a distinct list of data sources along with their type, path and whether they are enabled or not.  

&#x9;Input:
&#x9;&#x9;resourcePath&#x9;&#x9;&#x9;&#x9;&#x9;The full resource path to the DV resource to introspect and return data source access and lineage documentation.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. /shared/examples/CompositeView
&#x9;&#x9;resourceType&#x9;&#x9;&#x9;&#x9;&#x9;The type of resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. TABLE
&#x9;&#x9;constantPath&#x9;&#x9;&#x9;&#x9;&#x9;This is the path to the constants file
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. /shared/ASAssets/Utilities/documentation/constants()
&#x9;&#x9;commandOptionValueDsAccessed &#x9;The result command (&apos;print_datasource_accessed&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. [0,1] - none=0, all=1
&#x9;&#x9;commandOptionValueDsLineage &#x9;The result command (&apos;print_datasource_lineage&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Values: e.g. [0,1] - none=0, all=1

&#x9;Output:
&#x9;&#x9;formattedText&#x9;&#x9;&#x9;&#x9;&#x9;The formatted text output.

&#x9;Exceptions:  none

An example output is shown below:
&#x9;The data source accessed list provides a unique list of data sources used by the passed in resource path.

&#x9;The data source lineage provides a top to bottom lineage starting with the &quot;resources used&quot; list.  
&#x9;The format of the lineage shows indenting and a depth counter when the depth of the resource changes.
&#x9;Additionally, when a child source is found an indicator of [CS] is placed in front of the resource.
&#x9;The type of that resource is placed at the end of the child resource path in the format of [TYPE.SUBTYPE].
&#x9;The parent data source path is placed under neath the child with a [DS] indicator in front of it.

Data Source Accessed List:
---------------------------
    Datasource Name               Enabled Type        Sub Type                 Datasource Path                                     
    ----------------------------- ------- ----------- ------------------------ ---------------------------------------------------
    ds_orders                     1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_orders                          
    ds_XML                        1       DATA_SOURCE XML_FILE_DATA_SOURCE     /shared/examples/ds_XML                             
    ds_inventory                  1       DATA_SOURCE RELATIONAL_DATA_SOURCE   /shared/examples/ds_inventory                       

Data Source Lineage:
--------------------
seqnum   id     pid    depth  resource path
     1 - 20587             0  /shared/examples/CompositeView

     2 - 20658  20587      1    /shared/examples/ViewOrder
     3 - 20741  20658      2      [CS] /shared/examples/ds_orders/customers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     4 - 20679  20658      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     5 - 20711  20658      2      [CS] /shared/examples/ds_orders/orders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
     6 - 20670  20711      3        /shared/examples/ds_orders
     7 - 20729  20670      4          [CS] /shared/examples/ds_orders/cache_status  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     8 - 20671  20670      4          [CS] /shared/examples/ds_orders/cache_tracking  [TABLE.DATABASE_TABLE]
                                      [DS] /shared/examples/ds_orders
     9 - 20689  20711      3        [CS] /shared/examples/ds_orders/orders_cache  [TABLE.DATABASE_TABLE]
                                    [DS] /shared/examples/ds_orders

    10 - 20774  20587      1    /shared/examples/ViewSales
    11 - 20679  20774      2      [CS] /shared/examples/ds_orders/orderdetails  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_orders
    12 - 20786  20774      2      /shared/examples/productCatalog_Transformation
    13 - 20757  20786      3        [CS] /shared/examples/ds_XML/productCatalog.xml  [TREE.XML_FILE_TREE]
                                    [DS] /shared/examples/ds_XML

    14 - 20763  20587      1    /shared/examples/ViewSupplier
    15 - 20606  20763      2      [CS] /shared/examples/ds_inventory/inventorytransactions  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    16 - 20619  20763      2      [CS] /shared/examples/ds_inventory/purchaseorders  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory
    17 - 20644  20763      2      [CS] /shared/examples/ds_inventory/suppliers  [TABLE.DATABASE_TABLE]
                                  [DS] /shared/examples/ds_inventory

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2012.3&#x9;&#x9;07/25/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Created new
&#x9;2012.401&#x9;11/12/2012&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.2.0&#x9;&#x9;&#x9;Completely overhauled inputs and logic to use getResourceLineageRecursive.
&#x9;2013.4&#x9;&#x9;10/28/2013&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Updated for /shared/PSAssets structure
&#x9;2014.2&#x9;&#x9;03/20/2014&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;6.2.0&#x9;&#x9;&#x9;Added parameter to getResourceListRecursive to support recursion detection.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Removed the use of VECTOR as it is not efficient.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getDocDataSourceLineage(
    IN resourcePath&#x9;&#x9; &#x9;&#x9;&#x9;LONGVARCHAR,  
    IN resourceType &#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;IN constantPath&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN commandOptionValueDsAccessed INTEGER, --&apos;print_datasource_accessed&apos;:: 0 or 1
&#x9;IN commandOptionValueDsLineage &#x9;INTEGER, --&apos;print_datasource_lineage&apos;:: 0 or 1
&#x9;OUT formattedText&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text
)
BEGIN
&#x9;DECLARE moduleName &#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;getDocDataSourceLineage&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debug2&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE debugTime&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE debugTime2&#x9;&#x9;&#x9;&#x9;CHAR(1);
&#x9;DECLARE i,numRows&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE DNHeader&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;Datasource Name&apos;;&#x9;-- DN=Datasource Name header/size
&#x9;DECLARE DNsize&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT LENGTH(DNHeader)+1; -- DN=Datasource Name size, default len=16
&#x9;DECLARE DPHeader&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;Datasource Path&apos;;&#x9;-- DP=Datasource Path header
&#x9;DECLARE DPsize&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT LENGTH(DPHeader);&#x9;-- DP=Datasource Path size
&#x9;DECLARE DTHeader&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;Type&apos;;&#x9;&#x9;&#x9;&#x9;-- DT=Datasource Type header
&#x9;DECLARE DTsize&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT LENGTH(DTHeader);&#x9;-- DT=Datasource Type size
&#x9;DECLARE STHeader&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;Subtype&apos;;&#x9;&#x9;&#x9;-- ST=datasource SubType header
&#x9;DECLARE STsize&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT LENGTH(STHeader);&#x9;-- ST=datasource SubType size
&#x9;DECLARE ENHeader&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;Enabled&apos;;&#x9;&#x9;&#x9;-- EN=dtasource ENabled header
&#x9;DECLARE ENsize&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT LENGTH(ENHeader);&#x9;-- EN=datasource ENabled size
&#x9;DECLARE pid&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE padChar&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE eol&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE indent4&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE indentResponse&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE linePart1&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text;
&#x9;DECLARE linePart2&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text;
&#x9;DECLARE nameValuePair&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE name&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE val&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE docList&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE rec&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/definitions/RepositoryDefinitionsRecursive.lineageTreeType;
/*&#x9;ROW(
&#x9;&#x9;seqNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;resourceID&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;parentID&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;resDepth&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;treeType&#x9;&#x9;&#x9;&#x9;VARCHAR(255), -- Parent, Child
&#x9;&#x9;resName &#x9;&#x9;&#x9;&#x9;VARCHAR(255), 
&#x9;&#x9;resPath &#x9;&#x9;&#x9;&#x9;TypeDefinitions.pathType,
&#x9;&#x9;resType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;subType&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;enabled&#x9;&#x9;&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;dsID&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,
&#x9;&#x9;dsResName&#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;dsResPath&#x9;&#x9;&#x9;&#x9;TypeDefinitions.pathType,
&#x9;&#x9;dsResType &#x9;&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;dsResSubType&#x9;&#x9;&#x9;VARCHAR(255),
&#x9;&#x9;dsEnabled&#x9;&#x9;&#x9;&#x9;BIT,
&#x9;&#x9;dsChildCount&#x9;&#x9;&#x9;INTEGER)
*/
&#x9;DECLARE lineage&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE pos&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE dsUniqueList&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text DEFAULT &apos;&apos;;
&#x9;DECLARE dsListHeader&#x9;&#x9;&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE dsListText&#x9;&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text;
&#x9;DECLARE lineageHeader&#x9;&#x9;&#x9;&#x9;VARCHAR(1024);
&#x9;DECLARE lineageText&#x9;&#x9;&#x9;&#x9;&#x9;/lib/util/System.Text;
&#x9;DECLARE excludeDSPathsList&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE datasourceAncestory&#x9;&#x9;&#x9;INTEGER DEFAULT 1;
&#x9;DECLARE startTimeGetLineage&#x9;&#x9;&#x9;TIMESTAMP;
&#x9;DECLARE startTimeDsAccessed &#x9;&#x9;TIMESTAMP;
&#x9;DECLARE startTimeResourceLineage &#x9;TIMESTAMP;
&#x9;DECLARE startTimeOverallLineage &#x9;TIMESTAMP;
&#x9;DECLARE durationDsAccessed&#x9;&#x9;&#x9;INTERVAL DAY TO SECOND;
&#x9;DECLARE durationResourceLineage&#x9;&#x9;INTERVAL DAY TO SECOND;
&#x9;DECLARE durationDsAccessedDisp&#x9;&#x9;VARCHAR;
&#x9;DECLARE durationResourceLineageDisp&#x9;VARCHAR;
&#x9;DECLARE durationDsAccessedOverall&#x9;INTERVAL DAY TO SECOND DEFAULT &apos;0 00:00:00.000&apos;;
&#x9;DECLARE durationResourceLineageOverall INTERVAL DAY TO SECOND DEFAULT &apos;0 00:00:00.000&apos;;
&#x9;DECLARE durationOverall&#x9;&#x9;&#x9;&#x9;INTERVAL DAY TO SECOND;
&#x9;DECLARE inIgnoreResourceDoesNotExist INTEGER DEFAULT 1; &#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.

&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;debug&apos;, 1, debug);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;debugTime&apos;, 1, debugTime);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;debugTime2&apos;, 1, debugTime2);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;padChar&apos;, 1, padChar);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;eol&apos;, 1, eol);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;indent4&apos;, 1, indent4);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/getConstantV2(constantPath, &apos;excludeDSPathsList&apos;, 1, excludeDSPathsList);

&#x9;-- Initialize the starting times
&#x9;set startTimeOverallLineage = CURRENT_TIMESTAMP;
&#x9;-- Initialize output
&#x9;set formattedText = &apos;&apos;;

&#x9;-- Only execute this if the resource is not a CONTAINER
&#x9;if (resourceType != &apos;CONTAINER&apos;) then
&#x9;&#x9;/********************************************
&#x9;&#x9; * Get the Data Source Lineage
&#x9;&#x9; ********************************************/
&#x9;&#x9;-- Find data sources associated with the path that was passed in
&#x9;&#x9;set startTimeGetLineage = CURRENT_TIMESTAMP;
&#x9;&#x9;set lineage = indent4 || resourcePath || eol;
&#x9;&#x9;set numRows = 0;
&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceLineageRecursive(NULL, NULL, NULL, NULL, resourcePath, resourceType, excludeDSPathsList, datasourceAncestory, inIgnoreResourceDoesNotExist)  
&#x9;&#x9;do
&#x9;&#x9;&#x9;set numRows = numRows + 1;
&#x9;&#x9;&#x9;-- Assign the row to the list
&#x9;&#x9;&#x9;set docList = docList || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;seqNum=&apos;||NVL(cast(r.seqNum as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;resourceID=&apos;||NVL(cast(r.resourceID as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;parentID=&apos;||NVL(cast(r.parentID as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;resDepth=&apos;||NVL(cast(r.resDepth as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;treeType=&apos;||NVL(r.treeType,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;resName=&apos;||NVL(r.resName,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;resPath=&apos;||NVL(r.resPath,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;resType=&apos;||NVL(r.resType,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;subType=&apos;||NVL(r.subType,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;enabled=&apos;||NVL(cast(r.enabled as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsID=&apos;||NVL(cast(r.dsID as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsResName=&apos;||NVL(r.dsResName,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsResPath=&apos;||NVL(r.dsResPath,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsResType=&apos;||NVL(r.dsResType,&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsResSubType=&apos;||NVL(r.dsResSubType,&apos;null&apos;) ||  &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsEnabled=&apos;||NVL(cast(r.dsEnabled as varchar),&apos;null&apos;) || &apos;::&apos; ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;dsChildCount=&apos;||NVL(cast(r.dsChildCount as varchar),&apos;null&apos;) || &apos;|&apos; ||CHR(10);

&#x9;&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debug2,&apos;numRows=&apos;||LPAD(numRows,4,&apos; &apos;)||&apos;  DNsize=&apos;||DNsize || &apos;  DPsize=&apos;||DPsize || &apos;  DTsize=&apos;||DTsize || &apos;  STsize=&apos;||STsize || &apos;  ENsize=&apos;||ENsize);
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debug2,&apos;numRows=&apos;||LPAD(numRows,4,&apos; &apos;)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| &apos;  DN=&apos;||NVL(r.dsResName,&apos;null&apos;) 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| &apos;  DP=&apos;||NVL(r.dsResPath,&apos;null&apos;)  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| &apos;  DT=&apos;||NVL(r.dsResType,&apos;null&apos;)  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| &apos;  ST=&apos;||NVL(r.dsResSubType,&apos;null&apos;)  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|| &apos;  EN=&apos;||NVL(cast(r.dsEnabled as varchar),&apos;null&apos;) );
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;-- Determine the longest length for each field
&#x9;&#x9;&#x9;if (r.dsResName is not null and length(r.dsResName) &gt; DNsize) then
&#x9;&#x9;&#x9;&#x9;set DNsize = length(r.dsResName);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (r.dsResPath is not null and length(r.dsResPath) &gt; DPsize) then
&#x9;&#x9;&#x9;&#x9;set DPsize = length(r.dsResPath);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (r.dsResType is not null and length(r.dsResType) &gt; DTsize) then
&#x9;&#x9;&#x9;&#x9;set DTsize = length(r.dsResType);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (r.dsResSubType is not null and length(r.dsResSubType) &gt; STsize) then
&#x9;&#x9;&#x9;&#x9;set STsize = length(r.dsResSubType);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (r.dsEnabled is not null and length(r.dsEnabled) &gt; ENsize) then
&#x9;&#x9;&#x9;&#x9;set ENsize = length(r.dsEnabled);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end for;
&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debug,&apos;docList=&apos;||CHR(10)||NVL(docList,&apos;null&apos;));
&#x9;&#x9;end if;

&#x9;&#x9;-- Increment sizes by 1
&#x9;&#x9;set DNsize = DNsize + 1;
&#x9;&#x9;set DPsize = DPsize + 1;
&#x9;&#x9;set DTsize = DTsize + 1;
&#x9;&#x9;set STsize = STsize + 1;
&#x9;&#x9;set ENsize = ENsize + 1;
&#x9;&#x9;if (UPPER(debug2) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debug2,&apos;  DNsize=&apos;||DNsize || &apos;  DPsize=&apos;||DPsize || &apos;  DTsize=&apos;||DTsize || &apos;  STsize=&apos;||STsize || &apos;  ENsize=&apos;||ENsize);
&#x9;&#x9;end if;
&#x9;&#x9;if (UPPER(debugTime) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;set durationOverall = CURRENT_TIMESTAMP - startTimeGetLineage;
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;                Get Lineage List::    duration=&apos;||cast(durationOverall as varchar)||&apos;    Lineage Row Count=&apos;||numRows);
&#x9;&#x9;end if;

&#x9;&#x9;/********************************************
&#x9;&#x9; * Prepare the formatted text for:
&#x9;&#x9; *    Data Sources Accessed List
&#x9;&#x9; ********************************************/
&#x9;&#x9;-- Prepare the data source accessed header
&#x9;&#x9;set dsListHeader = &#x9;&#x9; &#x9;&#x9;     &apos;Data Source Accessed List:&apos;||eol;
&#x9;&#x9;set dsListHeader = dsListHeader||    &apos;---------------------------&apos;||eol;
&#x9;&#x9;-- Establish the header
&#x9;&#x9;set dsListHeader = dsListHeader || indent4 || RPAD(DNHeader,DNsize,padChar) || RPAD(ENHeader,ENsize,padChar)|| RPAD(DTHeader,DTsize,padChar)  || RPAD(STHeader,STsize,padChar) || RPAD(DPHeader,DPsize,padChar)||eol;
&#x9;&#x9;set dsListHeader = dsListHeader || indent4 || RPAD(&apos;-&apos;,DNsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,ENsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,DTsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,STsize-1,&apos;-&apos;) ||&apos; &apos;|| RPAD(&apos;-&apos;,DPsize-1,&apos;-&apos;)||eol;
&#x9;&#x9;set dsListText = &apos;&apos;;

&#x9;&#x9;/********************************************
&#x9;&#x9; * Prepare the formatted text for:
&#x9;&#x9; *    Data Source Lineage
&#x9;&#x9; ********************************************/
&#x9;&#x9;-- Prepare the data source lineage header
&#x9;&#x9;set lineageHeader =                  &apos;Data Source Lineage:&apos;||eol;
&#x9;&#x9;set lineageHeader = lineageHeader || &apos;--------------------&apos;||eol;
&#x9;&#x9;set lineageHeader = lineageHeader || &apos;seqnum   id     pid    depth  resource path&apos;||eol;
&#x9;&#x9;set lineageText = &apos;&apos;;

&#x9;&#x9;-- Format the output
&#x9;&#x9;set numRows = 0;
&#x9;&#x9;-- Extract each resource lineage structure
&#x9;&#x9;for r as 
&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(REPLACE(docList, CHR(10), &apos;&apos;), &apos;|&apos;,0,0,0,0,1)
&#x9;&#x9;&#x9;where textExpression is not null and length(trim(textExpression)) &gt; 0
&#x9;&#x9;do
&#x9;&#x9;&#x9;set numRows = numRows + 1;
&#x9;&#x9;&#x9;-- Extract the record stucture
&#x9;&#x9;&#x9;set rec = null;
&#x9;&#x9;&#x9;for line as 
&#x9;&#x9;&#x9;&#x9;select * from /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(r.textExpression, &apos;::&apos;,0,0,0,0,1)
&#x9;&#x9;&#x9;&#x9;where textExpression is not null and length(trim(textExpression)) &gt; 0
&#x9;&#x9;&#x9;do
&#x9;&#x9;&#x9;&#x9;set nameValuePair = line.textExpression;
&#x9;&#x9;&#x9;&#x9;set pos = INSTR(nameValuePair, &apos;=&apos;);
&#x9;&#x9;&#x9;&#x9;set name = SUBSTRING(nameValuePair, 1, pos-1);
&#x9;&#x9;&#x9;&#x9;set val = SUBSTRING(nameValuePair, pos+1);
&#x9;&#x9;&#x9;&#x9;if (val = &apos;null&apos;) then
&#x9;&#x9;&#x9;&#x9;&#x9;set val = null;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;case
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;seqNum&apos; &#x9;&#x9;&#x9;then set rec.seqNum = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;resourceID&apos; &#x9;&#x9;then set rec.resourceID = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;parentID&apos; &#x9;&#x9;then set rec.parentID = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;resDepth&apos; &#x9;&#x9;then set rec.resDepth = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;treeType&apos; &#x9;&#x9;then set rec.treeType = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;resName&apos; &#x9;&#x9;then set rec.resName = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;resPath&apos; &#x9;&#x9;then set rec.resPath = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;resType&apos; &#x9;&#x9;then set rec.resType = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;subType&apos; &#x9;&#x9;then set rec.subType = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;enabled&apos; &#x9;&#x9;then set rec.enabled = CAST(val AS BIT);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsID&apos; &#x9;&#x9;&#x9;then set rec.dsID = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsResName&apos; &#x9;&#x9;then set rec.dsResName = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsResPath&apos; &#x9;&#x9;then set rec.dsResPath = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsResType&apos; &#x9;&#x9;then set rec.dsResType = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsResSubType&apos; &#x9;then set rec.dsResSubType = val;
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsEnabled&apos; &#x9;&#x9;then set rec.dsEnabled = CAST(val AS BIT);
&#x9;&#x9;&#x9;&#x9;&#x9;when name=&apos;dsChildCount&apos; &#x9;then set rec.dsChildCount = CAST(val AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;end case;
&#x9;&#x9;&#x9;end for;

&#x9;&#x9;&#x9;-- Continue with the logic using the extracted record structure
&#x9;&#x9;&#x9;set durationDsAccessedDisp = &apos;&apos;;
&#x9;&#x9;&#x9;set durationResourceLineageDisp = &apos;&apos;;
&#x9;&#x9;&#x9;/********************************************
&#x9;&#x9;&#x9; * Create the formatted text for:
&#x9;&#x9;&#x9; *    Data Sources Accessed List
&#x9;&#x9;&#x9; ********************************************/
&#x9;&#x9;&#x9;if (commandOptionValueDsAccessed = 1) then
&#x9;&#x9;&#x9;&#x9;set startTimeDsAccessed = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;-- Construct the unique list of data sources used by the incoming resource
&#x9;&#x9;&#x9;&#x9;if (rec.dsResPath is not null and POSITION(&apos;[&apos;||rec.dsResPath||&apos;]&apos; in dsUniqueList) = 0) then
&#x9;&#x9;&#x9;&#x9;&#x9;-- Add the data source to the unique list
&#x9;&#x9;&#x9;&#x9;&#x9;set dsUniqueList = dsUniqueList || &apos;[&apos;|| rec.dsResPath || &apos;] &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Construct the data source lineage text
&#x9;&#x9;&#x9;&#x9;&#x9;set dsListText = dsListText || indent4||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.dsResName,&#x9;&#x9;DNsize,padChar)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.dsEnabled,&#x9;&#x9;ENsize,padChar)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.dsResType,&#x9;&#x9;DTsize,padChar)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.dsResSubType,&#x9;STsize,padChar)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.dsResPath,&#x9;&#x9;DPsize,padChar)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eol;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Log the intermediate time
&#x9;&#x9;&#x9;&#x9;set durationDsAccessed = (CURRENT_TIMESTAMP - startTimeDsAccessed);
&#x9;&#x9;&#x9;&#x9;set durationDsAccessedOverall = durationDsAccessedOverall + durationDsAccessed;
&#x9;&#x9;&#x9;&#x9;set durationDsAccessedDisp = RPAD(CAST(durationDsAccessed AS VARCHAR),14,padChar);
&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;/********************************************
&#x9;&#x9;&#x9; * Create the formatted text for:
&#x9;&#x9;&#x9; *    Data Source Lineage
&#x9;&#x9;&#x9; ********************************************/
&#x9;&#x9;&#x9;if (commandOptionValueDsLineage = 1) then
&#x9;&#x9;&#x9;&#x9;set startTimeResourceLineage = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;&#x9;-- Check for a null parentID
&#x9;&#x9;&#x9;&#x9;set pid = CAST(rec.parentID AS VARCHAR);
&#x9;&#x9;&#x9;&#x9;if (rec.parentID is null) then
&#x9;&#x9;&#x9;&#x9;&#x9;set pid = &apos; &apos;;
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Put a blank line before any resource depth=1
&#x9;&#x9;&#x9;&#x9;set linePart1 = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;if (rec.resDepth = 1) then
&#x9;&#x9;&#x9;&#x9;&#x9;set linePart1 = eol;
&#x9;&#x9;&#x9;&#x9;end if;

&#x9;&#x9;&#x9;&#x9;-- Construct the first part of the line
&#x9;&#x9;&#x9;&#x9;set linePart1 = linePart1 ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LPAD(rec.seqNum,6,padChar) || &apos; - &apos;|| 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(rec.resourceID,7,padChar) || 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RPAD(pid,7,&apos; &apos;) ||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LPAD(rec.resDepth,5,padChar);

&#x9;&#x9;&#x9;&#x9;-- Construct the second part of the line formatted based on whether the resource is a child of a data source or not
&#x9;&#x9;&#x9;&#x9;if (rec.dsResPath is null) then
--&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,rec.resPath, indentResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Add indentation to the string
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;while (i &lt;= rec.resDepth) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || rec.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;set linePart2 = &apos;  &apos;||indentResponse;
&#x9;&#x9;&#x9;&#x9;else
--&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,&apos;[CS] &apos;|| rec.resPath || &apos;  [&apos;|| rec.resType ||&apos;.&apos;||NVL(rec.subType,&apos;null&apos;)||&apos;]&apos;, indentResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Add indentation to the string
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;while (i &lt;= rec.resDepth) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || &apos;[CS] &apos;|| rec.resPath || &apos;  [&apos;|| rec.resType ||&apos;.&apos;||NVL(rec.subType,&apos;null&apos;)||&apos;]&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set linePart2 = &apos;  &apos;||indentResponse || eol;

--&#x9;&#x9;&#x9;&#x9;&#x9;call /shared/ASAssets/Utilities/string/indent(rec.resDepth,&apos;  &apos;,&apos;[DS] &apos;|| rec.dsResPath, indentResponse);
&#x9;&#x9;&#x9;&#x9;&#x9;-- Add indentation to the string
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = &apos;&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;set i = 1;
&#x9;&#x9;&#x9;&#x9;&#x9;while (i &lt;= rec.resDepth) do
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || &apos;  &apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set i = i + 1;
&#x9;&#x9;&#x9;&#x9;&#x9;end while;
&#x9;&#x9;&#x9;&#x9;&#x9;set indentResponse = indentResponse || &apos;[DS] &apos;|| rec.dsResPath;
&#x9;&#x9;&#x9;&#x9;&#x9;set linePart2 = linePart2 || LPAD(&apos; &apos;,30,&apos; &apos;)||indentResponse;
&#x9;&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;&#x9;-- Glue both parts of the line together and put an end of line on it
&#x9;&#x9;&#x9;&#x9;set lineageText = lineageText || NVL(linePart1,&apos;null&apos;) || NVL(linePart2,&apos;null&apos;) || eol;

&#x9;&#x9;&#x9;&#x9;-- Log the intermediate time
&#x9;&#x9;&#x9;&#x9;set durationResourceLineage = (CURRENT_TIMESTAMP - startTimeResourceLineage);
&#x9;&#x9;&#x9;&#x9;set durationResourceLineageOverall = durationResourceLineageOverall + durationResourceLineage;
&#x9;&#x9;&#x9;&#x9;set durationResourceLineageDisp = RPAD(CAST(durationResourceLineage AS VARCHAR),14,padChar);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (UPPER(debugTime2) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debugTime2,&apos;                   resource loop::      &apos;||
&#x9;&#x9;&#x9;&#x9;&#x9;LPAD(i,6,&apos; &apos;)||&apos; ds_accessed=&apos;||durationDsAccessedDisp||&apos;     res_lineage=&apos;||durationResourceLineageDisp);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end for;
&#x9;&#x9;set docList = &apos;&apos;;

&#x9;&#x9;-- Add the data source list to the output formatted text
&#x9;&#x9;if (commandOptionValueDsAccessed = 1 AND dsListText IS NOT NULL AND LENGTH(&apos;|&apos;||dsListText||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;&#x9;set startTimeDsAccessed = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;set formattedText = formattedText || dsListHeader || dsListText || eol;
&#x9;&#x9;&#x9;set durationDsAccessedOverall = durationDsAccessedOverall + (CURRENT_TIMESTAMP - startTimeDsAccessed);
&#x9;&#x9;end if;

&#x9;&#x9;-- Add the data source lineage to the output formatted text
&#x9;&#x9;if (commandOptionValueDsLineage = 1 AND lineageText IS NOT NULL AND LENGTH(&apos;|&apos;||lineageText||&apos;|&apos;) &gt; 2) then
&#x9;&#x9;&#x9;set startTimeResourceLineage = CURRENT_TIMESTAMP;
&#x9;&#x9;&#x9;set formattedText = formattedText || lineageHeader || lineageText;
&#x9;&#x9;&#x9;set durationResourceLineageOverall = durationResourceLineageOverall + (CURRENT_TIMESTAMP - startTimeResourceLineage);
&#x9;&#x9;end if;

&#x9;&#x9;if (UPPER(debugTime2) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;            Datasources Accessed::    duration=&apos;||NVL(cast(durationDsAccessedOverall as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;                Resource Lineage::    duration=&apos;||NVL(cast(durationResourceLineageOverall as varchar),&apos;null&apos;));
&#x9;&#x9;&#x9;set durationOverall = CURRENT_TIMESTAMP - startTimeOverallLineage;
&#x9;&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debugTime,&apos;              Datasource Lineage::    duration=&apos;||NVL(cast(durationOverall as varchar),&apos;null&apos;));
&#x9;&#x9;end if;
&#x9;end if; 
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:2:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>