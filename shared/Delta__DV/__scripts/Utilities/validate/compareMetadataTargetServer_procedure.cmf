<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="compareMetadataTargetServer" path="/shared/Delta_DV/_scripts/Utilities/validate/compareMetadataTargetServer" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[compareMetadataTargetServer

&#x9;This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
&#x9;&#x9;against a target server environment metadata.  Resources from source environment are assumed to be
&#x9;&#x9;in the same location on the target server.  If the resource does not exist, it is reported that way.
&#x9;&#x9;The objective is alert the development team of differences in the metadata on the target server before
&#x9;&#x9;a deployment is performed.  The idea is to know what is going to happen before it happens so that the
&#x9;&#x9;developer can prepare ahead of time.

&#x9;Input:
&#x9;&#x9;inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N=no debug.  Y=debug on.
&#x9;&#x9;startingResourcePath&#x9;LONGVARCHAR,&#x9;-- The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;targetDVSchemaPath&#x9;&#x9;LONGVARCHAR, &#x9;-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;getBasicResourceCursor_SQL_TABLE and getServerAttribute
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
&#x9;&#x9;sendEmail&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;&#x9;emailList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- A comma-separated list of valid emails

&#x9;Output:
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;startingLineagePath&#x9;&#x9;VARCHAR(4000),
&#x9;&#x9;&#x9;message &#x9;&#x9;&#x9;&#x9;LONGVARCHAR
&#x9;&#x9;)

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;04/19/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inDebug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="startingResourcePath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="targetDVSchemaPath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="sendEmail" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="emailList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="result" type="TABLE" refId="256">
        <element name="startingLineagePath">
          <datatype name="VARCHAR" type="STRING" maxLength="4000"/>
        </element>
        <element name="message">
          <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
        </element>
      </datatype>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4000"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="path">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="type">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceId">
            <datatype type="INTEGER"/>
          </element>
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="changeId">
            <datatype type="INTEGER"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceLineageDirectRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inSeqNum" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inParentID" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inResourceDepth" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inLineageResourceIdList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="excludePathsList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="datasourceAncestor" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inIgnoreResourceDoesNotExist" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="resourceTreeList" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="seqNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resourceID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="parentID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="resDepth">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="treeType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsID">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dsResName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="dsResType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsResSubType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="dsEnabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="dsChildCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getResourceListRecursive" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="resourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="name">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resPath">
            <datatype type="STRING" maxLength="4096"/>
          </element>
          <element name="resType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="id">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="changeid">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="version">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="introspectState">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactMessage">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="isFunction">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="scriptText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="childCount">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="dataSourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creationDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="creatorUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="creatorUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDate">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedDateBigint">
            <datatype type="INTEGER"/>
          </element>
          <element name="lastModifiedUserDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserId">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="lastModifiedUserName">
            <datatype type="STRING" maxLength="255"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/returnFolderNameAndFolderPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="4096"/>
      </element>
      <element name="mode" direction="IN">
        <datatype type="STRING" minLength="1" maxLength="1"/>
      </element>
      <element name="folderName" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="folderPath" direction="OUT">
        <datatype type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/server/getServerAttribute" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="attributePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="keyValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;compareMetadataTargetServer

&#x9;This procedure is used to evaluate the lineage of a published resource and compare the metadata tables
&#x9;&#x9;against a target server environment metadata.  Resources from source environment are assumed to be
&#x9;&#x9;in the same location on the target server.  If the resource does not exist, it is reported that way.
&#x9;&#x9;The objective is alert the development team of differences in the metadata on the target server before
&#x9;&#x9;a deployment is performed.  The idea is to know what is going to happen before it happens so that the
&#x9;&#x9;developer can prepare ahead of time.

&#x9;Input:
&#x9;&#x9;inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N=no debug.  Y=debug on.
&#x9;&#x9;startingResourcePath&#x9;LONGVARCHAR,&#x9;-- The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;targetDVSchemaPath&#x9;&#x9;LONGVARCHAR, &#x9;-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;getBasicResourceCursor_SQL_TABLE and getServerAttribute
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
&#x9;&#x9;sendEmail&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;&#x9;emailList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- A comma-separated list of valid emails

&#x9;Output:
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;startingLineagePath&#x9;&#x9;VARCHAR(4000),
&#x9;&#x9;&#x9;message &#x9;&#x9;&#x9;&#x9;LONGVARCHAR
&#x9;&#x9;)

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;04/19/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE compareMetadataTargetServer(
&#x9;&#x9;IN inDebug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- N=no debug.  Y=debug on.
&#x9;&#x9;IN startingResourcePath&#x9;&#x9;LONGVARCHAR,&#x9;-- The resource path to interrogate.  May be published resource, folder or datasource.
&#x9;&#x9;IN targetDVSchemaPath&#x9;&#x9;LONGVARCHAR, &#x9;-- DV Path to a &quot;Composite Datasource&quot; schema where the following resources are published:
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;&#x9;getBasicResourceCursor_SQL_TABLE and getServerAttribute
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;  Example:  /shared/Common/ComparisonTools/DV_Server/Utilities/repository
&#x9;&#x9;IN sendEmail&#x9;&#x9;&#x9;&#x9;CHAR(1),&#x9;&#x9;-- null/N=do not send an email.  Y=send email for each resource with a violation/warning F or W.
&#x9;&#x9;IN emailList&#x9;&#x9;&#x9;&#x9;LONGVARCHAR,&#x9;-- A comma-separated list of valid emails
&#x9;&#x9;OUT result&#x9;&#x9;&#x9;&#x9;&#x9;PIPE (
&#x9;&#x9;&#x9;startingLineagePath&#x9;&#x9;VARCHAR(4000),
&#x9;&#x9;&#x9;message &#x9;&#x9;&#x9;&#x9;LONGVARCHAR
&#x9;&#x9;)
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;compareMetadataTargetServer&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT UPPER(NVL(inDebug,&apos;N&apos;));
&#x9;DECLARE DEBUG_PRINT_SIZE&#x9;&#x9;&#x9;INTEGER DEFAULT 63000;
&#x9;DECLARE resourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000) DEFAULT startingResourcePath;
&#x9;DECLARE resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE parentPath&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT null;
&#x9;DECLARE message&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE errorMessage&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sourceServerDisplayName&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetServerDisplayName&#x9;&#x9;VARCHAR;
&#x9;DECLARE version&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE targetServerColumnList&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE impactedResourceList&#x9;&#x9;LONGVARCHAR DEFAULT &apos;&apos;;
&#x9;DECLARE tableException&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE ex&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION;
&#x9;DECLARE email&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE displayName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE emailFormat&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;TEXT_PLAIN&apos;;
&#x9;DECLARE subject&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(1000);&#x9;-- The email subject line
&#x9;DECLARE body&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;&#x9;-- The body of the email
&#x9;DECLARE pos1, pos2&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE targetColumnNameType&#x9;&#x9;VARCHAR;
&#x9;DECLARE resExists&#x9;&#x9;&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE sqlResourcePath&#x9;&#x9;&#x9;&#x9;VARCHAR(4000);
&#x9;DECLARE getServerAttributeCurs&#x9;&#x9;CURSOR(serverDisplayName VARCHAR);
&#x9;DECLARE getBasicResourceCursorCurs&#x9;CURSOR(columnName VARCHAR, columnType VARCHAR);

&#x9;-- Validate input
&#x9;IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos; AND emailList IS NULL OR LENGTH(TRIM(emailList)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input variable &quot;emailList&quot; may not be null or emtpy when sendEmail=Y&apos;;
&#x9;END IF;
&#x9;IF (targetDVSchemaPath IS NULL OR LENGTH(TRIM(targetDVSchemaPath)) = 0) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input variable &quot;targetDVSchemaPath&quot; may not be null or empty.&apos;;
&#x9;END IF;

&#x9;CALL /lib/resource/ResourceExists(targetDVSchemaPath, &apos;CONTAINER&apos;, null, resExists);
&#x9;IF (NOT resExists) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The input variable &quot;targetDVSchemaPath&quot; path does not exist.&apos;;
&#x9;END IF;

&#x9;-- Get the version of the source server.
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/server/getServerAttribute(&apos;/server/config/info/version&apos;, version);

&#x9;-- Get the display name of the source server.
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/server/getServerAttribute(&apos;/server/config/info/displayName&apos;, sourceServerDisplayName);

&#x9;-- Concat the version at the end of the server display
&#x9;SET pos1 = INSTR(sourceServerDisplayName, &apos;-&apos;, -1, 1);
&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;SET sourceServerDisplayName = SUBSTRING(sourceServerDisplayName, 1, pos1);
&#x9;END IF;
&#x9;SET sourceServerDisplayName = sourceServerDisplayName || &apos;[&apos;||version||&apos;]&apos;;

&#x9;-- Get the version of the target server.
&#x9;SET sqlResourcePath = targetDVSchemaPath || &apos;/getServerAttribute&apos;;
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||sqlResourcePath||&apos;(&apos;&apos;/server/config/info/version&apos;&apos;)&apos;;
&#x9;OPEN getServerAttributeCurs FOR sqlStatement;
&#x9;FOR script AS getServerAttributeCurs DO
&#x9;&#x9;SET version = script.serverDisplayName;
&#x9;END FOR;

&#x9;-- Get the display name of the server.
&#x9;SET sqlResourcePath = targetDVSchemaPath || &apos;/getServerAttribute&apos;;
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
&#x9;SET sqlStatement = &apos;SELECT * FROM &apos;||sqlResourcePath||&apos;(&apos;&apos;/server/config/info/displayName&apos;&apos;)&apos;;
&#x9;OPEN getServerAttributeCurs FOR sqlStatement;
&#x9;FOR script AS getServerAttributeCurs DO
&#x9;&#x9;SET targetServerDisplayName = script.serverDisplayName;
&#x9;END FOR;

&#x9;-- Concat the version at the end of the server display
&#x9;SET pos1 = INSTR(targetServerDisplayName, &apos;-&apos;, -1, 1);
&#x9;IF (pos1 &gt; 0) THEN
&#x9;&#x9;SET targetServerDisplayName = SUBSTRING(targetServerDisplayName, 1, pos1);
&#x9;END IF;
&#x9;SET targetServerDisplayName = targetServerDisplayName || &apos;[&apos;||version||&apos;]&apos;;

&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;CALL PRINT(moduleName||&apos; : sourceServerDisplayName=&apos;||NVL(sourceServerDisplayName,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(moduleName||&apos; : targetServerDisplayName=&apos;||NVL(targetServerDisplayName,&apos;null&apos;));
&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;END IF;

&#x9;-- Get the resource type
&#x9;getType:
&#x9;FOR r AS SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor(resourcePath, null) DO
&#x9;&#x9;IF (r.&quot;type&quot; = &apos;DATA_SOURCE&apos; OR r.&quot;type&quot; = &apos;CONTAINER&apos;) THEN
&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF (r.&quot;type&quot; = &apos;LINK&apos; AND INSTR(resourcePath, &apos;/services/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;ELSEIF ((r.&quot;type&quot; = &apos;TABLE&apos; OR r.&quot;type&quot; = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/shared/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;END IF;
&#x9;END FOR;
&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;SET message = moduleName||&apos; : Starting resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
&#x9;&#x9;CALL PRINT(message);
&#x9;END IF;

&#x9;IF (resourceType &lt;&gt; &apos;CONTAINER&apos; AND resourceType &lt;&gt; &apos;DATA_SOURCE&apos; AND resourceType &lt;&gt; &apos;LINK&apos; AND (INSTR(resourcePath,&apos;/shared/&apos;) &gt; 0 AND resourceType = &apos;DATA_SOURCE&apos;)) THEN
&#x9;&#x9;RAISE ex VALUE &apos;The starting path must be a CONTAINER/FOLDER or a published DATA_SOURCE.&apos;;
&#x9;END IF;

&#x9;IF (resourceType IN (&apos;LINK&apos;, &apos;TABLE&apos;, &apos;PROCEDURE&apos;)) THEN
&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/returnFolderNameAndFolderPath(resourcePath, &apos;R&apos;, resourceName, parentPath);
&#x9;&#x9;SET resourcePath = parentPath;
&#x9;&#x9;-- Get the resource type
&#x9;&#x9;getType:
&#x9;&#x9;FOR r AS SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor(resourcePath, null) DO
&#x9;&#x9;&#x9;IF (r.&quot;type&quot; = &apos;DATA_SOURCE&apos; OR r.&quot;type&quot; = &apos;CONTAINER&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;&#x9;ELSEIF (r.&quot;type&quot; = &apos;LINK&apos; AND INSTR(resourcePath, &apos;/services/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;&#x9;ELSEIF ((r.&quot;type&quot; = &apos;TABLE&apos; OR r.&quot;type&quot; = &apos;PROCEDURE&apos;) AND INSTR(resourcePath, &apos;/shared/&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET resourceType = r.&quot;type&quot;;
&#x9;&#x9;&#x9;&#x9;leave getType;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;SET message = moduleName||&apos; : resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;)||&apos;   resourceType=&apos;||NVL(resourceType,&apos;null&apos;)||&apos;   resourceName=&apos;||NVL(resourceName,&apos;null&apos;);  
&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Logic for /services/databases folders
&#x9;IF (INSTR(resourcePath, &apos;/services/databases&apos;) &gt; 0) THEN
&#x9;&#x9;-- Iterate over the resource container list
&#x9;&#x9;FOR r AS 
&#x9;&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) 
&#x9;&#x9;&#x9;WHERE resType &lt;&gt; &apos;CONTAINER&apos;
&#x9;&#x9;DO
&#x9;&#x9;&#x9;SET resourcePath = r.resPath;
&#x9;&#x9;&#x9;SET resourceType = r.resType;

&#x9;&#x9;&#x9;IF (resourceName IS NULL OR (resourceName IS NOT NULL AND resourceName = r.name)) THEN
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;ANALYZE PUBLISHED resourcePath=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;FOR l AS
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT DISTINCT resName, resPath, resType 
&#x9;&#x9;&#x9;&#x9;&#x9;FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceLineageDirectRecursive(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inSeqNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inParentID&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inResourceDepth&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inLineageResourceIdList&#x9;LONGVARCHAR,&#x9;-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;r.resPath, &#x9;--IN resourcePath &#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;r.resType,&#x9;--IN resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The resource type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- comma separate list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,&#x9;&#x9;&#x9;--IN datasourceAncestor&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- flag to get the data source ancestory (1=yes, 0=no)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1&#x9;&#x9;&#x9;--IN inIgnoreResourceDoesNotExist INTEGER, &#x9;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;&#x9;&#x9;WHERE subType = &apos;DATABASE_TABLE&apos;
&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;ANALYZE DATABASE_TABLE resourcePath=&apos;||l.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Produce a pipe delimited string of column name:column type pairs
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
&#x9;&#x9;&#x9;&#x9;&#x9;SET targetServerColumnList = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = false;
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the name of the target server this procedure is comparing with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlResourcePath = targetDVSchemaPath || &apos;/getBasicResourceCursor_SQL_TABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Prepare the SQL statement
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||sqlResourcePath||&apos;(l.resPath, l.resType) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN getBasicResourceCursorCurs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR target AS getBasicResourceCursorCurs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetServerColumnList = targetServerColumnList || target.columnName||&apos;:&apos;||target.columnType||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;TABLE DOES NOT EXIST: &apos;||l.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT tableException) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT columnName, columnType FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE(l.resPath, l.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE columnName IS NOT NULL
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;|&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;COLUMN DOES NOT EXIST: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Given the column name was found in &quot;|col1:type|&quot;, get the ending position of &quot;|&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(targetServerColumnList, &apos;|&apos;, pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the target server column name and type to show as a comparison.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetColumnNameType = SUBSTRING(targetServerColumnList, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;COLUMN TYPE MISMATCH: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;  &apos;||&apos;TARGET=&apos;||targetColumnNameType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;SKIPPING PUBLISHED resourceType=&apos;||resourceType||&apos;  resourcePath=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;

&#x9;-- Logic for /services/webservices folders
&#x9;ELSEIF (INSTR(resourcePath, &apos;/services/webservices&apos;) &gt; 0 AND (resourceType = &apos;CONTAINER&apos; OR resourceType = &apos;DATA_SOURCE&apos;)) THEN

&#x9;&#x9;FOR r AS 
&#x9;&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceListRecursive(resourcePath, resourceType) 
&#x9;&#x9;&#x9;&#x9;WHERE resType = &apos;LINK&apos;
&#x9;&#x9;&#x9;&#x9;  AND resPath &lt;&gt; &apos;/services/webservices/system/admin&apos;
&#x9;&#x9;&#x9;&#x9;  AND resPath &lt;&gt; &apos;/services/webservices/system/util&apos;
&#x9;&#x9;DO
&#x9;&#x9;&#x9;SET resourcePath = r.resPath;
&#x9;&#x9;&#x9;SET resourceType = r.resType;

&#x9;&#x9;&#x9;IF (resourceName IS NULL OR (resourceName IS NOT NULL AND resourceName = r.name)) THEN
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;ANALYZE PUBLISHED resourcePath=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;&#x9;FOR l AS
&#x9;&#x9;&#x9;&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getResourceLineageDirectRecursive(
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inSeqNum&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER,&#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inParentID&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inResourceDepth&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- null to start with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN inLineageResourceIdList&#x9;LONGVARCHAR,&#x9;-- null to start with.  A list of space separated resource ids built up as the resources are traversed. 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Used to prevent circular recursive calls by detecting if a parent resource id is found in this list on subsequent invocations.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;r.resPath, &#x9;--IN resourcePath &#x9;&#x9;&#x9;&#x9;/shared/ASAssets/Utilities/TypeDefinitions.pathType, -- actual resource path and not a folder path
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;r.resType,&#x9;--IN resourceType&#x9;&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- The resource type
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;null,&#x9;&#x9;--IN excludePathsList&#x9;&#x9;&#x9;LONGVARCHAR, &#x9;-- comma separate list of resource paths or partials paths to exclude
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;0,&#x9;&#x9;&#x9;--IN datasourceAncestor&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- flag to get the data source ancestory (1=yes, 0=no)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;1&#x9;&#x9;&#x9;--IN inIgnoreResourceDoesNotExist INTEGER, &#x9;&#x9;-- Ignore any resources that do not exist
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 1 = Bypass the processing of that resource.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- 0 = (default) Do not ignore any resources.  Throw an error that the resource does not exist.
&#x9;&#x9;&#x9;&#x9;&#x9;)
&#x9;&#x9;&#x9;&#x9;&#x9;WHERE subType = &apos;DATABASE_TABLE&apos;
&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;ANALYZE DATABASE_TABLE resourcePath=&apos;||l.resPath);
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;-- Produce a pipe delimited string of column name:column type pairs
&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;e.g. TABLE=tablename|name1:type1|name2:type2|name3:type3|
&#x9;&#x9;&#x9;&#x9;&#x9;SET targetServerColumnList = &apos;TABLE=&apos;||l.resName||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = false;
&#x9;&#x9;&#x9;&#x9;&#x9;BEGIN INDEPENDENT TRANSACTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the name of the target server this procedure is comparing with
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlResourcePath = targetDVSchemaPath || &apos;/getBasicResourceCursor_SQL_TABLE&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(sqlResourcePath, null, sqlResourcePath);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Prepare the SQL statement
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET sqlStatement = &apos;SELECT columnName, columnType FROM &apos;||sqlResourcePath||&apos;(l.resPath, l.resType) WHERE columnName IS NOT NULL&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Get the column list from the target server
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;OPEN getBasicResourceCursorCurs FOR sqlStatement;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR target AS getBasicResourceCursorCurs DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetServerColumnList = targetServerColumnList || target.columnName||&apos;:&apos;||target.columnType||&apos;|&apos;;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;EXCEPTION
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET errorMessage = CAST(CURRENT_EXCEPTION.MESSAGE AS LONGVARCHAR);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET tableException = true;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(errorMessage, &apos;does not exist&apos;) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;TABLE DOES NOT EXIST: &apos;||l.resPath;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;UNKNOWN EXCEPTION: &apos;||l.resPath||&apos;  &apos;||REPLACE(errorMessage, CHR(10), &apos; &apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;END;

&#x9;&#x9;&#x9;&#x9;&#x9;IF (NOT tableException) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FOR c AS 
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SELECT columnName, columnType FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE(l.resPath, l.resType)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE columnName IS NOT NULL
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DO
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;|&apos;) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos1 = INSTR(targetServerColumnList, &apos;|&apos;||c.columnName||&apos;:&apos;);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (pos1 = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;COLUMN DOES NOT EXIST: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Given the column name was found in &quot;|col1:type|&quot;, get the ending position of &quot;|&quot;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET pos2 = INSTR(targetServerColumnList, &apos;|&apos;, pos1+1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Extract the target server column name and type to show as a comparison.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET targetColumnNameType = SUBSTRING(targetServerColumnList, pos1+1, pos2-pos1-1);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET message = &apos;COLUMN TYPE MISMATCH: &apos;||l.resPath||&apos;  column=&apos;||c.columnName||&apos;:&apos;||c.columnType||&apos;  &apos;||&apos;TARGET=&apos;||targetColumnNameType;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SET impactedResourceList = impactedResourceList ||&apos;startingLineagePath=&apos;||resourcePath||&apos;  message=&apos;||message||CHR(10);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INSERT INTO result VALUES(resourcePath, message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;SKIPPING PUBLISHED resourceType=&apos;||resourceType||&apos;  resourcePath=&apos;||resourcePath);
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END FOR;
&#x9;ELSE
&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;SET message = moduleName||&apos; : The resource is not valid for applying rules.  resourceType=&apos;||NVL(resourceType,&apos;null&apos;) || &apos;   resourcePath=&apos;||NVL(resourcePath,&apos;null&apos;);  
&#x9;&#x9;&#x9;CALL PRINT(message);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;-- Send the email of the entire impacted list if there is anything in the list and sendEmail=&apos;Y&apos;
&#x9;IF (LENGTH(TRIM(impactedResourceList)) &gt; 0) THEN
&#x9;&#x9;SET displayName = &apos;IT&apos;;
&#x9;&#x9;SET email = emailList;
&#x9;&#x9;IF (email IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET subject = &apos;DV VALIDATION EXCEPTION: Comnpare Metadata&apos;||&apos;  Target Server=&apos;||targetServerDisplayName||&apos;   Source Server=&apos;||sourceServerDisplayName;
&#x9;&#x9;&#x9;SET body = &apos;To: &apos;|| displayName || CHR(10) || CHR(10);
&#x9;&#x9;&#x9;SET body = body  || subject || CHR(10) || CHR(10);
&#x9;&#x9;&#x9;SET body = body  || &apos;The following resources have been flagged due to impacted resources.&apos;|| CHR(10);
&#x9;&#x9;&#x9;SET body = body  || impactedResourceList || CHR(10);
&#x9;&#x9;&#x9;-- Print out email debug
&#x9;&#x9;&#x9;IF (UPPER(debug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET message = moduleName||&apos; : Send Email:&apos;||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  email=&apos;||NVL(email,&apos;null recipient list&apos;)||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  subject=&apos;||NVL(subject,&apos;null subject&apos;)||CHR(10)||
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&apos;  body=&apos;||NVL(body,&apos;null message body&apos;);
&#x9;&#x9;&#x9;&#x9;CALL PRINT(&apos;&apos;);
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(message,1,DEBUG_PRINT_SIZE));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- Send the email
&#x9;&#x9;&#x9;IF (sendEmail IS NOT NULL AND UPPER(sendEmail) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SendEMail(null, null, email, null, null, subject, emailFormat, NVL(body,&apos;null message body&apos;));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">1554936424229</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserId" type="INTEGER">-1973</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserId" type="INTEGER">-1973</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">11/204</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/188</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/277</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/288</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/388</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/399</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/297</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/253</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/408</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/317</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/205</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">16/260</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/316</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/364</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/415</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">15/371</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/162</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/227</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">12/338</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/435</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/436</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
  <attribute name="resourceModifiedDateOnSourceCISSite" type="LONG">1554936424229</attribute>
</metadata>