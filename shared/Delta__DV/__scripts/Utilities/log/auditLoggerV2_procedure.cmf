<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="auditLoggerV2" path="/shared/Delta_DV/_scripts/Utilities/log/auditLoggerV2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[auditLoggerV2:

&#x9;The auditLogger is meant to be generic implementation for audit logging purposes. 
&#x9;This version does not use a vector for input of attributes as there is a memory leak associate with using a vector as an input variable.
 
&#x9;Input:
&#x9;&#x9;messageText&#x9;&#x9;&#x9;- The message to log, print, insert into database or email.
&#x9;&#x9;attributeList&#x9;&#x9;- Name/Value pair list containing only the necessary attributes for audit logging.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The &quot;Name&quot; portion of the Name/Value pair attribute list is mandatory and the name is provided below with an explanation.

&#x9;&#x9;-- Example of how to declare the necessary variables for attribute list within the invoking procedure:
&#x9;&#x9;DECLARE attributeList&#x9;&#x9;LONGVARCHAR;

&#x9;&#x9;-- Example of how to set the attribute vector to be passed into auditLogger()
&#x9;&#x9;SET attributeList =  
&#x9;&#x9;&#x9;-- Repeat this &lt;attribute&gt; for multiple entries as needed
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;-- &#x9;&#x9;&#x9;&#x9;Name&#x9;&#x9;&#x9;Value&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Description
&#x9;&#x9;SET attributeList =  
&#x9;&#x9;&#x9;-- General options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)|| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=debug or N=do not debug
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- One or more of this list: [LOG, EMAIL, DB, PRINT]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;LOG - write to the DV log.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;EMAIL - send an email.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;DB - insert the message into the AUDI_LOG table. (created and introspected by developer during initialization)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;PRINT - print to the Studio command line.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- One and only one of [ERROR|INFO|DEBUG|AUDIT]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;ERROR - Output error message with severity level ERROR.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;AUDIT - Output audit message with severity level INFO.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;INFO - Output info message with severity level INFO.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;DEBUG - Output debug message with severity level INFO.
&#x9;&#x9;&#x9;-- Database logging options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;auditTablePath&lt;/name&gt;&lt;value&gt;&apos;||NVL(auditTablePath,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;-- The DV path to the AUDIT_LOG table. e.g. /shared/Cache_DB/Cache_Repo/CACHE1/AUDIT_LOG
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;sequenceNum&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(sequenceNum AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;-- A sequence number used to correlate multiple messages across different log messages.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This allows a common code base or framework to generate a sequence number and use it across multiple invocations.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;organizationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(organizationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The name of the organization which can be used to filter messages. e.g. Mortgage, Operations, CustomerSatisfaction.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;applicationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(applicationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The application name that is using DV within the organization which can be used as an additional filter. e.g. HomeLoans, Bankruptcy, etc.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;origUserName&lt;/name&gt;&lt;value&gt;&apos;||NVL(origUserName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The original user name from the application: format=username@domain.  e.g. user1@ldap or user2@composite
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;resourceName&lt;/name&gt;&lt;value&gt;&apos;||NVL(resourceName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The name of the resource being acted upon such as VIEW_NAME_INCR.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;moduleName&lt;/name&gt;&lt;value&gt;&apos;||NVL(moduleName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The name of the module or procedure that is invoking the auditLoger which provides context for the code such as RefreshCache.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;cachekey&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(cachekey AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The cachekey being used to refresh the cache or 0 if not applicable.  This is especially helpful when invoked from the incremental refresh scripts.

&#x9;&#x9;&#x9;-- Send email options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailFrom&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailFrom,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailReplyTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailReplyTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The address to place in the replyTo field of the message.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailBCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailBCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailSubject&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailSubject,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The message subject.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailContentType&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailContentType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;Output:
&#x9;&#x9;None

&#x9;Exceptions:
&#x9;&#x9;Will throw exceptions if the logging is not successful.
&#x9;&#x9;IllegalAttributeNameException: when the attribute name passed is in incorrect.
&#x9;&#x9;IllegalArgumentException: If &quot;from&quot; is not NULL.
&#x9;&#x9;IllegalArgumentException: If any of the address lines are mis-formatted.
&#x9;&#x9;IllegalArgumentException: If there is not at least one &quot;to&quot; address.
&#x9;&#x9;IllegalArgumentException: If there is more than one address in the &quot;replyTo&quot;.
&#x9;&#x9;IllegalArgumentException: If &quot;contentType&quot; is not &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;&#x9;IllegalStateException: If the server&apos;s &quot;from&quot; address is not configured.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;05/09/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Derived from auditLogger and modified to avoid using a VECTOR as an input parameter as there is a memory leak with vectors as input.
&#x9;&#x9;
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.


&#x9;*********************************************************************
&#x9;* Sample DDL syntax for the AUDIT_LOG table.
&#x9;* 
&#x9;*   (1) Create the AUDIT_LOG table
&#x9;*&#x9;&#x9;[Option 1] Execute the DDL manually outside of Composite.
&#x9;*&#x9;&#x9;[Option 2] Automate the DDL creation within some sort of framework that will invoke this auditLogger.
&#x9;*   (2) Once the table is created it must be introspected into Composite.  
&#x9;*   (3) The path to the introspected table is what is provided to auditLogger via the &apos;auditTablePath&apos; attribute.&#x9;
&#x9;*********************************************************************
&#x9;&#x9;ORACLE:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR2(255),  -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR2(255),  -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR2(255),  -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR2(255),  -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR2(2048), -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR2(255),  -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR2(10),   -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;TIMESTAMP(9),   -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR2(2000)  -- The message to be inserted from the application.
        );

&#x9;&#x9;SQL SERVER:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;DATETIME,       -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR(2000)   -- The message to be inserted from the application.
        );

&#x9;&#x9;NETEZZA:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;TIMESTAMP,      -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR(2000)   -- The message to be inserted from the application.
        );]]></annotation>
  <parameters>
    <parameter name="messageText" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed</attribute>
    </parameter>
    <parameter name="attributeList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Log" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/LogError" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToLog" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/resource/ResourceExists" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="path" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourcePath" type="STRING" maxLength="4096"/>
      </element>
      <element name="type" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceType" type="STRING" maxLength="40"/>
      </element>
      <element name="version" direction="IN">
        <datatype referenceDefinitionSet="/lib/resource/ResourceDefs" referenceType="ResourceVersion" type="STRING" maxLength="255"/>
      </element>
      <element name="exists" direction="OUT">
        <datatype type="BOOLEAN"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/GetProperty" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="property" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SendEMail" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="from" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="replyTo" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="to" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="cc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="bcc" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="EMailAddress" type="STRING" maxLength="1024"/>
      </element>
      <element name="subject" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
      <element name="contentType" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="content" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Content" type="STRING" maxLength="65535"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/lib/util/SetEnvironment" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="variableName" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyName" type="STRING" maxLength="255"/>
      </element>
      <element name="value" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="PropertyValue" type="STRING" maxLength="4096"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/conversions/convertYN" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="request" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="response" direction="OUT">
        <datatype type="STRING" maxLength="255"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/RepoUtils/applyReservedListToPath" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inPath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/repository/getBasicResourceCursor_SQL_TABLE" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="fullResourcePath" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="resourceType" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="resourceId">
            <datatype type="INTEGER"/>
          </element>
          <element name="resourceName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="resourcePath">
            <datatype type="STRING" maxLength="1024"/>
          </element>
          <element name="resourceType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="subtype">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="changeId">
            <datatype type="INTEGER"/>
          </element>
          <element name="ownerName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="ownerDomain">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="impactLevel">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="enabled">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="annotation">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="explicitlyDesigned">
            <datatype type="INTEGER" minValue="0" maxValue="1"/>
          </element>
          <element name="tableType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="sqlText">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="proprietaryModel">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
          <element name="columnNum">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="columnName">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="columnType">
            <datatype type="STRING" maxLength="255"/>
          </element>
          <element name="nativeBaseType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
          <element name="nativeType">
            <datatype type="STRING" maxLength="32768"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractBiDelimitedText" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="searchTerm" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="openingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="closingDelim" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="inOccurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inTrimText" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="inCaseSensitive" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;auditLoggerV2:

&#x9;The auditLogger is meant to be generic implementation for audit logging purposes. 
&#x9;This version does not use a vector for input of attributes as there is a memory leak associate with using a vector as an input variable.
 
&#x9;Input:
&#x9;&#x9;messageText&#x9;&#x9;&#x9;- The message to log, print, insert into database or email.
&#x9;&#x9;attributeList&#x9;&#x9;- Name/Value pair list containing only the necessary attributes for audit logging.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;The &quot;Name&quot; portion of the Name/Value pair attribute list is mandatory and the name is provided below with an explanation.

&#x9;&#x9;-- Example of how to declare the necessary variables for attribute list within the invoking procedure:
&#x9;&#x9;DECLARE attributeList&#x9;&#x9;LONGVARCHAR;

&#x9;&#x9;-- Example of how to set the attribute vector to be passed into auditLogger()
&#x9;&#x9;SET attributeList =  
&#x9;&#x9;&#x9;-- Repeat this &lt;attribute&gt; for multiple entries as needed
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||
&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;&#x9;&#x9;-- &#x9;&#x9;&#x9;&#x9;Name&#x9;&#x9;&#x9;Value&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Description
&#x9;&#x9;SET attributeList =  
&#x9;&#x9;&#x9;-- General options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;debug&lt;/name&gt;&lt;value&gt;&apos;||NVL(debug,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)|| &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- Y=debug or N=do not debug
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;loggingType&lt;/name&gt;&lt;value&gt;&apos;||NVL(loggingType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- One or more of this list: [LOG, EMAIL, DB, PRINT]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;LOG - write to the DV log.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;EMAIL - send an email.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;DB - insert the message into the AUDI_LOG table. (created and introspected by developer during initialization)
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;PRINT - print to the Studio command line.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;notificationType&lt;/name&gt;&lt;value&gt;&apos;||NVL(notificationType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- One and only one of [ERROR|INFO|DEBUG|AUDIT]
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;ERROR - Output error message with severity level ERROR.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;AUDIT - Output audit message with severity level INFO.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;INFO - Output info message with severity level INFO.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;DEBUG - Output debug message with severity level INFO.
&#x9;&#x9;&#x9;-- Database logging options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;auditTablePath&lt;/name&gt;&lt;value&gt;&apos;||NVL(auditTablePath,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;-- The DV path to the AUDIT_LOG table. e.g. /shared/Cache_DB/Cache_Repo/CACHE1/AUDIT_LOG
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;sequenceNum&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(sequenceNum AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;-- A sequence number used to correlate multiple messages across different log messages.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- This allows a common code base or framework to generate a sequence number and use it across multiple invocations.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;organizationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(organizationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The name of the organization which can be used to filter messages. e.g. Mortgage, Operations, CustomerSatisfaction.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;applicationName&lt;/name&gt;&lt;value&gt;&apos;||NVL(applicationName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The application name that is using DV within the organization which can be used as an additional filter. e.g. HomeLoans, Bankruptcy, etc.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;origUserName&lt;/name&gt;&lt;value&gt;&apos;||NVL(origUserName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The original user name from the application: format=username@domain.  e.g. user1@ldap or user2@composite
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;resourceName&lt;/name&gt;&lt;value&gt;&apos;||NVL(resourceName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The name of the resource being acted upon such as VIEW_NAME_INCR.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;moduleName&lt;/name&gt;&lt;value&gt;&apos;||NVL(moduleName,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The name of the module or procedure that is invoking the auditLoger which provides context for the code such as RefreshCache.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;cachekey&lt;/name&gt;&lt;value&gt;&apos;||NVL(CAST(cachekey AS VARCHAR),&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- The cachekey being used to refresh the cache or 0 if not applicable.  This is especially helpful when invoked from the incremental refresh scripts.

&#x9;&#x9;&#x9;-- Send email options
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailFrom&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailFrom,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailReplyTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailReplyTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The address to place in the replyTo field of the message.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailTo&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailTo,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailBCC&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailBCC,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailSubject&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailSubject,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;&#x9;&#x9;-- The message subject.
&#x9;&#x9;&#x9;&apos;&lt;attribute&gt;&lt;name&gt;emailContentType&lt;/name&gt;&lt;value&gt;&apos;||NVL(emailContentType,&apos;null&apos;)||&apos;&lt;/value&gt;&lt;/attribute&gt;&apos;||CHR(10)||&#x9;&#x9;&#x9;-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;&#x9;&#x9;&apos;&apos;;

&#x9;Output:
&#x9;&#x9;None

&#x9;Exceptions:
&#x9;&#x9;Will throw exceptions if the logging is not successful.
&#x9;&#x9;IllegalAttributeNameException: when the attribute name passed is in incorrect.
&#x9;&#x9;IllegalArgumentException: If &quot;from&quot; is not NULL.
&#x9;&#x9;IllegalArgumentException: If any of the address lines are mis-formatted.
&#x9;&#x9;IllegalArgumentException: If there is not at least one &quot;to&quot; address.
&#x9;&#x9;IllegalArgumentException: If there is more than one address in the &quot;replyTo&quot;.
&#x9;&#x9;IllegalArgumentException: If &quot;contentType&quot; is not &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;&#x9;IllegalStateException: If the server&apos;s &quot;from&quot; address is not configured.

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;05/09/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Derived from auditLogger and modified to avoid using a VECTOR as an input parameter as there is a memory leak with vectors as input.
&#x9;&#x9;
&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.


&#x9;*********************************************************************
&#x9;* Sample DDL syntax for the AUDIT_LOG table.
&#x9;* 
&#x9;*   (1) Create the AUDIT_LOG table
&#x9;*&#x9;&#x9;[Option 1] Execute the DDL manually outside of Composite.
&#x9;*&#x9;&#x9;[Option 2] Automate the DDL creation within some sort of framework that will invoke this auditLogger.
&#x9;*   (2) Once the table is created it must be introspected into Composite.  
&#x9;*   (3) The path to the introspected table is what is provided to auditLogger via the &apos;auditTablePath&apos; attribute.&#x9;
&#x9;*********************************************************************
&#x9;&#x9;ORACLE:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR2(255),  -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR2(255),  -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR2(255),  -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR2(255),  -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR2(2048), -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR2(255),  -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR2(10),   -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;TIMESTAMP(9),   -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR2(2000)  -- The message to be inserted from the application.
        );

&#x9;&#x9;SQL SERVER:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;DATETIME,       -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR(2000)   -- The message to be inserted from the application.
        );

&#x9;&#x9;NETEZZA:
        CREATE TABLE AUDIT_LOG(
            &quot;cachekey&quot;              NUMERIC(10,0),  -- The cachekey is only relevant when a cache refresh is being performed.
            SEQUENCE_NUM           &#x9;NUMERIC(19,0),  -- The unique sequence number that can be used to correlate a group of messages together as the Cache Framework does.
            ORGANIZATION_NAME      &#x9;VARCHAR(255),   -- The name of the organization.
            APPLICATION_NAME       &#x9;VARCHAR(255),   -- The name of the application [Business line, Business Area, Subject Area].
            CURR_USER_NAME         &#x9;VARCHAR(255),   -- The current user@domain captured in the auditLogger procedure.
            ORIG_USER_NAME         &#x9;VARCHAR(255),   -- The original user@domain who started the process and transcends sessions.
            RESOURCE_NAME          &#x9;VARCHAR(2048),  -- The name of the DV resource.
            MODULE_NAME            &#x9;VARCHAR(255),   -- The name of the DV module (procedure) executing the code.
            NOTIFICATION_TYPE      &#x9;VARCHAR(10),    -- The type of notification [ERROR, AUDIT, INFO, DEBUG].
            AUDIT_TIME             &#x9;TIMESTAMP,      -- The current timestamp when the log entry was made.
            MESSAGE_TEXT           &#x9;VARCHAR(2000)   -- The message to be inserted from the application.
        );
*/
PROCEDURE auditLoggerV2(
&#x9;IN messageText &#x9;&#x9;LONGVARCHAR,&#x9;&#x9;&#x9;-- The message to log.
&#x9;IN attributeList&#x9;LONGVARCHAR&#x9;&#x9;&#x9;&#x9;-- The attributes that describe what and how to log the message.
)
BEGIN INDEPENDENT TRANSACTION
&#x9;DECLARE thisModuleName&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;auditLoggerV2&apos;;
    DECLARE localDebug &#x9;&#x9;&#x9;&#x9;VARCHAR(1) &#x9;DEFAULT &apos;N&apos;;
&#x9;DECLARE localSequenceNum&#x9;&#x9;BIGINT;
    DECLARE localMessageText &#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE printSize&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 63900;
    DECLARE outputMessageText &#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE localLoggingType &#x9;&#x9;VARCHAR DEFAULT &apos;LOG&apos;;
&#x9;DECLARE localNotificationType &#x9;VARCHAR DEFAULT &apos;INFO&apos;;
&#x9;DECLARE localModuleName&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE defaultMessageLength &#x9;INTEGER DEFAULT 4000;
&#x9;DECLARE auditTableColumnList&#x9;VARCHAR DEFAULT &apos;cachekey, SEQUENCE_NUM, ORGANIZATION_NAME, APPLICATION_NAME, CURR_USER_NAME, ORIG_USER_NAME, RESOURCE_NAME, MODULE_NAME, NOTIFICATION_TYPE, AUDIT_TIME, MESSAGE_TEXT&apos;; 
&#x9;DECLARE messageColumn&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;MESSAGE_TEXT&apos;;
&#x9;DECLARE messageLengthStr&#x9;&#x9;VARCHAR;
 &#x9;DECLARE currUserName&#x9;&#x9;&#x9;VARCHAR;
 &#x9;DECLARE userDomain&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE sqlStatement&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE resourceExists&#x9;&#x9;&#x9;BOOLEAN;
&#x9;DECLARE i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE resourceNotExist&#x9;&#x9;EXCEPTION;
&#x9;DECLARE sequenceNum&#x9;&#x9;&#x9;&#x9;BIGINT;  &#x9;&#x9;-- sequence number used to correlate multiple messages across different inserts.
&#x9;DECLARE organizationName&#x9;&#x9;VARCHAR; &#x9;&#x9;-- e.g. Mortgage, Operations
&#x9;DECLARE applicationName&#x9;&#x9;&#x9;VARCHAR; &#x9;&#x9;-- e.g. HomeLoans, Bankruptcy, etc.
&#x9;DECLARE origUserName&#x9;&#x9;&#x9;VARCHAR;&#x9;&#x9;-- original user name from the application: format=username@domain.  e.g. user@ldap or user@composite
&#x9;DECLARE resourceName&#x9;&#x9;&#x9;VARCHAR(4096); &#x9;-- e.g. Name of the resource being acted upon such as VIEW_NAME_INCR
&#x9;DECLARE moduleName &#x9;&#x9;&#x9;&#x9;VARCHAR; &#x9;&#x9;-- e.g. RefreshCache - the name of the procedure that calls this method
&#x9;DECLARE cachekey&#x9;&#x9;&#x9;&#x9;BIGINT; &#x9;&#x9;-- e.g. the cachekey being used to refresh the cache or 0 if not applicable
&#x9;DECLARE loggingType &#x9;&#x9;&#x9;VARCHAR; &#x9;&#x9;-- one or more of [LOG, EMAIL, DB, PRINT]
&#x9;DECLARE notificationType &#x9;&#x9;VARCHAR; &#x9;&#x9;-- one and only one of [ERROR, INFO, DEBUG, AUDIT]
&#x9;DECLARE auditTablePath&#x9;&#x9;&#x9;VARCHAR(4096); &#x9;-- /shared/Cache_DB/Cache_Repo/COMP6_CACHE1/AUDIT_LOG
&#x9;DECLARE debug &#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR; &#x9;&#x9;-- Y or N
&#x9;DECLARE emailFrom&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
&#x9;DECLARE emailReplyTo&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- The address to place in the replyTo field of the message.
&#x9;DECLARE emailTo&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- A comma separated list of e-mail addresses.
&#x9;DECLARE emailCC&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- A comma separated list of e-mail addresses.
&#x9;DECLARE emailBCC&#x9;&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- A comma separated list of e-mail addresses.
&#x9;DECLARE emailSubject&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- The message subject.
&#x9;DECLARE emailContentType&#x9;&#x9;VARCHAR;&#x9;&#x9;-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;DECLARE environmentName&#x9;&#x9;&#x9;VARCHAR(4096);&#x9;-- The name used to save the default message length into the environment memory.
&#x9;DECLARE attrName&#x9;&#x9;&#x9;&#x9;VARCHAR;
&#x9;DECLARE attrValue&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE attrEntry&#x9;&#x9;&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE numEntries&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
 &#x9;DECLARE pos1, pos2&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE pos3, pos4&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE len&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE IllegalAttributeNameException&#x9;EXCEPTION;

&#x9;-- Assign attributes to variables
&#x9;IF (attributeList IS NOT NULL AND LENGTH(TRIM(attributeList)) &gt; 0) THEN
&#x9;&#x9;SET pos1 = INSTR(attributeList, &apos;&lt;attribute&gt;&apos;);
&#x9;&#x9;SET pos2 = INSTR(attributeList, &apos;&lt;/attribute&gt;&apos;);
&#x9;&#x9;WHILE (pos1 &gt; 0 and pos2 &gt; 0) DO
&#x9;&#x9;&#x9;SET numEntries = numEntries + 1;
&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;attribute&gt;&apos;);
&#x9;&#x9;&#x9;SET attrEntry = TRIM(SUBSTRING(attributeList, pos1+len, pos2-(pos1+len)));

&#x9;&#x9;&#x9;-- Extract the name
&#x9;&#x9;&#x9;SET pos3 = INSTR(attrEntry, &apos;&lt;name&gt;&apos;);
&#x9;&#x9;&#x9;SET pos4 = INSTR(attrEntry, &apos;&lt;/name&gt;&apos;);
&#x9;&#x9;&#x9;SET attrName = null;
&#x9;&#x9;&#x9;IF (pos3 = 0 or pos4 = 0) THEN
&#x9;&#x9;&#x9;&#x9;RAISE IllegalAttributeNameException VALUE &apos;attribute[&apos;||numEntries||&apos;]/name may not be blank or empty.&apos;;
&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;name&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET attrName = TRIM(SUBSTRING(attrEntry, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;&#x9;&#x9;IF (LENGTH(TRIM(attrName)) = 0) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;RAISE IllegalAttributeNameException VALUE &apos;attribute[&apos;||numEntries||&apos;]/name may not be blank or empty.&apos;;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(localDebug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(thisModuleName||&apos; : attribute[&apos;||numEntries||&apos;]/name=[&apos;||NVL(attrName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;-- Extract the value
&#x9;&#x9;&#x9;SET pos3 = INSTR(attrEntry, &apos;&lt;value&gt;&apos;);
&#x9;&#x9;&#x9;SET pos4 = INSTR(attrEntry, &apos;&lt;/value&gt;&apos;);
&#x9;&#x9;&#x9;SET attrValue = null;
&#x9;&#x9;&#x9;IF (pos3 &gt; 0 AND pos4 &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;SET len = LENGTH(&apos;&lt;value&gt;&apos;);
&#x9;&#x9;&#x9;&#x9;SET attrValue = TRIM(SUBSTRING(attrEntry, pos3+len, pos4-(pos3+len)));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;-- If the word NULL was passed in then set the column annotation to blank to destroy the annotation that is there.
&#x9;&#x9;&#x9;IF (UPPER(attrValue) = &apos;NULL&apos;) THEN
&#x9;&#x9;&#x9;&#x9;SET attrValue = null;
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;IF (UPPER(localDebug) = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(thisModuleName||&apos; : attribute[&apos;||numEntries||&apos;]/value=[&apos;||NVL(attrValue,&apos;null&apos;)||&apos;]&apos;,1,printSize));
&#x9;&#x9;&#x9;END IF;

&#x9;&#x9;&#x9;IF (attrName IS NOT NULL AND LENGTH(attrName) &gt; 0) THEN
&#x9;&#x9;&#x9;&#x9;CASE attrName
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;debug&apos; &#x9;&#x9;&#x9;&#x9;&#x9;THEN CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/conversions/convertYN(attrValue, debug);
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;loggingType&apos; &#x9;&#x9;&#x9;&#x9;THEN SET loggingType = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;notificationType&apos; &#x9;&#x9;THEN SET notificationType = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Database logging options
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;sequenceNum&apos; &#x9;&#x9;&#x9;&#x9;THEN SET sequenceNum = CAST(attrValue AS BIGINT);
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;organizationName&apos; &#x9;&#x9;THEN SET organizationName = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;applicationName&apos; &#x9;&#x9;&#x9;THEN SET applicationName = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;origUserName&apos; &#x9;&#x9;&#x9;THEN SET origUserName = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;resourceName&apos; &#x9;&#x9;&#x9;THEN SET resourceName = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;moduleName&apos; &#x9;&#x9;&#x9;&#x9;THEN SET moduleName = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;cachekey&apos; &#x9;&#x9;&#x9;&#x9;THEN SET cachekey = CAST(attrValue AS BIGINT);
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;auditTablePath&apos; &#x9;&#x9;&#x9;THEN SET auditTablePath = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;-- Email logging options
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailFrom&apos; &#x9;&#x9;&#x9;&#x9;THEN SET emailFrom = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailReplyTo&apos; &#x9;&#x9;&#x9;THEN SET emailReplyTo = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailTo&apos; &#x9;&#x9;&#x9;&#x9;&#x9;THEN SET emailTo = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailCC&apos; &#x9;&#x9;&#x9;&#x9;&#x9;THEN SET emailCC = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailBCC&apos; &#x9;&#x9;&#x9;&#x9;THEN SET emailBCC = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailSubject&apos; &#x9;&#x9;&#x9;THEN SET emailSubject = CAST(attrValue AS VARCHAR(4096));
&#x9;&#x9;&#x9;&#x9;&#x9;WHEN &apos;emailContentType&apos; &#x9;&#x9;THEN SET emailContentType = CAST(attrValue AS VARCHAR(255));
&#x9;&#x9;&#x9;&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;RAISE IllegalAttributeNameException VALUE &apos;Attribute name is unknown.  name=&apos;||NVL(attrName,&apos;null&apos;);
&#x9;&#x9;&#x9;&#x9;END CASE;
&#x9;&#x9;&#x9;END IF; 

&#x9;&#x9;&#x9;-- Get the next column entry
&#x9;&#x9;&#x9;SET pos1 = INSTR(attributeList, &apos;&lt;attribute&gt;&apos;, pos1+1);
&#x9;&#x9;&#x9;SET pos2 = INSTR(attributeList, &apos;&lt;/attribute&gt;&apos;, pos2+1);
&#x9;&#x9;END WHILE;
&#x9;END IF;

&#x9;SET localSequenceNum = CAST(NVL(CAST(sequenceNum AS VARCHAR), &apos;0&apos;) AS BIGINT);
&#x9;SET localModuleName = TRIM(NVL(moduleName, &apos; &apos;));

&#x9;-- Get the user context:  user name and domain
&#x9;call /lib/util/GetProperty(&apos;CURRENT_USER_NAME&apos;, currUserName);
&#x9;call /lib/util/GetProperty(&apos;CURRENT_USER_DOMAIN&apos;, userDomain);
&#x9;SET currUserName = currUserName ||&apos;@&apos;||userDomain;

    IF (localDebug = &apos;N&apos; AND (debug IS NOT NULL or LENGTH(debug) &gt; 0)) then
        SET localDebug = UPPER(debug);
    END IF;
&#x9;IF loggingType IS NOT NULL THEN
&#x9;&#x9;SET localLoggingType = loggingType;
&#x9;END IF;
&#x9;IF notificationType IS NOT NULL THEN
&#x9;&#x9;SET localNotificationType = notificationType;
&#x9;END IF;
&#x9;IF (LENGTH(localModuleName) &gt; 0) THEN
&#x9;&#x9;SET localModuleName = localModuleName || &apos;: &apos;;
&#x9;END IF;

&#x9;/***************************************
&#x9; * OUTPUT TO LOG OR LOGERROR
&#x9; ***************************************/
&#x9;IF (POSITION(&apos;LOG&apos; IN localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;,&apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
&#x9;&#x9;-- Concat the local message text with additional values.
&#x9;&#x9;SET localMessageText = &apos;&apos;;
&#x9;&#x9;IF (localSequenceNum IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (origUserName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (resourceName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (cachekey IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

&#x9;&#x9;IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
&#x9;&#x9;   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
&#x9;&#x9;END IF;
&#x9;&#x9;SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;
&#x9;&#x9;IF (localNotificationType IN (&apos;ERROR&apos;)) THEN
&#x9;&#x9;&#x9;-- Output error message to log file with severity level ERROR.
&#x9;&#x9;&#x9;CALL LogError (outputMessageText);
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;-- Output error message to log file with severity level INFO.
&#x9;&#x9;&#x9;CALL LOG&#x9;  (outputMessageText);
&#x9;&#x9;END IF;
&#x9;END IF;

&#x9;/***************************************
&#x9; * OUTPUT TO PRINT COMMAND LINE
&#x9; ***************************************/
&#x9;IF (POSITION(&apos;PRINT&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;,&apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
&#x9;&#x9;-- Concat the local message text with additional values.
&#x9;&#x9;SET localMessageText = &apos;&apos;;
&#x9;&#x9;IF (localSequenceNum IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (origUserName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (resourceName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (cachekey IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

&#x9;&#x9;IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
&#x9;&#x9;   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
&#x9;&#x9;END IF;
&#x9;&#x9;SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;
&#x9;&#x9;CALL PRINT(SUBSTRING(outputMessageText,1,printSize));
&#x9;END IF;

&#x9;/***************************************
&#x9; * OUTPUT TO EMAIL
&#x9; ***************************************/
&#x9;IF (POSITION(&apos;EMAIL&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;, &apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
&#x9;&#x9;-- Concat the local message text with additional values.
&#x9;&#x9;SET localMessageText = &apos;&apos;;
&#x9;&#x9;IF (localSequenceNum IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos;Seq#=&apos; || CAST(localSequenceNum AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;IF (origUserName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; origUserName=&apos; || origUserName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (resourceName IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; ResName=&apos; || resourceName;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (cachekey IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET localMessageText = localMessageText || &apos; cachekey=&apos; || CAST(cachekey AS VARCHAR);
&#x9;&#x9;END IF;
&#x9;&#x9;SET localMessageText = localMessageText || &apos; msg=&apos; || TRIM(NVL(messageText, &apos;null&apos;));

&#x9;&#x9;IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
&#x9;&#x9;   SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
&#x9;&#x9;END IF;
&#x9;&#x9;SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;

&#x9;&#x9;-- Validate email attributes
&#x9;&#x9;SET emailFrom = NULL; -- The current rule is for emailFrom to be set to NULL or the server will throw an exception.
&#x9;&#x9;IF (emailContentType != &apos;TEXT_PLAIN&apos; AND emailContentType != &apos;TEXT_HTML&apos;) THEN
&#x9;&#x9;&#x9;SET emailContentType = &apos;TEXT_PLAIN&apos;;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (emailContentType IS NULL OR LENGTH(emailContentType) = 0) THEN
&#x9;&#x9;&#x9;SET emailContentType = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || &apos; DV Generated Email.&apos;;
&#x9;&#x9;END IF;

&#x9;&#x9;-- Sends an e-mail message with the specified headers and content.
&#x9;&#x9;CALL /lib/util/SendEMail(
&#x9;&#x9;&#x9;&#x9;emailFrom,&#x9;&#x9;&#x9;-- The address the message is from.  NULL causes use of the server&apos;s configured &quot;from&quot; address.  Only NULL is supported in this release.
&#x9;&#x9;&#x9;&#x9;emailReplyTo,&#x9;&#x9;-- The address to place in the replyTo field of the message.
&#x9;&#x9;&#x9;&#x9;emailTo,&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&#x9;emailCC,&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&#x9;emailBCC,&#x9;&#x9;&#x9;-- A comma separated list of e-mail addresses.
&#x9;&#x9;&#x9;&#x9;emailSubject,&#x9;&#x9;-- The message subject.
&#x9;&#x9;&#x9;&#x9;emailContentType,&#x9;-- This can be &apos;TEXT_PLAIN&apos; or &apos;TEXT_HTML&apos;.
&#x9;&#x9;&#x9;&#x9;outputMessageText&#x9;-- The message body.
&#x9;&#x9;&#x9;);
&#x9;END IF;

&#x9;/***************************************
&#x9; * OUTPUT TO DB AUDIT_LOG TABLE
&#x9; ***************************************/
&#x9;IF (POSITION(&apos;DB&apos; in localLoggingType) &gt; 0 AND localNotificationType IN (&apos;DEBUG&apos;, &apos;ERROR&apos;, &apos;INFO&apos;, &apos;AUDIT&apos;)) THEN
&#x9;&#x9;SET localMessageText = TRIM(NVL(messageText, &apos; &apos;));

&#x9;&#x9;-- Make sure the database AUDIT_TABLE exists before trying to write to it
&#x9;&#x9;call /lib/resource/ResourceExists(auditTablePath, &apos;TABLE&apos;, null, resourceExists);
&#x9;&#x9;IF (NOT resourceExists) THEN
&#x9;&#x9;&#x9;RAISE resourceNotExist VALUE &apos;The audit log table path provided does not exist.  auditTablePath=&apos;||NVL(auditTablePath, &apos; &apos;);
&#x9;&#x9;END if;

&#x9;&#x9;-- If the defaultMessageLength is stored in memory for this audit table path then use it
&#x9;&#x9;-- Use the audit table path with . notation to get the defaultMessageLength length from memory
&#x9;&#x9;SET environmentName = SUBSTRING(REPLACE(REPLACE(auditTablePath,&apos;/&apos;, &apos;.&apos;), &apos;&quot;&apos;, &apos;&apos;), 2);
&#x9;&#x9;CALL /lib/util/GetEnvironment(environmentName, messageLengthStr);
&#x9;&#x9;IF (UPPER(messageLengthStr) = &apos;NULL&apos; OR UPPER(messageLengthStr) = &apos;[NULL]&apos;) THEN
&#x9;&#x9;&#x9;SET messageLengthStr = null;
&#x9;&#x9;END IF;
&#x9;&#x9;IF (messageLengthStr IS NOT NULL) THEN
&#x9;&#x9;&#x9;SET defaultMessageLength = CAST(messageLengthStr AS INTEGER);
&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(thisModuleName||&apos; : GetEnvironment: ********** &apos;||environmentName||&apos;=&apos;||NVL(messageLengthStr,&apos;null&apos;),1,printSize));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;ELSE
&#x9;&#x9;&#x9;-- Determine the column length of the message text field so that the message length can be substringed dynamically.
&#x9;&#x9;&#x9;tableLoop:
&#x9;&#x9;&#x9;FOR r AS SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/getBasicResourceCursor_SQL_TABLE(auditTablePath, &apos;TABLE&apos;) DO
&#x9;&#x9;&#x9;&#x9;IF (r.columnName = messageColumn) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractBiDelimitedText(r.columnType, &apos;VARCHAR&apos;, &apos;(&apos;, &apos;)&apos;, 1, 1, 0, messageLengthStr);
&#x9;&#x9;&#x9;&#x9;&#x9;SET defaultMessageLength = CAST(messageLengthStr AS INTEGER);
&#x9;&#x9;&#x9;&#x9;&#x9;LEAVE tableLoop;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;END FOR;
&#x9;&#x9;&#x9;-- Use the audit table path with . notation to store the defaultMessageLength length in memory
&#x9;&#x9;&#x9;IF (defaultMessageLength IS NOT NULL) THEN
&#x9;&#x9;&#x9;&#x9;IF (localDebug = &apos;Y&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;CALL PRINT(SUBSTRING(thisModuleName||&apos; : SetEnvironment: ********** &apos;||environmentName||&apos;=&apos;||NVL(CAST(defaultMessageLength AS VARCHAR),&apos;null&apos;),1,printSize));
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;CALL /lib/util/SetEnvironment(environmentName ,CAST(defaultMessageLength AS VARCHAR));
&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;END IF;
&#x9;&#x9;-- For every single quote add another to escape it so that the dynamic sql will execute
&#x9;&#x9;set localMessageText = REPLACE(localMessageText, &apos;&apos;&apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;);
&#x9;&#x9;IF (POSITION(&apos;&apos;&apos;&apos; in localMessageText) &gt; 0) THEN
&#x9;&#x9;&#x9;set localMessageText = REPLACE(localMessageText, &apos;&apos;&apos;&apos;, &apos;&apos;&apos;&apos;&apos;&apos;);
&#x9;&#x9;END IF;

&#x9;&#x9;IF (LENGTH(localMessageText) &gt; defaultMessageLength) THEN
&#x9;&#x9;&#x9;SET localMessageText = SUBSTRING(localMessageText, 1, defaultMessageLength);
&#x9;&#x9;&#x9;-- Remove the odd single quote from the end as it will cause an error inserting.
&#x9;&#x9;&#x9;-- All single quotes must be doubled within the string for the dynamic SQL insert to work.
&#x9;&#x9;&#x9;-- The problem here is that the length of the string has been exceeded so this is a precaution.
&#x9;&#x9;&#x9;-- The best approach is simply to remove all single quotes from the end of the line.
&#x9;&#x9;&#x9;SET i = LENGTH(localMessageText);
&#x9;&#x9;&#x9;msgLoop:
&#x9;&#x9;&#x9;WHILE (i &gt; 0) DO
&#x9;&#x9;&#x9;&#x9;IF (SUBSTR(localMessageText, i, 1) != &apos;&apos;&apos;&apos;) THEN
&#x9;&#x9;&#x9;&#x9;&#x9;leave msgLoop;
&#x9;&#x9;&#x9;&#x9;END IF;
&#x9;&#x9;&#x9;&#x9;SET i = i - 1;
&#x9;&#x9;&#x9;END WHILE;
&#x9;&#x9;&#x9;SET localMessageText = SUBSTRING(localMessageText, 1, i);
&#x9;&#x9;END IF;
&#x9;&#x9;SET localMessageText = 
&#x9;&#x9;&#x9;&#x9;NVL(cachekey, 0)||&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;localSequenceNum||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(organizationName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(applicationName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(currUserName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(origUserName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(resourceName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(moduleName,&apos; &apos;))||&apos;&apos;&apos;, &apos;&apos;&apos;||
&#x9;&#x9;&#x9;&#x9;TRIM(NVL(localNotificationType,&apos; &apos;))||&apos;&apos;&apos;, &apos;||
&#x9;&#x9;&#x9;&#x9;&apos;CAST(&apos;&apos;&apos;||CURRENT_TIMESTAMP||&apos;&apos;&apos; AS TIMESTAMP), &apos;&apos;&apos; 
&#x9;&#x9;&#x9;&#x9;|| localMessageText||&apos;&apos;&apos;&apos;;
&#x9;&#x9;SET outputMessageText = &apos;[&apos; || localNotificationType|| &apos;] &apos; || localModuleName || localMessageText;

&#x9;&#x9;-- Create the dynamic sql statement and handle any null values
&#x9;&#x9;--&#x9; Table Path example: /shared/Cache_DB/Cache_Repo/COMP6_CACHE1/AUDIT_LOG
&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/repository/RepoUtils/applyReservedListToPath(auditTablePath, null, auditTablePath);
&#x9;&#x9;set sqlStatement = &apos;INSERT INTO &apos;||auditTablePath||&apos;
&#x9;&#x9;(&apos;||auditTableColumnList||&apos;) 
&#x9;&#x9;VALUES (&apos;|| localMessageText ||&apos;)&apos;;
&#x9;&#x9;EXECUTE IMMEDIATE sqlStatement;
&#x9;END IF;        

&#x9;IF (localDebug = &apos;Y&apos; AND outputMessageText IS NOT NULL) THEN
&#x9;&#x9;CALL PRINT(SUBSTRING(thisModuleName||&apos; : &apos;||outputMessageText,1,printSize));
&#x9;END IF;

END</attribute>
  <attribute name="creationDate" type="LONG">1389654139807</attribute>
  <attribute name="creatorUserDomain" type="STRING">ldap</attribute>
  <attribute name="creatorUserName" type="STRING">nbklsvb</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed</attribute>
  <attribute name="p:1:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">10/236</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/322</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Log</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/488</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/220</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/319</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>LogError</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/350</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/422</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">11/437</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>