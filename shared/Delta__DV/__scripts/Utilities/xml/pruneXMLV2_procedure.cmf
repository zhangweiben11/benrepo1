<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="pruneXMLV2" path="/shared/Delta_DV/_scripts/Utilities/xml/pruneXMLV2" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[pruneXML:

&#x9;Prune out empty XML nodes except those in the retainXPathList.
&#x9;IMPORTANT:  Some nodes may be empty of data but yet are required from an XML schema validation perspective.
&#x9;By providing an incoming list of XPath statements, this procedure can insure those nodes are not pruned out
&#x9;if they are found to be empty.
 
&#x9;Input:
&#x9;&#x9;debug - defines the debugging options for this procedure.  
&#x9;&#x9;&#x9;Values: Y or T = debugging turned on, N or F = debugging turned off

&#x9;&#x9;namespaces - any string with the valid namespaces for the incoming XML  
&#x9;&#x9;&#x9;Values: e.g. xmlns:tns=&quot;http://mynamespace&quot;
&#x9;&#x9;&#x9;&#x9;     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
&#x9;&#x9;&#x9;&#x9;     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;

&#x9;&#x9;retainXPathList - contains a double || separated list of XPath statements for the incoming XML that insure
&#x9;&#x9;&#x9;those nodes are retained in the XML if they are empty.  The invoking of this procedure must
&#x9;&#x9;&#x9;define and populate the delimited list.  The invoker will determine the XPath statement by consulting
&#x9;&#x9;&#x9;the XML Schema for required elements and the deterimine from their application which nodes have the 
&#x9;&#x9;&#x9;possibility of being empty.  Those are the candidates for this list.
&#x9;&#x9;&#x9;Values: e.g. /rootnode/XYZ/A/@foo||/rootnode/XYZ/C

&#x9;&#x9;inXml - any XML document which requires pruning 
&#x9;&#x9;&#x9;Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
&#x9;Output:
&#x9;&#x9;outXml - contains the incoming XML with nodes pruned
&#x9;&#x9;&#x9;Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;New pruneXMLV2 derived from purneXML to remove vector input.

&#x9;(c) 2017 TIBCO Software Inc. All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="retainXPathList" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outXml" direction="OUT" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed</attribute>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/extractTextList" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textList" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="separator" direction="IN">
        <datatype type="STRING" maxLength="255"/>
      </element>
      <element name="preserveDoubleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveSingleQuotes" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveParenthesis" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="preserveQualifier" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="trimResults" direction="IN">
        <datatype type="INTEGER" minValue="0" maxValue="1"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="textExpression">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;pruneXML:

&#x9;Prune out empty XML nodes except those in the retainXPathList.
&#x9;IMPORTANT:  Some nodes may be empty of data but yet are required from an XML schema validation perspective.
&#x9;By providing an incoming list of XPath statements, this procedure can insure those nodes are not pruned out
&#x9;if they are found to be empty.
 
&#x9;Input:
&#x9;&#x9;debug - defines the debugging options for this procedure.  
&#x9;&#x9;&#x9;Values: Y or T = debugging turned on, N or F = debugging turned off

&#x9;&#x9;namespaces - any string with the valid namespaces for the incoming XML  
&#x9;&#x9;&#x9;Values: e.g. xmlns:tns=&quot;http://mynamespace&quot;
&#x9;&#x9;&#x9;&#x9;     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
&#x9;&#x9;&#x9;&#x9;     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;

&#x9;&#x9;retainXPathList - contains a double || separated list of XPath statements for the incoming XML that insure
&#x9;&#x9;&#x9;those nodes are retained in the XML if they are empty.  The invoking of this procedure must
&#x9;&#x9;&#x9;define and populate the delimited list.  The invoker will determine the XPath statement by consulting
&#x9;&#x9;&#x9;the XML Schema for required elements and the deterimine from their application which nodes have the 
&#x9;&#x9;&#x9;possibility of being empty.  Those are the candidates for this list.
&#x9;&#x9;&#x9;Values: e.g. /rootnode/XYZ/A/@foo||/rootnode/XYZ/C

&#x9;&#x9;inXml - any XML document which requires pruning 
&#x9;&#x9;&#x9;Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot; ghi=&quot;&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
&#x9;Output:
&#x9;&#x9;outXml - contains the incoming XML with nodes pruned
&#x9;&#x9;&#x9;Values: e.g. &lt;rootnode xmlns:tns=&quot;http://mynamespace&quot;&gt;&lt;XYZ abc=&quot;def&quot;&gt;&lt;A foo=&quot;&quot;&gt;aa&lt;/A&gt;&lt;B&gt;bbb&lt;/B&gt;&lt;C/&gt;&lt;/XYZ&gt;&lt;/rootnode&gt;
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new
&#x9;2019.200&#x9;05/21/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;New pruneXMLV2 derived from purneXML to remove vector input.

&#x9;(c) 2017 TIBCO Software Inc. All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE pruneXMLV2(
&#x9;&#x9;IN debug&#x9;&#x9;&#x9;&#x9;CHAR(1),
&#x9;&#x9;IN namespaces&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;&#x9;IN retainXPathList&#x9; &#x9;LONGVARCHAR,
&#x9;&#x9;IN inXml&#x9;&#x9;&#x9;&#x9;XML,
&#x9;&#x9;OUT outXml&#x9;&#x9;&#x9;&#x9;XML
&#x9;)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;VARCHAR DEFAULT &apos;pruneXMLV2()&apos;;
&#x9;DECLARE xsltExpr&#x9;&#x9;LONGVARCHAR;
&#x9;DECLARE xsltTemplate&#x9;LONGVARCHAR DEFAULT &apos;&apos;;

&#x9;-- Build the XSLT template that will preserve nodes in the XML even if they are empty.
&#x9;-- Build a template for each xpath found in the xpath list
&#x9;FOR r AS 
&#x9;&#x9;SELECT * FROM /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/extractTextList(retainXPathList, &apos;||&apos;, 0, 0, 0, 0, 1) 
&#x9;&#x9;WHERE textExpression IS NOT NULL AND LENGTH(TRIM(textExpression)) &gt; 0
&#x9;DO
&#x9;&#x9;SET xsltTemplate = xsltTemplate ||
&apos;
&lt;xslt:template match=&quot;&apos;||r.textExpression||&apos;&quot;&gt;
    &lt;xslt:copy&gt;
      &lt;xslt:apply-templates select=&quot;@*&quot;/&gt;
      &lt;xslt:apply-templates select=&quot;node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt; 
&apos;;
&#x9;END FOR;

&#x9;-- Create the baseline XSTL script that will prune out the XML but leave empty, mandatory fields in the XML
&#x9;SET xsltExpr =
&apos;&lt;xslt:stylesheet version=&quot;1.0&quot;
&#x9;xmlns:xslt=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
&#x9;xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot; 
&#x9;&apos;|| namespaces || &apos;&gt;
  &lt;xslt:output method=&quot;xml&quot; encoding=&quot;UTF-8&quot; indent=&quot;yes&quot;/&gt;
  &lt;xslt:template match=&quot;@*[not(normalize-space(.))]&quot;/&gt;
  &lt;xslt:template match=&quot;node()[ descendant-or-self::*[@* != &amp;apos;&amp;apos;] or  descendant-or-self::*[string-length(normalize-space(.)) &amp;gt; 0] ]&quot;&gt;
    &lt;xslt:copy&gt;
      &lt;xslt:apply-templates select=&quot;@*&quot;/&gt;
      &lt;xslt:apply-templates select=&quot;node()&quot;/&gt;
    &lt;/xslt:copy&gt;
  &lt;/xslt:template&gt;
&apos; || xsltTemplate ||&apos;

  &lt;xslt:template match=&quot;text()&quot;&gt;
    &lt;xslt:value-of select=&quot;.&quot;/&gt;
  &lt;/xslt:template&gt;
  &lt;xslt:template match=&quot;@*&quot;&gt;
    &lt;xslt:attribute name=&quot;{name()}&quot;&gt;
      &lt;xslt:value-of select=&quot;.&quot;/&gt;
    &lt;/xslt:attribute&gt;
  &lt;/xslt:template&gt;

  &lt;!-- This line removes all white space and blank lines --&gt;
  &lt;xslt:template match=&quot;text()[not(normalize-space())]&quot;/&gt;

&lt;/xslt:stylesheet&gt;
&apos;;
&#x9;-- Execute the XSLT against the incoming XML (KO/SDR) format
&#x9;SET outXml = XSLT( inXml, xsltExpr );

&#x9;-- Reformat the XML with a Pretty Print
&#x9;SET xsltExpr = 
&apos;&lt;xsl:stylesheet version=&quot;1.0&quot;
  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;
  xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot;&gt;
   &lt;!-- This xslt does a pretty XML print to reformat the XML where the white space was stripped out --&gt;
   &lt;xsl:output method=&quot;xml&quot;/&gt;
   &lt;xsl:param name=&quot;indent-increment&quot; select=&quot;&apos;&apos;   &apos;&apos;&quot; /&gt;

   &lt;xsl:template match=&quot;*&quot;&gt;
      &lt;xsl:param name=&quot;indent&quot; select=&quot;&apos;&apos;&amp;#xA;&apos;&apos;&quot;/&gt;

      &lt;xsl:value-of select=&quot;$indent&quot;/&gt;
      &lt;xsl:copy&gt;
        &lt;xsl:copy-of select=&quot;@*&quot; /&gt;
        &lt;xsl:apply-templates&gt;
          &lt;xsl:with-param name=&quot;indent&quot;
               select=&quot;concat($indent, $indent-increment)&quot;/&gt;
        &lt;/xsl:apply-templates&gt;
        &lt;xsl:if test=&quot;*&quot;&gt;
          &lt;xsl:value-of select=&quot;$indent&quot;/&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:copy&gt;
   &lt;/xsl:template&gt;

   &lt;xsl:template match=&quot;comment()|processing-instruction()&quot;&gt;
      &lt;xsl:copy /&gt;
   &lt;/xsl:template&gt;

   &lt;xsl:template match=&quot;text()[normalize-space(.)=&apos;&apos;&apos;&apos;]&quot;/&gt;

&lt;/xsl:stylesheet&gt;&apos;;

&#x9;-- Execute the XSLT against the incoming XML (KO/SDR) format
&#x9;SET outXml = XSLT( outXml, xsltExpr );
END</attribute>
  <attribute name="creationDate" type="LONG">1383622342531</attribute>
  <attribute name="creatorUserDomain" type="STRING">composite</attribute>
  <attribute name="creatorUserName" type="STRING">admin</attribute>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="p:4:Customized" type="STRING">datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>