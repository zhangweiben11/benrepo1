<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="getValueFromXML" path="/shared/Delta_DV/_scripts/Utilities/xml/getValueFromXML" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[getValueFromXML:
&#x9;Given an XPath, extract the value from any XML document.
 
&#x9;Input:
&#x9;&#x9;debug - defines the debugging options for this procedure.  
&#x9;&#x9;&#x9;Values: Y or T = debugging turned on, N or F = debugging turned off
&#x9;&#x9;namespaces - any string with the valid namespaces for the incoming XML  
&#x9;&#x9;&#x9;Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
&#x9;&#x9;&#x9;&#x9;     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
&#x9;&#x9;&#x9;&#x9;     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
&#x9;&#x9;inXpath - xpath statement used to extract the value at that location in the XML 
&#x9;&#x9;&#x9;Values: e.g. /Book/sam:Name/@sam:isbn
&#x9;&#x9;inXml - any XML document
&#x9;&#x9;&#x9;Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
&#x9;&#x9;&#x9;&#x9;     &lt;/Book&gt;
&#x9;Output:
&#x9;&#x9;outValue - text value from the XML document as directed by the XPath
&#x9;&#x9;&#x9;Values: e.g. 12-3456-123
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;09/01/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="debug" direction="IN" nullable="true">
      <datatype name="CHAR" type="STRING" minLength="1" maxLength="1"/>
    </parameter>
    <parameter name="namespaces" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXpath" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inXml" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="outValue" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/log/logDebugMessage" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="moduleName" direction="IN">
        <datatype referenceDefinitionSet="/shared/Delta_DV/&quot;_scripts&quot;/Utilities/TypeDefinitions" referenceType="moduleNameType" type="STRING" maxLength="4096"/>
      </element>
      <element name="debug" direction="IN">
        <datatype type="STRING" maxLength="1"/>
      </element>
      <element name="messageText" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* getValueFromXML:
&#x9;Given an XPath, extract the value from any XML document.
 
&#x9;Input:
&#x9;&#x9;debug - defines the debugging options for this procedure.  
&#x9;&#x9;&#x9;Values: Y or T = debugging turned on, N or F = debugging turned off
&#x9;&#x9;namespaces - any string with the valid namespaces for the incoming XML  
&#x9;&#x9;&#x9;Values: e.g. xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;
&#x9;&#x9;&#x9;&#x9;     xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
&#x9;&#x9;&#x9;&#x9;     xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;
&#x9;&#x9;inXpath - xpath statement used to extract the value at that location in the XML 
&#x9;&#x9;&#x9;Values: e.g. /Book/sam:Name/@sam:isbn
&#x9;&#x9;inXml - any XML document
&#x9;&#x9;&#x9;Values: e.g. &lt;Book xmlns:sam=&quot;http://www.compositesw.com/samples/mynamespace/v1.0&quot;&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&lt;sam:Name sam:isbn=&quot;12-3456-123&quot;&gt;Test&lt;/sam:Name&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&lt;Chapter&gt;Test Data&lt;/Chapter&gt;
&#x9;&#x9;&#x9;&#x9;     &lt;/Book&gt;
&#x9;Output:
&#x9;&#x9;outValue - text value from the XML document as directed by the XPath
&#x9;&#x9;&#x9;Values: e.g. 12-3456-123
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;09/01/2010&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc. All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE getValueFromXML(
&#x9;IN debug&#x9;&#x9;&#x9;CHAR(1),
&#x9;IN namespaces&#x9;&#x9;LONGVARCHAR,
&#x9;IN inXpath&#x9;&#x9;&#x9;LONGVARCHAR,
&#x9;IN inXml&#x9;&#x9;&#x9;XML,
&#x9;OUT outValue&#x9;&#x9;LONGVARCHAR
)
BEGIN
&#x9;DECLARE moduleName&#x9;VARCHAR DEFAULT &apos;getValueFromXML()&apos;;
&#x9;DECLARE&#x9;xsltExpr &#x9;LONGVARCHAR;
&#x9;DECLARE outXml&#x9;&#x9;XML;

&#x9;set xsltExpr = 
&apos;&lt;xslt:stylesheet version=&quot;1.0&quot;
&#x9;xmlns:xslt=&quot;http://www.w3.org/1999/XSL/Transform&quot; 
&#x9;xmlns:csw-xform=&quot;http://www.compositesw.com/2003/xform&quot; 
&#x9;&apos;|| namespaces || &apos;&gt;

  &lt;xslt:template match=&quot;/&quot;&gt;
    &lt;xslt:variable name=&quot;_xpath&quot;/&gt;
    &lt;xslt:element name=&quot;results&quot;&gt;
      &lt;xslt:variable name=&quot;_xpath&quot; select=&quot;&apos;|| inXpath || &apos;&quot;/&gt;
      &lt;xslt:element name=&quot;result&quot;&gt;

        &lt;xslt:element name=&quot;value&quot;&gt;
          &lt;xslt:value-of select=&quot;$_xpath&quot;/&gt;
        &lt;/xslt:element&gt;

      &lt;/xslt:element&gt;
    &lt;/xslt:element&gt;
  &lt;/xslt:template&gt;
&lt;/xslt:stylesheet&gt;
&apos;;
&#x9;set outXml = XSLT( inXml, xsltExpr );
&#x9;set outValue = cast(XPATH(outXml, &apos;//value/text()&apos;) as LONGVARCHAR);
&#x9;if (upper(debug) = &apos;Y&apos; or upper(debug) = &apos;T&apos;) then
&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/log/logDebugMessage(moduleName,debug,&apos;XSLT=&apos;||xsltExpr||CHR(13)||&apos;  XPath=&apos;||inXpath || &apos;  VALUE=&apos;||NVL(outValue,&apos;null&apos;));&#x9;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:3:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>