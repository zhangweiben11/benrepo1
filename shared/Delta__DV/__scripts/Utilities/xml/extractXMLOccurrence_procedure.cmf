<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="extractXMLOccurrence" path="/shared/Delta_DV/_scripts/Utilities/xml/extractXMLOccurrence" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[extractXMLOccurrence:

&#x9;Extract XML occurrence refers to the ability to locate XML text based on an opening and closing XML tag.
&#x9;This is useful when needing to extract a particular occurrence of a repeating XML string without having 
&#x9;to use expensive XML parsing utilities.
 
&#x9;Input:
&#x9;&#x9;inXML&#x9;&#x9;&#x9; &#x9;&#x9;LONGVARCHAR, &#x9;-- XML to parse
&#x9;&#x9;&#x9;examples:  &#x9;&lt;xmlRow&gt; &#x9;&#x9;&#x9;&lt;-- opening delimiter -- begin and end delimiter + content returned when inIncludeDelimiter=1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;name&gt;&lt;/name&gt;&#x9;|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;type&gt;&lt;/type&gt;&#x9;|--content in the middle is returned when inIncludeDelimiter=0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;value&gt;&lt;/value&gt;&#x9;|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/xmlRow&gt; &#x9;&#x9;&#x9;&lt;-- closing delimiter
&#x9;&#x9;openingDelim&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- Must be a unique repeating element begin tag within the XML.  format: &lt;tagname&gt;
&#x9;&#x9;closingDelim&#x9;&#x9;&#x9;VARCHAR, &#x9;&#x9;-- Must be a unique repeating element end tag within the XML.    format: &lt;/tagname&gt;
&#x9;&#x9;inOccurrence&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
&#x9;&#x9;inIncludeDelimiter&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not include, &#x9;&#x9;&#x9;&#x9;1=do include delimiter
&#x9;&#x9;inTrimText&#x9;&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not trim, &#x9;&#x9;&#x9;&#x9;1=do trim
&#x9;&#x9;inCaseSensitive&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) case insensitivie search,&#x9;1=case sensitive search
&#x9;Output:
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- FOUND=occurrence found. NOT_FOUND=occurrence not found
&#x9;&#x9;result  &#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if NOT_FOUND then the result is NULL
&#x9;Exceptions:  INVALID_DELIMITER
&#x9;&#x9;&#x9;&#x9; INVALID_PARAMETER

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;05/23/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="inContentXML" direction="IN" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
    <parameter name="inTagName" direction="IN" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="inOccurrence" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inIncludeDelimiter" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inTrimText" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="inCaseSensitive" direction="IN" nullable="true">
      <datatype name="INTEGER" type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
    </parameter>
    <parameter name="status" direction="OUT" nullable="true">
      <datatype name="VARCHAR" type="STRING" maxLength="255"/>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="LONGVARCHAR" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/debug/Print" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="textToPrint" direction="IN">
        <datatype referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/xml/unescapeXML" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="inStr" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outStr" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* 
&#x9;extractXMLOccurrence:

&#x9;Extract XML occurrence refers to the ability to locate XML text based on an opening and closing XML tag.
&#x9;This is useful when needing to extract a particular occurrence of a repeating XML string without having 
&#x9;to use expensive XML parsing utilities.  If the XML contains escaped XML, the content will automatically
&#x9;be unescaped before proceeding with extraction.
&#x9;Example. this input:
&#x9;&#x9;&#x9;&#x9;&amp;lt;xmlRow&amp;gt;    &amp;lt;name&amp;gt;FirstName&amp;lt;/name&amp;gt;   &amp;lt;type&amp;gt;STRING&amp;lt;/type&amp;gt;   &amp;lt;value&amp;gt;Bob&amp;lt;/value&amp;gt; &amp;lt;/xmlRow&amp;gt; 
&#x9;&#x9;&#x9;becomes:
&#x9;&#x9;&#x9;&#x9;&lt;xmlRow&gt;    &lt;name&gt;FirstName&lt;/name&gt;   &lt;type&gt;STRING&lt;/type&gt;   &lt;value&gt;Bob&lt;/value&gt; &lt;/xmlRow&gt; 
 
&#x9;Input:
&#x9;&#x9;inContentXML&#x9; &#x9;&#x9;LONGVARCHAR, &#x9;-- XML to parse
&#x9;&#x9;&#x9;examples:  &#x9;&lt;xmlRow&gt; &#x9;&#x9;&#x9;&lt;-- opening delimiter -- begin and end delimiter + content returned when inIncludeDelimiter=1
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;name&gt;&lt;/name&gt;&#x9;|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;type&gt;&lt;/type&gt;&#x9;|--content in the middle is returned when inIncludeDelimiter=0
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;value&gt;&lt;/value&gt;&#x9;|
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;/xmlRow&gt; &#x9;&#x9;&#x9;&lt;-- closing delimiter
&#x9;&#x9;inTagName&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- This is the opening and closing XML tag name.  It is only the tag name with no angle brackets.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;The opening &lt;tagname&gt; and closing &lt;/tagname&gt; brackets will applied within this procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;The tag anme must be a unique repeating element within the XML.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;e.g. xmlRow
&#x9;&#x9;inOccurrence&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
&#x9;&#x9;inIncludeDelimiter&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not include, &#x9;&#x9;&#x9;&#x9;1=do include delimiter
&#x9;&#x9;inTrimText&#x9;&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not trim, &#x9;&#x9;&#x9;&#x9;1=do trim
&#x9;&#x9;inCaseSensitive&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) case insensitivie search,&#x9;1=case sensitive search
&#x9;Output:
&#x9;&#x9;status&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- FOUND=occurrence found. NOT_FOUND=occurrence not found
&#x9;&#x9;result  &#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if NOT_FOUND then the result is NULL
&#x9;Exceptions:  INVALID_DELIMITER
&#x9;&#x9;&#x9;&#x9; INVALID_PARAMETER

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2019.200&#x9;05/23/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Created new.

&#x9;(c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCOÂ® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE extractXMLOccurrence(
&#x9;IN inContentXML&#x9;&#x9; &#x9;LONGVARCHAR, &#x9;-- XML to parse
&#x9;IN inTagName&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- This is the opening and closing XML tag name.  It is only the tag name with no angle brackets.  
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;--&#x9;&#x9;The opening &lt;tagname&gt; nand closing &lt;/tagname&gt; brackets will applied within this procedure.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;The tag anme must be a unique repeating element within the XML.
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- &#x9;&#x9;e.g. xmlRow
&#x9;IN inOccurrence&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- The occurrence of the opening and closing delimiter.  Must be greater than 0.
&#x9;IN inIncludeDelimiter&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not include, &#x9;&#x9;&#x9;&#x9;1=do include delimiter
&#x9;IN inTrimText&#x9;&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) do not trim, &#x9;&#x9;&#x9;&#x9;1=do trim
&#x9;IN inCaseSensitive&#x9;&#x9;INTEGER, &#x9;&#x9;-- 0 (default) case insensitivie search,&#x9;1=case sensitive search
&#x9;OUT status&#x9;&#x9;&#x9;&#x9;VARCHAR,&#x9;&#x9;-- FOUND=occurrence found. NOT_FOUND=occurrence not found
&#x9;OUT result  &#x9;&#x9;&#x9;LONGVARCHAR&#x9;&#x9;-- if FOUND and result is NULL then a null tag was found.  &lt;tagname/&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is empty &apos;&apos; then an empty tag was found &lt;tagname&gt;&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if FOUND and result is not emtpy then a value was found &lt;tagname&gt;value&lt;/tagname&gt;
&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- if NOT_FOUND then the result is NULL
)
BEGIN
&#x9;DECLARE moduleName&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT &apos;extractXMLOccurrence&apos;;
&#x9;DECLARE debug&#x9;&#x9;&#x9;&#x9;&#x9;CHAR(1) DEFAULT &apos;N&apos;;
&#x9;DECLARE contentXML&#x9;&#x9;&#x9;&#x9;LONGVARCHAR DEFAULT inContentXML;
&#x9;DECLARE tagName&#x9;&#x9;&#x9;&#x9;&#x9;VARCHAR DEFAULT TRIM(inTagName);  -- Must be a unique repeating element tag within the XML.
&#x9;DECLARE occurrence&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT inOccurrence;
&#x9;DECLARE includeDelimiter&#x9;&#x9;INTEGER DEFAULT inIncludeDelimiter;
&#x9;DECLARE trimText&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT inTrimText;
&#x9;DECLARE caseSensitive&#x9;&#x9;&#x9;INTEGER DEFAULT inCaseSensitive;
&#x9;DECLARE openingDelim&#x9;&#x9;&#x9;VARCHAR; -- Format derived from inTagName.  format: &lt;tagname&gt;
&#x9;DECLARE closingDelim&#x9;&#x9;&#x9;VARCHAR; -- Format derived from inTagName.  format: &lt;/tagname&gt;
&#x9;DECLARE nullDelim&#x9;&#x9;&#x9;&#x9;VARCHAR; -- Format derived from inTagName.  format: &lt;tagname/&gt;
&#x9;-- Remove the &apos;&gt;&apos; from the end of the opening delimiter in order to find null tags also
&#x9;DECLARE openModDelim&#x9;&#x9;&#x9;VARCHAR; -- Format derived from inTagName.  format: &lt;tagname
&#x9;DECLARE len&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE startPos &#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE endPos&#x9;&#x9;&#x9;&#x9;&#x9;INTEGER DEFAULT 0;
&#x9;DECLARE nullTagPos&#x9;&#x9;&#x9;&#x9;INTEGER;
&#x9;DECLARE INVALID_DELIMITER&#x9;&#x9;EXCEPTION;
&#x9;DECLARE INVALID_PARAMETER&#x9;&#x9;EXCEPTION;

&#x9;-- Validate the input
&#x9;if (tagName is null or length(tagName) = 0) then
&#x9;&#x9;raise INVALID_DELIMITER value &apos;The &quot;inTagName&quot; may not be null or empty.&apos;;
&#x9;end if;
&#x9;-- Validate occurrence
&#x9;if (occurrence is null) then
&#x9;&#x9;set occurrence = 0;
&#x9;end if;
&#x9;if (occurrence &lt;= 0) then
&#x9;&#x9;raise INVALID_PARAMETER value &apos;The occurrence must be greater than 0.  occurrence=&apos;||occurrence;
&#x9;end if;
&#x9;-- Validate includeDelimiter
&#x9;if (includeDelimiter is null) then
&#x9;&#x9;set includeDelimiter = 0;
&#x9;end if;
&#x9;-- Validate trimText
&#x9;if (trimText is null) then
&#x9;&#x9;set trimText = 0;
&#x9;end if;
&#x9;-- Validate caseSensitive
&#x9;if (caseSensitive is null) then
&#x9;&#x9;set caseSensitive = 0;
&#x9;end if;

&#x9;-- Set various tag name styles from the input tag name parameter including: opening, closing, null and open modified.
&#x9;if (INSTR(tagName, &apos;&lt;&apos;) &gt; 0) then
&#x9;&#x9;set tagName = REPLACE(tagName, &apos;&lt;&apos;, &apos;&apos;);
&#x9;end if;
&#x9;if (INSTR(tagName, &apos;&gt;&apos;) &gt; 0) then
&#x9;&#x9;set tagName = REPLACE(tagName, &apos;&gt;&apos;, &apos;&apos;);
&#x9;end if;
&#x9;if (INSTR(tagName, &apos;&lt;/&apos;) &gt; 0) then
&#x9;&#x9;set tagName = REPLACE(tagName, &apos;&lt;/&apos;, &apos;&apos;);
&#x9;end if;
&#x9;set openingDelim &#x9;= &apos;&lt;&apos; || tagName || &apos;&gt;&apos;;
&#x9;set closingDelim &#x9;= &apos;&lt;/&apos;|| tagName || &apos;&gt;&apos;;
&#x9;set nullDelim    &#x9;= &apos;&lt;&apos; || tagName || &apos;/&gt;&apos;;
&#x9;set openModDelim = &apos;&lt;&apos; || tagName;

&#x9;-- Determine if the XML requires un-escaping
&#x9;-- &amp;lt;xmlRow&amp;gt;    &amp;lt;name&amp;gt;FirstName&amp;lt;/name&amp;gt;   &amp;lt;type&amp;gt;STRING&amp;lt;/type&amp;gt;   &amp;lt;value&amp;gt;Bob&amp;lt;/value&amp;gt; &amp;lt;/xmlRow&amp;gt; 
&#x9;if (INSTR(contentXML, &apos;&amp;lt;&apos;||tagName||&apos;&amp;gt;&apos;) &gt; 0) then
&#x9;&#x9;call /shared/Delta_DV/&quot;_scripts&quot;/Utilities/&quot;xml&quot;/unescapeXML(contentXML, contentXML);
&#x9;end if;

&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;call print(moduleName||&apos; : INPUT:&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   contentXML=&apos;||NVL(contentXML,&apos;null&apos;));
&#x9;&#x9;call print(moduleName||&apos; :   tagName=[&apos;||NVL(tagName,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   occurrence=[&apos;||occurrence||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   includeDelimiter=[&apos;||includeDelimiter||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   trimText=[&apos;||trimText||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   caseSensitive=[&apos;||caseSensitive||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   openingDelim=[&apos;||NVL(openingDelim,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   closingDelim=[&apos;||NVL(closingDelim,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   nullDelim=[&apos;||NVL(nullDelim,&apos;null&apos;)||&apos;]&apos;);
&#x9;&#x9;call print(moduleName||&apos; :   openModDelim=[&apos;||NVL(openModDelim,&apos;null&apos;)||&apos;]&apos;);
&#x9;end if;

/* Example
&lt;xmlRow&gt; 
  &lt;name&gt;&lt;/name&gt;
  &lt;type&gt;&lt;/type&gt;
  &lt;value&gt;&lt;/value&gt;
&lt;/xmlRow&gt;
&lt;xmlRow/&gt; 
&lt;xmlRow&gt; 
  &lt;name&gt;&lt;/name&gt;
  &lt;type&gt;&lt;/type&gt;
  &lt;value/&gt;
&lt;/xmlRow&gt;
*/
&#x9;set status = &apos;NOT_FOUND&apos;;
&#x9;set result = null;
&#x9;if (caseSensitive = 0) then
&#x9;&#x9;set startPos = INSTR(LOWER(contentXML), LOWER(openModDelim), 1, occurrence);
&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName||&apos; :   startPos=&apos;||startPos);
&#x9;&#x9;end if;
&#x9;&#x9;if (startPos &gt; 0) then
&#x9;&#x9;&#x9;set nullTagPos = INSTR(LOWER(contentXML), LOWER(nullDelim), startPos);
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :   nullTagPos=&apos;||nullTagPos);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (startPos = nullTagPos) then
&#x9;&#x9;&#x9;&#x9;-- found null delimiter. Intialize result
&#x9;&#x9;&#x9;&#x9;set status = &apos;FOUND&apos;;
&#x9;&#x9;&#x9;&#x9;set result = null;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set endPos = INSTR(LOWER(contentXML), LOWER(closingDelim), startPos);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;else
&#x9;&#x9;set startPos = INSTR(contentXML, openModDelim, 1, occurrence);
&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName||&apos; :   startPos=&apos;||startPos);
&#x9;&#x9;end if;
&#x9;&#x9;if (startPos &gt; 0) then
&#x9;&#x9;&#x9;set nullTagPos = INSTR(contentXML, nullDelim, startPos);
&#x9;&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;&#x9;call print(moduleName||&apos; :   nullTagPos=&apos;||nullTagPos);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;&#x9;if (startPos = nullTagPos) then
&#x9;&#x9;&#x9;&#x9;-- found null delimiter. Intialize result
&#x9;&#x9;&#x9;&#x9;set status = &apos;FOUND&apos;;
&#x9;&#x9;&#x9;&#x9;set result = null;
&#x9;&#x9;&#x9;else
&#x9;&#x9;&#x9;&#x9;set endPos = INSTR(contentXML, closingDelim, startPos);
&#x9;&#x9;&#x9;end if;
&#x9;&#x9;end if;
&#x9;end if;

&#x9;-- Search for the opening and closing tag for the occurrence
&#x9;if (status = &apos;NOT_FOUND&apos; and startPos &gt; 0 and endPos &gt; 0 and endPos &gt; startPos) then
&#x9;&#x9;set status = &apos;FOUND&apos;;
&#x9;&#x9;if (includeDelimiter = 1) then
&#x9;&#x9;&#x9;set len = LENGTH(closingDelim);
&#x9;&#x9;&#x9;set result = SUBSTRING(contentXML, startPos, (endPos+len)-startPos);
&#x9;&#x9;else
&#x9;&#x9;&#x9;set len = LENGTH(openingDelim);
&#x9;&#x9;&#x9;set result = SUBSTRING(contentXML, startPos+len, endPos-(startPos+len));
&#x9;&#x9;end if;
&#x9;&#x9;if (trimText = 1) then
&#x9;&#x9;&#x9;set result = TRIM(result);
&#x9;&#x9;end if;
&#x9;&#x9;if (UPPER(debug) = &apos;Y&apos;) then
&#x9;&#x9;&#x9;call print(moduleName||&apos; :   result length=&apos;||cast(length(&apos;|&apos;||result||&apos;|&apos;)-2 as varchar));
&#x9;&#x9;end if;
&#x9;end if;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="references" type="MAP">
    <item>
      <key type="STRING">9/220</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/189</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/194</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">9/171</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/145</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/144</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/143</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/142</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/149</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/148</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/147</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/146</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">10/176</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/141</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/140</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
    <item>
      <key type="STRING">8/150</key>
      <value type="STRING_ARRAY">
        <item>lib</item>
        <item>debug</item>
        <item>Print</item>
      </value>
    </item>
  </attribute>
</metadata>