<?xml version="1.1" encoding="UTF-8"?>
<!-- salt:cde82315-e936-41f1-90c6-32daeeda6afd -->
<metadata name="castXMLTextNodeAsVarchar" path="/shared/Delta_DV/_scripts/Utilities/xml/castXMLTextNodeAsVarchar" type="PROCEDURE" subtype="SQL_SCRIPT_PROCEDURE" changeToken="0">
  <annotation><![CDATA[castXMLTextNodeAsVarchar:
  &#x9;This script converts XML text node to varchar. Does appropriate conversion from XML schema dateTime
  &#x9;or time to ANSI format (and even adjusts timezone to server&apos;s timezone if timezone provided.)

&#x9;Inputs:
  &#x9; &#x9; xmlValue - An XML text node (as obtained from an XPATH or XSLT call, for example.)
&#x9;&#x9;result   - The converted text string.

&#x9;Outputs:
  &#x9;&#x9;None (throws an exception if there are any errors)
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

    (c) 2017 TIBCO Software Inc.  All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.]]></annotation>
  <parameters>
    <parameter name="xmlValue" direction="IN" nullable="true">
      <datatype name="XML" type="XML" contentConstraint="SEQUENCE" schemaConstraint="ANY" componentType="TYPE" componentName="XML">
        <schemaDatatype>
          <datatype name="XML" type="TREE" refId="257"></datatype>
        </schemaDatatype>
      </datatype>
      <attribute name="Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
    </parameter>
    <parameter name="result" direction="OUT" nullable="true">
      <datatype name="Text" referenceDefinitionSet="/lib/util/System" referenceType="Text" type="STRING" maxLength="2147483647"/>
    </parameter>
  </parameters>
  <security>
    <owner user="nobody" domain="composite"/>
  </security>
  <dependency target="/lib/util/System" type="DEFINITION_SET">
    <datatype name="Tree" type="TREE" refId="257"></datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/TextUtils/RegexFind" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/string/TextUtils/RegexGetGroups" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="Input Text" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Regular Expression" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="Occurrence" direction="IN">
        <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
      </element>
      <element name="result" direction="OUT">
        <datatype type="TABLE" refId="256">
          <element name="groupNumber">
            <datatype type="INTEGER" minValue="-2147483648" maxValue="2147483647"/>
          </element>
          <element name="matchedGroup">
            <datatype type="STRING" maxLength="2147483647"/>
          </element>
        </datatype>
      </element>
    </datatype>
  </dependency>
  <dependency target="/shared/Delta_DV/_scripts/Utilities/time/DateUtils/GetServerTimezone" type="PROCEDURE">
    <datatype type="PROCEDURE" refId="258">
      <element name="displayType" direction="IN">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
      <element name="outValue" direction="OUT">
        <datatype type="STRING" maxLength="2147483647"/>
      </element>
    </datatype>
  </dependency>
  <attribute name="Script" type="STRING">/* castXMLTextNodeAsVarchar:
  &#x9;This script converts XML text node to varchar. Does appropriate conversion from XML schema dateTime
  &#x9;or time to ANSI format (and even adjusts timezone to server&apos;s timezone if timezone provided.)

&#x9;Inputs:
  &#x9; &#x9; xmlValue - An XML text node (as obtained from an XPATH or XSLT call, for example.)
&#x9;&#x9;result   - The converted text string.

&#x9;Outputs:
  &#x9;&#x9;None (throws an exception if there are any errors)
&#x9;Exceptions:  none

&#x9;Release:&#x9;Modified Date:&#x9;Modified By:&#x9;&#x9;DV Version:&#x9;&#x9;Reason:
&#x9;2010.3&#x9;&#x9;08/02/2010&#x9;&#x9;Calvin Goodrich&#x9;&#x9;5.1.0&#x9;&#x9;&#x9;Created new.
&#x9;2019.200&#x9;04/04/2019&#x9;&#x9;Mike Tinius&#x9;&#x9;&#x9;7.0.8&#x9;&#x9;&#x9;Changed custom functions to explicit paths.

&#x9;(c) 2017 TIBCO Software Inc. All rights reserved.
&#x9;
&#x9;Except as specified below, this software is licensed pursuant to the Eclipse Public License v. 1.0.
&#x9;The details can be found in the file LICENSE.
&#x9;
&#x9;The following proprietary files are included as a convenience, and may not be used except pursuant
&#x9;to valid license to Composite Information Server or TIBCO® Data Virtualization Server:
&#x9;csadmin-XXXX.jar, csarchive-XXXX.jar, csbase-XXXX.jar, csclient-XXXX.jar, cscommon-XXXX.jar,
&#x9;csext-XXXX.jar, csjdbc-XXXX.jar, csserverutil-XXXX.jar, csserver-XXXX.jar, cswebapi-XXXX.jar,
&#x9;and customproc-XXXX.jar (where -XXXX is an optional version number).  Any included third party files
&#x9;are licensed under the terms contained in their own accompanying LICENSE files, generally named .LICENSE.txt.
&#x9;
&#x9;This software is licensed AS-IS. Support for this software is not covered by standard maintenance agreements with TIBCO.
&#x9;If you would like to obtain assistance with this software, such assistance may be obtained through a separate paid consulting
&#x9;agreement with TIBCO.

*/
PROCEDURE castXMLTextNodeAsVarchar(
  IN xmlValue XML,
  OUT result /lib/util/System.Text
)
BEGIN
  DECLARE myXmlValue /lib/util/System.Text;
  DECLARE dateRE VARCHAR DEFAULT &apos;\-?\d+\-\d{2}\-\d{2}&apos;;
  DECLARE timeRE VARCHAR DEFAULT &apos;\d{2}:\d{2}:\d{2}(?:\.\d+)?&apos;;
  DECLARE timezoneRE VARCHAR DEFAULT &apos;([\+\-])(\d{2}):(\d{2})|(Z)&apos;;
  DECLARE myXMLDateTimeRE VARCHAR DEFAULT &apos;\A\s*(&apos; || dateRE || &apos;)T(&apos; || timeRE || &apos;)(?:&apos; || timezoneRE || &apos;)?\s*\z&apos;;
  DECLARE myXMLTimeRE VARCHAR DEFAULT &apos;\A\s*(&apos; || timeRE || &apos;)(?:&apos; || timezoneRE || &apos;)?\s*\z&apos;;
  DECLARE myDate VARCHAR;
  DECLARE myTime VARCHAR;
  DECLARE myTzSign VARCHAR;
  DECLARE myTzHour VARCHAR;
  DECLARE myTzMinute VARCHAR;
  DECLARE myTzGMT VARCHAR;
  DECLARE myAdjust INTEGER DEFAULT 0;
  DECLARE sysAdjust INTEGER;
  DECLARE c CURSOR;
  DECLARE findText1 LONGVARCHAR;
  DECLARE findText2 LONGVARCHAR;

  CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/&quot;time&quot;/DateUtils/GetServerTimezone(&apos;OFFSET&apos;, sysAdjust);
  SET sysAdjust = sysAdjust / 1000;

  IF (xmlValue IS NULL) THEN
    SET result = NULL;
  ELSE
    SET myXmlValue = CAST(xmlValue AS /lib/util/System.Text);

    -- if the XML value is an XML time, convert it to an ANSI time
    --
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexFind(myXmlValue, myXMLTimeRE, 1, findText1);
&#x9;CALL /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexFind(myXmlValue, myXMLDateTimeRE, 1, findText2);

    IF (findText1 IS NOT NULL) THEN
      -- extract the time and timezone elements
      --
      FOR r AS
        SELECT
          *
        FROM
          /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexGetGroups(myXmlValue, myXMLTimeRE, 1)
      DO
&#x9;&#x9;&#x9;&#x9;CASE r.groupNumber
          WHEN 1 THEN SET myTime = r.matchedGroup;
          WHEN 2 THEN SET myTzSign = r.matchedGroup;
          WHEN 3 THEN SET myTzHour = r.matchedGroup;
          WHEN 4 THEN SET myTzMinute = r.matchedGroup;
          WHEN 5 THEN SET myTzGMT = r.matchedGroup;
        END CASE;
      END FOR; 

      -- update the time with the specified timezone
      --
      IF (myTzSign IS NOT NULL OR myTzGMT IS NOT NULL) THEN

        IF (myTzGMT IS NULL) THEN

          -- calculate seconds adjustment back to GMT from specified timezone
          --
          SET myAdjust = CAST(myTzHour AS INT) * 3600 + CAST(myTzMinute AS INT) * 60;
          IF (myTzSign = &apos;-&apos;) THEN
            SET myAdjust = myAdjust * (-1);
          END IF;

        END IF;

        -- calculate timezone offset difference from system offset
        --
        SET myAdjust = sysAdjust - myAdjust;

        -- get new time by selecting it as a static value from the system ALL_DOMAINS view (can&apos;t seem to crack creating intervals programmatically.)
        --
        OPEN c FOR &apos;SELECT (TIME &apos;&apos;&apos; || myTime || &apos;&apos;&apos; + INTERVAL &apos;&apos;&apos; || myAdjust || &apos;&apos;&apos; SECOND(5)) mytime FROM /services/databases/system/ALL_DOMAINS WHERE DOMAIN_NAME = &apos;&apos;composite&apos;&apos;&apos;;
        FETCH c INTO result;
        CLOSE c;

      ELSE
        SET result = myTime;
      END IF;

    -- if the XML value is an XML dateTime, convert it to an ANSI timestamp
    --
    ELSEIF (findText2 IS NOT NULL) THEN
      -- extract the date, time, and timezone elements
      --
      FOR r AS
        SELECT
          *
        FROM
          /shared/Delta_DV/&quot;_scripts&quot;/Utilities/string/TextUtils/RegexGetGroups(myXmlValue, myXMLDateTimeRE, 1)
      DO
&#x9;&#x9;&#x9;&#x9;CASE r.groupNumber
          WHEN 1 THEN SET myDate = r.matchedGroup;
          WHEN 2 THEN SET myTime = r.matchedGroup;
          WHEN 3 THEN SET myTzSign = r.matchedGroup;
          WHEN 4 THEN SET myTzHour = r.matchedGroup;
          WHEN 5 THEN SET myTzMinute = r.matchedGroup;
          WHEN 6 THEN SET myTzGMT = r.matchedGroup;
        END CASE;
      END FOR; 

      -- update the timestamp with the specified timezone
      --
      IF (myTzSign IS NOT NULL OR myTzGMT IS NOT NULL) THEN

        IF (myTzGMT IS NULL) THEN

          -- calculate seconds adjustment back to GMT from specified timezone
          --
          SET myAdjust = CAST(myTzHour AS INT) * 3600 + CAST(myTzMinute AS INT) * 60;
          IF (myTzSign = &apos;-&apos;) THEN
            SET myAdjust = myAdjust * (-1);
          END IF;

        END IF;

        -- calculate timezone offset difference from system offset
        --
        SET myAdjust = sysAdjust - myAdjust;

        -- get new time by selecting it as a static value from the system ALL_DOMAINS view (can&apos;t seem to crack creating intervals programmatically.)
        --
        OPEN c FOR &apos;SELECT (TIMESTAMP &apos;&apos;&apos; || myDate || &apos; &apos; || myTime || &apos;&apos;&apos; + INTERVAL &apos;&apos;&apos; || myAdjust || &apos;&apos;&apos; SECOND(5)) mytime FROM /services/databases/system/ALL_DOMAINS WHERE DOMAIN_NAME = &apos;&apos;composite&apos;&apos;&apos;;
        FETCH c INTO result;
        CLOSE c;

      ELSE
        SET result = myDate || &apos; &apos; || myTime;
      END IF;

    -- otherwise pass the text through unchanged.
    --
    ELSE 
      SET result = myXmlValue;
    END IF;
  END IF;
END</attribute>
  <attribute name="creationDate" type="LONG">0</attribute>
  <attribute name="creatorUserDomain" type="STRING"/>
  <attribute name="creatorUserName" type="STRING"/>
  <attribute name="explicitly.designed" type="BOOLEAN">false</attribute>
  <attribute name="lastModifiedDate" type="LONG">1609965948495</attribute>
  <attribute name="lastModifiedUserDomain" type="STRING">composite</attribute>
  <attribute name="lastModifiedUserName" type="STRING">admin</attribute>
  <attribute name="model" type="NULL"/>
  <attribute name="native_only" type="STRING">false</attribute>
  <attribute name="p:0:Customized" type="STRING">datatype.changed;datatype.changed;datatype.changed</attribute>
  <attribute name="references" type="NULL"/>
</metadata>